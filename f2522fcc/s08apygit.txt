
100 WEEK 1 Introduction to Version Control 
In this module, you'll be introduced to the concept of version control, which will make managing and rolling back your code look super easy. You’ll learn how to differentiate between files and the tools at your disposal to make this happen. Next, you'll be introduced to Git and how you can leverage that platform to improve your coding abilities. Once you’ve got a grasp on what Git is, you’ll install it and start using it to create and clone code repositories. Last up, you’ll deep dive into Git in order to get more familiar with the different tools and commands it has to offer.
101 SHOW ALL SYLLABUSSHOW ALL
102 Course Introduction5m
Version Control Systems (VCS)

103 Intro to Module 1: Version Control3m
diff patch

104 Keeping Historical Copies2m

105 Diffing Files4m
diff

$ cat rearrange1.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .]*), ([\w .]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ cat rearrange2.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .-]*), ([\w .-]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ diff rearrange1.py rearrange2.py
6c6
<  re.search(r"^([\w .]*), ([\w .]*)$", name)
---
>  re.search(r"^([\w .-]*), ([\w .-]*)$", name)

$ diff -u validations1.py validations2.py

$ diff -u spider.txt spider_fixed.txt
--- spider.txt  2022-01-22 11:12:11.208517700 +0300
+++ spider_fixed.txt    2022-01-22 11:12:48.358885600 +0300
@@ -1,6 +1,6 @@
 The itsy bitsy spider climbed up the waterspout.
 Down came the rain
-And washed the spider out
+And washed the spider out.
 Out came the sun
 And dried up all the rain
 And the itsy bitsy spider climbed up the spout again.



wdiff
meld
KDiff3
vimdiff

106 Applying Changes5m
diff -u oldfile newfile > change.diff

diff file
patch file

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent() return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

$ cat cpu_usage.diff

patch
<

user@ubuntu: $ patch cpu_usage.py < cpu_usage.diff
patching file cpu_usage.py

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent(1) return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

107 Practical Application of diff and patch5m
cp disk_usage.py disk_usage_original.py 
cp disk_usage.py disk_usage_fixed.py

#!/usr/bin/env python3
import shutil

def check_disk_usage(disk, min_absolute, min_percent):
  """Returns True if there is enough free disk space, false otherwise.""" 
  du = shutil.disk usage(disk)

  # Calculate the percentage of free space 
  percent_free = 100 * du.free / du.total

  # Calculate how many free gigabytes 
  gigabytes_free = du.free / 2**30
  if percentfree < min percent or gigabytes_free < minabsolute: 
    return False return True
	
# Check for at least 2 GB and 10% free 
if not check_disk_usage('/", 2*2**30, 10):   
  print("ERROR: Not enough disk space") return 1

print("Everything ok") return 0

sys.exit

patch disk_usage.py < disk_usage.diff

108 What is version control?3m
Version Control System (VCS)
Keeps track of the changes we make to our files

We can make edits to multiple files and treat that collection of edits as a single change, which is commonly known as a commit.

Repositories

109 Version Control and Automation4m

110 What is Git?3m
git-scm.com
Source Control Management

Subversion
Mercurial

111 Installing Git3m
git --version

If you’re running a version number higher than 2.20, then you can just use that one.
If you get an error message, or an older version number, you'll need to install a current version.

apt
yum
Chocolatey
Homebrew

apt install git
yum install git

Notepad++
Atom

MinGW64

Integrated Developer Environments
IDEs

112 Installing Git on Windows (Optional)7m
113 First Steps with Git4m
git init
git clone

git config --global user.email "me@example.com" 
git config --global user.name "My name"

mkdir checks 
cd checks
$ git init

ls -la

Is -l .git/

Staging area (index)

A file maintained by Git that contains all of the information about what files and changes are going to go into your next commit

git status

git commit

$ git config -l

$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto


114 Tracking Files5m




115 The Basic Git Workflow6m
116 Anatomy of a Commit Message4m
117 Module 1 Wrap Up: Intro to Version Control2m
118 Welcome to the Course10m
119 diff and patch Cheat Sheet10m
120 More Information About Git10m
121 Installing Git10m
122 Initial Git Cheat Sheet10m
123 How to Log in to Qwiklabs10m
124 Practice Quiz: Before Version Control25m
Practice Quiz: Before Version Control
Question 1
Your colleague sent you a patch called fix_names.patch, which fixes a config file called fix_names.conf. What command do you need to run to apply the patch to the config file?
diff names.conf fix_names.conf
patch fix_names.conf names.conf
v patch fix_names.conf < fix_names.patch
diff names.conf_orig names.conf_fixed > fix_names.conf
Question 2
You're helping a friend with a bug in a script called fix_permissions.py, which fixes the permissions of a bunch of files. To work on the file, you make a copy and call it fix_permissions_modified.py. What command do you need to run after solving the bug to send the patch to your friend?
v diff fix_permissions.py fix_permissions_modified.py > fix_permissions.patch
patch fix_permissions.py < fix_permissions_modified.py
patch fix_permissions.py > fix_permissions.patch
diff fix_permissions.py fix_permissions.diff
Question 3
The _____ commandhighlights the words that changed in a file instead of working line by line.
diff
diff -u
v wdiff
patch
Question 4
How can we choose the return value our script returns when it finishes?
v Using the exit command from the sys module
Use the patch command
Use the diff command 
Use meld
Question 5
In addition to the original files, what else do we need before we can use the patch command?
v Diff file
exit command of the sys module
Version control
Full copy of the new files

125 Practice Quiz: Version Control Systems25m
Practice Quiz: Version Control Systems
Question 1
How can a VCS (Version Control System) come in handy when updating your software, even if you’re a solo programmer? Check all that apply.
v Git retains local copies of repositories, resulting in fast operations.
v If something breaks due to a change, you can fix the problem by reverting to a working version before the change.
Git relies on a centralized server.
v Git allows you to review the history of your project.
Question 2
Who is the original creator and main developer of the VCS (Version Control System) tool Git?
Bill Gates
Guido van Rossum
v Linus Torvalds
James Gosling
Question 3
_____ is a feature of a software management system that records changes to a file or set of files over time so that you can recall specific versions later.
A repository
sys.exit()
v Version control
IDE
Question 4
A _____ is a collection of edits which has been submitted to the version control system for safe keeping.
IDE
version control system
v commit
repository
Question 5
Within a VCS, project files are organized in centralized locations called _____ where they can be called upon later.
commits
v repositories
IDE
yum

126 Practice Quiz: Using Git25m
Practice Quiz: Using Git
Total points 5
Question 1
Before changes in new files can be added to the Git directory, what command will tell Git to track our file in the list of changes to be committed?
git status
v git add
git commit 
git init
Question 2
Which command would we use to review the commit history for our project?
git clone
git status
git config -l
v git log
Question 3
What command would we use to make Git track our file?
git clone
git status
v git add
git log
Question 4
Which command would we use to look at our config?
git clone
git status
v git config -l
git log
Question 5
Which command would we use to view pending changes?
git clone
v git status
git config -l
git log
127 Qwiklabs Assessment: Introduction to Git
sudo apt update
sudo apt install git
git --version
git version 2.11.0

mkdir my-git-repo
cd my-git-repo
git init
git config --global user.name "Mikhail"

git config -l
user.name=Mikhail
user.email=mmlapinm@gmail.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true

git config --global user.email "mmlapinm@gmail.com"

Git Operations

nano README
This is my first repository.

git status
git add README
git commit
This is my first commit!

nano README
A repository is a location where all the files of a particular project are stored.

git status

git diff README

git add README
git status
git commit -m "This is my second commit."

git log
git log
commit f577f38d6e0ff52cc2489263c60bf9f4f8387899
Author: Mikhail <mmlapinm@gmail.com>
Date:   Sat Jan 22 10:13:19 2022 +0000

    This is my second commit.

commit 7c1c24cdda12a9c97fc11cf3ae4feb7f26b9954f
Author: Mikhail <mmlapinm@gmail.com>
Date:   Sat Jan 22 09:53:35 2022 +0000

    This is my first commit!

200 WEEK2 Using Git Locally In this module, you’ll dive into advanced Git interactions by skipping the staging area for small code changes, and understand how Git uses the HEAD alias to represent checked-out snapshots. Next, you’ll explore how to move and remove files before finally getting a cheat sheet to help you in your Git explorations! The next step of your learning will include how to undo changes before committing and how to amend commits once they’re submitted. Finally, you’ll be able to identify errors in commits that were submitted a while back. In the final section of this module, you’ll explore the concept of branching and merging. You’ll learn what a branch is, how to create one, and how they work in harmony with you and your code. Once you’re comfortable with branching, you’ll dive into merging, how it works with branched data, and how to deal with merge conflicts.
201 SHOW ALL SYLLABUSSHOW ALL
202 Intro to Module 2: Using Git Locally1m

203 Skipping the Staging Area4m
git commit -a
A shortcut to stage any changes to tracked files and commit them in one step

#!/usr/bin/env python3 

import os

def check reboot():
  """Returns True if the computer has a pending reboot."""
  return os.path.exist("/run/reboot-required")

def main():
  pass
  
main()

git diff
-p
atom all_checks.py
git commit -a -m "Call check reboot from main, exit with 1 on error"
git log

Git uses the HEAD alias to represent the currently checked-out snapshot of your project.

204 Getting More Information About Our Changes6m
patch
git log -p
diff -u
git show
--stat
git diff

#!/usr/bin/env python3 import os 

import sys

def check_reboot():
  """Returns True if the computer has a pending reboot."""	
  return os.path.exist("/run/reboot-required")

def main():
  if checkreboot():
    print("Pending Reboot.") 
	sys.exit(1)
  print("Everything ok.")
  sys.exit(0)
	
main()

git add -p

git diff --staged

git commit -m 'Add a message when everything is ok'

205 Deleting and Renaming Files4m
git rm
ls -l
git rm process.py
ls -l
git status
git mv
git mv disk_usage.py check_free_space.py
git mv diskjjsage.py check_free_space.py 
git status
git commit -m 'New name for disk_usage.py'
.gitignore

206 Undoing Changes Before Committing5m
Undoing Changes Before Committing
git checkout
-p
git reset HEAD output.txt 
git status

https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%A0%D0%B0%D1%81%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5-%D1%82%D0%B0%D0%B9%D0%BD-reset


207 Amending Commits4m
--amend
touch auto-update.py 
touch gather-information.sh 
ls -l
git add gather-information.sh
git commit --amend

What does the git commit --amend do?
O Add an error log to the commit.
O Remove files from the staging area. 
O Change the commit message.
(•) Overwrite the previous commit.

Avoid amending commits that have already been made public.


208 Rollbacks5m
git revert
HEAD

def check_reboot():
  """Returns True if the computer has a pending reboot."""	
  return os.path.exists("/run/reboot-required")

def main():
  if check reboot():
    print("Pending Reboot.") 
	sys.exit (1)
    print("Everything ok.") 
	sys.exit(0)
	
main()

atom all_checks.py
git commit -a -m 'Add call to disk_full function'

git revert HEAD

git log -p -2

Question
Which of the following is true about the git revert command?
O It undoes a commit as though it never happened.
(.)It creates a new commit with inverse changes.
O The output of git revert is not the same as a regular commit. 
O It does not include the ID of the commit that was reverted.

Awesome! With sit revert, a new commit is created with inverse changes. This cancels previous changes instead of making it as though the original commit never happened.

209 Identifying a Commit6m
git log -1
Hash
SHA1
"You can verify the data you get back out is the exact same data you put in."
Linus Torvalds

git log -2
git show
git show 30e70712882267ca2dd749acfa02ea3aacfd0b24|
git show 30e70
git revert 30e70

Which of the following is NOT true about the SHA1 hash numbers that Git uses to identify commits?
O They provide the consistency that is critical for distributed systems such as Git.
O They are created using the commit message, date, author, and the snapshot taken of the working tree.
(.) Git requires the entire hash ID to identify a commit.
O They are composed of 40 characters.

You nailed it! Git can identify a commit using the first few hash numbers as long as there is only one matching possibility.

210 What is a branch?3m
Branch
A pointer to a particular commit
The default branch that git creates for you when a new repository is initialized is called master.

211 Creating New Branches4m
We can use the git branch command to list, create, delete, and manipulate branches.
git branch
git branch new-feature 
git branch
git checkout

We use git checkout to check out the latest snapshot for both files and for branches.

We use git checkout to check out the latest snapshot for both files and for branches.

git checkout new-feature 
git branch
git checkout -b new branch
git checkout -b even-better-feature

git add free_memory.py
git commit -m 'Add an empty free_memory.py'
git log -2

#!/usr/bin/env python3

def main(): 
  pass

main ()

212 Working with Branches3m
$ cd checks
$ git status
$ Is -l
-rwxr-xr-x 1 user user 658 Jan 6 09:15 c usage.py -rw-r--r-- 1 user user 57 Jan 6 09:46 free_memory.py

git branch -d
$ git	branch
even-better-feature
* master 
new-feature

$ git branch -d new-feature
Deleted branch new-feature (was 7dldel9).
$ git branch
even-better-feature
* master

$ git branch -d even-better-feature
error: The branch 'even-better-feature' is not fully merged.
If you are sure you want to delete it, run 'git branch -D even-better-feature'

213 Merging2m
Merging
The term that Git uses for combining branched data and history together

git merge

git branch
git merge even-better-feature

Git uses two different algorithms to perform a merge: fast-forward and three-way merge.

214 Merge Conflicts6m
atom free_memory.py
free_memory.py git commit -a -m 'Print everything ok'

def main():
  """Checks if there's enough free memory in the computer."""
  
main()

def main():
  print("Everything is ok.")
  
main()

$ git commit -a -m 'Print everything ok'
$ git checkout master
$ git merge even-better-feature

Auto-merging free_memory.py

CONFLICT (content): Merge conflict in free_memory.py Automatic merge failed; fix conflicts and then commit the result.

def main():
<<<<<< HEAD

    """Checks if there's enough free memory in the computer"""
======
    print("Everything is ok.") »»»> even-better-feature
>>>>>> even-better-featur	
	
main()

def main():
use me =
    """Checks if there's enough free memory in the computer."""
    print("Everything is ok.")

main()

atom free_memory.py 
git add free_memory.py 
git status

git log --graph --oneline

It prevents loss of work if two lines overlap.

O It helps us understand which changes to keep. O It warns us of all potential problems.

O It tells us whether the commit is a merge
Correct

Nice job! If two lines have differences Git is unsure about, it's best we decide than risk losing work forever.

git merge --abort

215 Module 2 Wrap Up: Using Git Locally1m

216 Advanced Git Cheat Sheet10m
217 Git Revert Cheat Sheet10m
218 Git Branches and Merging Cheat Sheet10m
219 Practice Quiz: Advanced Git Interaction25m
Practice Quiz: Advanced Git Interaction
Total points 5
Question 1
Which of the following commands is NOT an example of a method for comparing or reviewing the changes made to a file?
git log -p
git diff --staged
git add -p
v git mv
Question 2
What is the gitignore file?
A file containing a list of commands that Git will ignore.
A file the user is intended to ignore.
A file listing uncommitted changes.
v A file containing a list of files or filename patterns for Git to skip for the current repo.
Question 3
What kind of file will the command git commit -a not commit?
Tracked files
v New files
Old files
Staged files
Question 4
What does HEAD represent in Git?
The subject line of a commit message
The top portion of a commit
v The currently checked-out snapshot of your project
The first commit of your project
Question 5
If we want to show some stats about the changes in a commit, like which files were changed and how many lines were added or removed, what flag should we add to git log?
v --stat
--patch
-2
--pretty

220 Practice Quiz: Undoing Things25m
Practice Quiz: Undoing Things
Total points 5
Question 1
Let's say we've made a mistake in our latest commit to a public branch. Which of the following commands is the best option for fixing our mistake?
v git revert
git commit --amend
git reset
git checkout -- <file>
Question 2
If we want to rollback a commit on a public branch that wasn't the most recent one using the revert command, what must we do?
Use the git reset HEAD~2 command instead of revert
Use the revert command repeatedly until we've reached the one we want
v use the commit ID at the end of the git revert command
Use the git commit --amend command instead
Question 3
What does Git use cryptographic hash keys for?
To secure project backups
v To guarantee the consistency of our repository
To encrypt passwords
To identify commits
Question 4
What does the command git commit --amend do?
Start a new branch
Create a copy of the previous commit
Delete the previous commit
v Overwrite the previous commit
Question 5
How can we easily view the log message and diff output the last commit if we don't know the commit ID?
v git show
git identify
git log
git revert 

221 Practice Quiz: Branching & Merging25m
Practice Quiz: Branching & Merging
Total points 5
Question 1
When we merge two branches, one of two algorithms is used. If the branches have diverged, which algorithm is used?
v three-way merge
fast-forward merge
merge conflict
orphan-creating merge
Question 2
The following code snippet represents the result of a merge conflict. Edit the code to fix the conflict and keep the version represented by the current branch.
<<<<<<< HEAD         
print("Keep me!")
=======
print("No, keep me instead!")
>>>>>>> brancho-cucamonga

print("Keep me!")
Question 3
What command would we use to throw away a merge, and start over? 
git checkout -b <branch>
v git merge --abort
git log --graph --oneline 
git branch -D <name>
Question 4
How do we display a summarized view of the commit history for a repo, showing one line per commit? 
git log --format=short 
git branch -D <name>
v git log --graph --oneline 
git checkout -b <branch>
Question 5
The following script contains the result of a merge conflict. Edit the code to fix the conflict, so that both versions are included.
def main():
<<<<<<< HEAD
    print("Start of program>>>>>>>")
=======
    print("End of program!")
>>>>>>> improvement-to-the-code
main()
def main():
    print("Start of program>>>>>>>")
    print("End of program!")
main()

222 Qwiklabs Assessment: Merging Branches in Git
34.121.119.20
student-04-31400403df49
cd ~/food-scripts
cat favorite_foods.log
./food_count.py

./food_question.py

git status
git log

Configure Git
git config user.name "Mikhail"
git config user.email "mmlapinm@gmail.com"

git branch improve-output
git checkout improve-output
nano food_count.py

print("Favourite foods, from most popular to least popular")
./food_count.py

git add food_count.py
git commit -m "Adding a line in the output describing the utility of food_count.py script"

./food_question.py

git log

git revert 21cf3768

git revert 21cf3768

./food_question.py

git checkout master

git merge improve-output

./food_question.py

git status

git log

300 WEEK3 Working with Remotes In this module, you’ll be introduced to GitHub and learn how it works with Git. You’ll create new repositories and clone those repositories onto your computer. Next, we’ll explain what a remote repository is, how we can work with them, and how we can host them. You’ll get familiar with commands like modify, stage, and commit, which will be used for local changes, as well as the fetch command, which can pull any changes from remote repositories. Our final lesson will focus on learning about conflicts. This will allow you to explore the concepts of pull-merge-push workflows, pushing remote branches and rebasing your changes.
301 SHOW ALL SYLLABUSSHOW ALL
302 Intro to Module 3: Working with Remotes2m

303 What is GitHub?2m
Distributed
Each developer has a copy of the whole repository on their local machine
Remote
GitHub
Clone

BitBucket
GitLab

For real configuration and development work, you should use a secure and private Git server, and limit the people authorized to work on it.

https://github.com

304 Basic Interaction with GitHub6m
redquinoa
health-checks
Scripts that check the health of my computers
git clone
git clone https://github.com/redquinoa/health-checks.gitl
Markdown
README.md
# health-checks
Scripts that check the health of my computers
This repo will be populated with lots of fancy checks.
git commit -a -m "Add one more line to README.md"
git push
SSH key-pair
Credential helper
git config --global credential.helper cache
git pull

305 What is a remote?4m
Remote repository
modify
stage
commit
fetch
merge
push

What will happen if the master repository receives a major update since the last local copy was synced?
O Git will push your local copy.
O Nothing will happen.
(.) Git will let you know it's time for an update.
O Git will automatically merge the local copy with the master.
Great job! If there are pending changes in the master branch, Git will let you know.

306 Working with Remotes3m
git clone
origin
git remote -v
git remote show origin
Remote branches
git branch -r
If we want to make a change to a remote branch, what must we do?

O Directly make the change O Use the git branch -r command

Pull the remote branch, merge it with the local branch, then push it back to its origin. O Use the git remote -v command
Correct

Excellent! We still have to go through the normal workflow to change remote branches.

git status

307 Fetching New Changes3m
git remote show origin
git fetch
git checkout
git log
git log origin/master
git status
git merge origin/master
git log

What's the main difference between git fetch and git pull?

git fetch fetches remote updates but doesn't merge; git pull fetches remote updates O git pull fetches remote updates but doesn't merge, while git fetch does.

O git fetch clones the entire repository.

O git pull requires a password while git fetch doesn't.
Correct

Nice job! git pull instantly merges while git fetch only retrieves remote updates.

308 Updating the Local Repository3m
git pull
git log -p -1
git remote show origin
git checkout experimental

Assuming no merge conflicts, which type of merge does git pull perform automatically?
O Three-way merge 
O Explicit merge
(.) Fast-forward merge 
O Half-merge
Awesome! As long as there are no conflicts, Git will move the current branch tip up to the target branch tip and combine histories of both commits.

309 The Pull-Merge-Push Workflow7m
git push
git add -p
git commit -m 'Rename min_absolute to min_gb, use parameter names'
git push
git pull
git log --graph --oneline --all
Three-way merge
git log -p origin/master
git add all_checks.py 
git commit
git push
git log --graph --oneline

What should you do with the <<<, =======, and >>> conflict markers when resolving a merge conflict?
(.) Remove all of the conflict markers and only leave the code as it should be after the merge.
O Leave the conflict markers surrounding the code that you want to keep.
O Remove the <<<< and >>>> markers, and put the ======= marker in front of the lines that you want to keep.
O Do nothing.
Correct

Awesome! Conflict markers aren't required when resolving a merge conflict.

310 Pushing Remote Branches8m
git checkout -b
git checkout -b refactor
git commit -a -m 'Create wrapper function for check_disk_full'

How do you switch to a new local branch?
git checkout -b <branch name> O git branch b O git pull origin branch O git merge branch
Correct

Great job! The command git checkout -b <branch name> will first create a new branch and then switch to it.

git push -u origin refactor

311 Rebasing Your Changes4m
What does "git rebase refactor" do?
Move the current branch on top of the refactor branch O Move the refactor branch on top of the current branch O Move the refactor branch on top of the master branch O Move the master branch on top of the refactor branch

Correct

Nailed it! This makes debugging easier and prevents three-way merges by transferring the completed work from one branch to another.

git log --graph --oneline --all
git checkout refactor
git rebase master
git log --graph --oneline
git checkout master
git merge refactor
git push --delete origin refactor
git branch -d refactor
git push

312 Another Rebasing Example8m
git rebase

def check no network():
  """Returns True if it fails to resolve Google's URL False otherwise""" 
  try:
    socket.gethostbyname("www.google.com") 
	return False 
  except:
    return True

atom all_checks.py
git commit -a -m'Add a simple network connectivity check'

git fetch
git rebase
origin/master
git rebase origin/master
git add health_checks.py 
git rebase --continue
git log --graph --oneline
git push
fetch
rebase
push

Generally, git rebase is an alternative to which command?
O git fetch 
(.)git merge
O git push
O git pull
Correct
Awesome! Rebasing instead of merging rewrites history and maintains linearity, making for cleaner code.

313 Best Practices for Collaboration4m
Always synchronize your branches before starting any work on your own.
Avoid having very large changes that modify lot of different things.
When working on a big change, it makes to have a separate feature branch.
Regularly merge changes made on the master branch back onto the feature branch.
Have the latest version of the project in the master branch, and the stable version of the project on a separate branch.
You shouldn't rebase changes that have been pushed to remote repos.

Which of the following statements is true regarding best practices for collaboration?
O Keep the stable version of the project in the master branch, and the latest version on a separate branch.
O Try to fit all changes into one large change.
O You should always rebase changes that have been pushed to a remote repo.
(.)Always synchronize your branches before starting any work on your own.
Excellent! This way, when you start changing code, you're starting from the most recent version, minimizing chances of conflicts or the need for rebasing.

Having good commit messages is important.


314 Module 3 Wrap Up: Working with Remotes1m
315 Basic Interaction with GitHub Cheat-Sheet10m
316 Git Remotes Cheat-Sheet10m
317 Conflict Resolution Cheat Sheet10m
318 Practice Quiz: Introduction to GitHub25m
Practice Quiz: Introduction to GitHub
Total points 4
Question 1
When we want to update our local repository to reflect changes made in the remote repository, which command would we use?
git clone <URL>
git push
v git pull
git commit -a -m
Question 2
git config --global credential.helper cache allows us to configure the credential helper, which is used for ...what?
Troubleshooting the login process
Dynamically suggesting commit messages
Allowing configuration of automatic repository pulling
v Allowing automated login to GitHub
Question 3
Name two ways to avoid having to enter our password when retrieving and when pushing changes to the repo. (Check all that apply)
Implement a post-receive hook
v Use a credential helper
v Create an SSH key-pair
Use the git commit -a -m command.
Question 4
Before we have a local copy of a commit, we should download one using which command? 
git commit -a -m
git push
git pull
v git clone <URL>

319 Practice Quiz: Using a Remote Repository25m
Practice Quiz: Using a Remote Repository
Total points 5
Question 1
In order to get the contents of a remote branch without automatically merging, which of these commands should we use?
git pull
v git remote update
git checkout
git log -p -1
Question 2
If we need to find more information about a remote branch, which command will help us?
git fetch
git checkout
git remote update
v git remote show origin
Question 3
What command will download remote branches from remote repositories without merging the content with your current workspace automatically?
git checkout
git pull
v git fetch
git remote update
Question 4
What type of merge creates a new merge commit?
Fast-forward merge
v? Implicit merge
Explicit merge
Squash on merge
Question 5
What method of getting remote contents will automatically merge the remote branch with the current local branch?
git fetch
git checkout
git remote update
v git pull

320 Practice Quiz: Solving Conflicts25m
Practice Quiz: Solving Conflicts
Total points 5
Question 1
If you’re making changes to a local branch while another user has also made changes to the remote branch, which command will trigger a merge?
git push
v git pull
git rebase
git fetch
Question 2
Which of the following is a reason to use rebase instead of merging? 
v When you want to keep a linear commit history
When you want a set of commits to be clearly grouped together in history
When you are on a public branch
When pushing commits to a remote branch
Question 3
Where should we keep the latest stable version of the project?
The master branch
v A separate branch from the master branch
The debug branch
A remote branch 
Question 4
Which of the following statements represent best practices for collaboration? (check all that apply)
v When working on a big change, it makes sense to have a separate feature branch.
You should always rebase changes that have been pushed to remote repos.
v Always synchronize your branches before starting any work on your own.
v Avoid having very large changes that modify a lot of different things.
Question 5
What command would we use to change the base of the current branch?
git checkout <branchname>
git pull
v git rebase <branchname>
git fetch

321 Qwiklabs Assessment: Introduction to Github
Checkpoints
Edit the file and add it to repository
Create a new file and commit it to the repository
Add an empty file to the repository through web UI

https://github.com/mlapinm
z0
coursera02b
git clone https://github.com/mlapinm/coursera02b.git

Configure Git
git config --global user.name "mlapinm"
git config --global user.email "mlapin@rambler.ru"

clear
git config -l

$ git config -l
user.name=mlapinm
user.email=mlapin@rambler.ru
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/mlapinm/coursera02b.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.main.remote=origin
branch.main.merge=refs/heads/main

Edit the file and add it to the repository
nano README.md
I am editing the README file. Adding some more details about the project description.
git status
git add README.md
git commit
I am editing the README file.
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch main
# Your branch is up-to-date with 'origin/main'.
#
# Changes to be committed:
#       modified:   README.md
#
git push origin main

git push


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

https://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@github.com/mlapinm/coursera02b.git

git push https://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@github.com/mlapinm/coursera02b.git




Create a new file and commit it to the repository
nano example.py
def git_opeation():
 print("I am adding example.py file to the remote repository.")
git_opeation()
git add example.py
git commit
Create a new file example.py

Add an empty file to the repository through web UI

b0202a.txt

git push origin main

git pull origin main

git push origin main

Wowza, you’re already halfway through the program! We’d love to hear from you about your experience so far. Be sure to share your story on social media using the hashtags #ITCert #Python #GrowWithGoogle

400 WEEK 4 Collaboration In this module, you’ll continue to explore the collaboration tools available in Git. You’ll learn about the tools that are available to help improve the quality of your code and to better track your code. This includes an overview of pull requests and how the typical workflow of a pull request looks like on GitHub. Next, you’ll dive into how you can squash changes in your code. We’ll finish up by providing you with a cheat sheet on fork and pull requests. Next up, we’ll cover what code reviews are and what the code review workflow looks like. Then, you’ll learn about how to use code reviews on GitHub. The final lesson of this module will focus on managing projects. We’ll take a rundown of best practices on managing projects and how to manage collaboration within those projects. We’ll explore different ways of tracking issues and finish up by discussing the concept of continuous integration with your projects.
401 Intro to Module 4: Collaboration2m
Open source

402 A Simple Pull Request on GitHub5m
blue-kale / validations
You’re editing a file in a project you don't have write access to. We've created a fork of this project for you
pull request

Forking
A way of creating a copy of the given repository so that it belongs to our user

Pull request
A commit or series of commits that you the owner of the repository so that they incorporate it into their tree

403 The Typical Pull Request Workflow on GitHub7m
git clone https://github.com/redquinoa/rearrange.git
cd rearrange
git log
qit checkout -b add-readme
Markdown
atom README.md 
git add README.md
git commit -m 'Add a simple README.md file'
git push -u origin add-readme

404 Updating an Existing Pull Request4m
Rearrange
This module is used for rearranging names.
Turns "LastName, FirstName" into "FirstName LastName"
# Example
Calling 'rearrange name("Turing, Alan")' will return '"Alan Turing"

atom README.md
git commit -a -m 'Add more information to the README' 
git push

405 Squashing Changes6m
rebase -i
git rebase -i master
pick

pick 736d754 Add a simple README.md file 
pick 01231b0 Add more information to the README

pick 736d754 Add a simple README.md file 
squash 01231b0 Add more information to the README

git show
git status

git log --graph --oneline --all -4
git push
git push -f

406 What are code reviews?4m
Code review
Going through someone else's code, documentation, or configuration and checking that it all makes sense and follows the expected patterns

Code review
Going through someone else's code, documentation, or configuration and checking that it all makes sense and follows the expected patterns

407 The Code Review Workflow3m
Nit
PEP8
+1

408 How to Use Code Reviews in GitHub5m
atom README.md
git commit -a --amend
git status
Fixup
git push -f

409 Managing Collaboration4m
If you're a project maintained it's important that you reply promptly to pull requests and don't let them stagnate.

It's important that you understand any changes you accept.

When it comes to coordinating who does what and when, a common strategy for active software projects is to use an issue tracker.

Mailing lists
IRC channels
Slack channels
Telegram groups

410 Tracking Issues8m
Issue tracker
Bug tracker
Bugzilla
Issues
Check for critical errors in system logs
Go through /varyloq/kern.log and /var/loq/syslog and check it there are any critical errors that need attention
Closes: #4

# health-checks

Scripts that check the health of my computers

This repo will be populated with lots of fancy checks.

Currently the main script is all checks.py

# health-checks

Scripts that check the health of my computers
This repo will be populated with lots of fancy checks.

Currently the main script is health checks.py^

This script will print "Everything ok" if all checks pass, or the corresponding error messages if some checks fail.

git commit -a

Update README to use the new name of the script
Also add more information about how this works.

Closes #1

# Please enter the commit message for your changes. Lines starting

git push

411 Continuous Integration5m
Continuous integration system (CI)
Will build and test our code every time there's a change

Once we have our code automatically built and tested, the next automation step is continuous deployment, which is sometimes called continuous delivery (CD).

CI/CD
Jenkins
Travis

Pipelines
Specify the steps that need to run to get the result you want

Artifacts
The name used to describe any files that are generated as part of the pipeline

SSH keys
API tokens

Make sure the authorized entities for the test servers are not the same entities authorized to deploy on the production servers.

Always have a plan to recover your access in case your pipeline gets compromised.

www.travis-ci.com

YAML

412 Module 4 Wrap Up: Collaboration1m
413 Congratulations!1m
414 Sneak Peek of the Next Course1m
415 Git Fork and Pull Request Cheat Sheet10m
416 More Information on Code Reviews10m
417 Additional Tools10m
418 Practice Quiz: Pull Requests25m
Practice Quiz: Pull Requests
Total points 5
Question 1
What is the difference between using squash and fixup when rebasing?
Squash deletes previous commits.
v Squash combines the commit messages into one. Fixup discards the new commit message.
Squash only works on Apple operating systems.
Fixup combines the commit messages into one. Squash discards the commit message.
Question 2
What is a pull request?
The owner of the target repository requesting you to add your changes.
v A request sent to the owner and collaborators of the target repository to pull your recent changes.
A request to delete previous changes.
A request for a specific feature in the next version.
Question 3
Under what circumstances is a new fork created?
v When you want to experiment with changes without affecting the main repository.
When you clone a remote repository to your local machine.
During a merge conflict.
When there are too many branches.
Question 4
What combination of command and flags will force Git to push the current snapshot to the repo as it is, possibly resulting in permanent data loss?
v git push -f
git log --graph --oneline --all
git status 
git rebase -i
Question 5
When using interactive rebase, which option is the default, and takes the commits and rebases them against the branch we selected?
squash
edit
reword
v pick

419 Practice Quiz: Code Reviews25m
Practice Quiz: Code Reviews
Total points 5
Question 1
When should we respond to comments from collaborators and reviewers?
When their comments address software-breaking bugs
No need, just resolve the concerns and be done with it
v Always
Only when a code correction is necessary
Question 2
What is a nit?
v A trivial comment or suggestion
A couple lines of code
A repository that is no longer maintained
An orphaned branch
Question 3
Select common code issues that might be addressed in a code review. (Check all that apply)
v Using unclear names
Following PEP8 guidelines
v Forgetting to handle a specific condition
v Forgetting to add tests
Question 4
If we've pushed a new version since we've made a recent change, what might our comment be flagged as?
Accepted
Resolved
v Outdated
Merged
Question 5
What are the goals of code review? (Check all that apply)
v Make sure that the contents are easy to understand
v Ensure consistent style
Build perfect code
v Ensure we don't forget any important cases

420 Practice Quiz: Managing Collaboration25m
Practice Quiz: Managing Collaboration
Total points 5
Question 1
How do we reference issues in our commits with automatic links?
v By using one of the keywords followed by a hashtag and the issue number.
By using an asterisk (*) after the issue number.
By typing the issue number inside braces ({}).
By using a special keyword.
Question 2
What is an artifact in terms of continuous integration/continuous delivery (CI/CD) pipelines?
An old and obsolete piece of code or library.
v Any file generated as part of the CI/CD pipeline.
An unintended minor glitch in a computer program
An automated series of tests that run each time there is a new commit or pull request.
Question 3
Which of the following statements are good advice for project maintainers? (Check all that apply)
Coordinate solely via email
v Reply promptly to pull-requests
v Understand any changes you accept
v Use an issue tracker 
Question 4
Which statement best represents what a Continuous Integration system will do?
v Run tests automatically
Update with incremental rollouts
Assign issues and track who's doing what
Specify the steps that need to run to get the result you want
Question 5
Which statement best represents what a Continuous Delivery (CD) system will do?
Run tests automatically
v Update with incremental rollouts
Assign issues and track who's doing what
Specify the steps that need to run to get the result you want

421 Qwiklabs Assessment: Pushing Local Commits to Github

Forking and detect function behavior
https://github.com/google/it-cert-automation-practice
fork
git clone https://github.com/mlapinm/it-cert-automation-practice.git
git remote -v
git remote add upstream https://github.com/mlapinm/it-cert-automation-practice.git

$ git remote -v
origin  https://github.com/mlapinm/it-cert-automation-practice.git (fetch)
origin  https://github.com/mlapinm/it-cert-automation-practice.git (push)
upstream        https://github.com/mlapinm/it-cert-automation-practice.git (fetch)
upstream        https://github.com/mlapinm/it-cert-automation-practice.git (push)

Configure Git
git config --global user.name "mlapinm"
git config --global user.email "mlapin@rambler.ru"
git config -l

Fix the script

git branch improve-username-behavior
git checkout improve-username-behavior
cd ~/it-cert-automation-practice/Course3/Lab4
ls
nano validations.py

#!/usr/bin/env python3

import re

def validate_user(username, minlen):
    """Checks if the received username matches the required conditions."""
    if type(username) != str:
        raise TypeError("username must be a string")
    if minlen < 1:
        raise ValueError("minlen must be at least 1")

    # Usernames can't be shorter than minlen
    if len(username) < minlen:
        return False
    # Usernames can only use letters, numbers, dots and underscores
    if not re.match('^[a-z0-9._]*$', username):
        return False
    # Usernames can't begin with a number
    if username[0].isnumeric():
        return False
    return True

print(validate_user("blue.kale", 3)) # True
print(validate_user(".blue.kale", 3)) # Currently True, should be False
print(validate_user("red_quinoa", 4)) # True
print(validate_user("_red_quinoa", 4)) # Currently True, should be False

python3 validations.py

Commit the changes
git status
git add validations.py
git status
git commit

Closes: #1
Updated validations.py python script.
Fixed the behavior of validate_user function in validations.py.

4$ git commit
[improve-username-behavior cab4bd8] Closes: #1 Updated validations.py python script. Fixed the behavior of validate_user function in validations.py.
 1 file changed, 5 insertions(+), 2 deletions(-)

Push changes
git push origin improve-username-behavior
git status


 