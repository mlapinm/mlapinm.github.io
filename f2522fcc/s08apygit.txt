
100 WEEK 1 Introduction to Version Control 
In this module, you'll be introduced to the concept of version control, which will make managing and rolling back your code look super easy. You’ll learn how to differentiate between files and the tools at your disposal to make this happen. Next, you'll be introduced to Git and how you can leverage that platform to improve your coding abilities. Once you’ve got a grasp on what Git is, you’ll install it and start using it to create and clone code repositories. Last up, you’ll deep dive into Git in order to get more familiar with the different tools and commands it has to offer.
101 SHOW ALL SYLLABUSSHOW ALL
102 Course Introduction5m
Version Control Systems (VCS)

103 Intro to Module 1: Version Control3m
diff patch

104 Keeping Historical Copies2m

105 Diffing Files4m
diff

$ cat rearrange1.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .]*), ([\w .]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ cat rearrange2.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .-]*), ([\w .-]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ diff rearrange1.py rearrange2.py
6c6
<  re.search(r"^([\w .]*), ([\w .]*)$", name)
---
>  re.search(r"^([\w .-]*), ([\w .-]*)$", name)

$ diff -u validations1.py validations2.py

wdiff
meld
KDiff3
vimdiff

106 Applying Changes5m
diff -u oldfile newfile > change.diff

diff file
patch file

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent() return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

$ cat cpu_usage.diff

patch
<

user@ubuntu: $ patch cpu_usage.py < cpu_usage.diff
patching file cpu_usage.py

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent(1) return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

107 Practical Application of diff and patch5m
cp disk_usage.py disk_usage_original.py 
cp disk_usage.py disk_usage_fixed.py

#!/usr/bin/env python3
import shutil

def check_disk_usage(disk, min_absolute, min_percent):
  """Returns True if there is enough free disk space, false otherwise.""" 
  du = shutil.disk usage(disk)

  # Calculate the percentage of free space 
  percent_free = 100 * du.free / du.total

  # Calculate how many free gigabytes 
  gigabytes_free = du.free / 2**30
  if percentfree < min percent or gigabytes_free < minabsolute: 
    return False return True
	
# Check for at least 2 GB and 10% free 
if not check_disk_usage('/", 2*2**30, 10):   
  print("ERROR: Not enough disk space") return 1

print("Everything ok") return 0

sys.exit

patch disk_usage.py < disk_usage.diff

108 What is version control?3m
Version Control System (VCS)
Keeps track of the changes we make to our files

We can make edits to multiple files and treat that collection of edits as a single change, which is commonly known as a commit.

Repositories

109 Version Control and Automation4m

110 What is Git?3m
git-scm.com
Source Control Management

Subversion
Mercurial

111 Installing Git3m
git --version

If you’re running a version number higher than 2.20, then you can just use that one.
If you get an error message, or an older version number, you'll need to install a current version.

apt
yum
Chocolatey
Homebrew

apt install git
yum install git

Notepad++
Atom

MinGW64

Integrated Developer Environments
IDEs

112 Installing Git on Windows (Optional)7m
113 First Steps with Git4m
git init
git clone

git config --global user.email "me@example.com" 
git config --global user.name "My name"

mkdir checks 
cd checks
$ git init

ls -la

Is -l .git/

Staging area (index)

A file maintained by Git that contains all of the information about what files and changes are going to go into your next commit

git status

git commit

114 Tracking Files5m




115 The Basic Git Workflow6m
116 Anatomy of a Commit Message4m
117 Module 1 Wrap Up: Intro to Version Control2m
118 Welcome to the Course10m
119 diff and patch Cheat Sheet10m
120 More Information About Git10m
121 Installing Git10m
122 Initial Git Cheat Sheet10m
123 How to Log in to Qwiklabs10m
124 Practice Quiz: Before Version Control25m
125 Practice Quiz: Version Control Systems25m
126 Practice Quiz: Using Git25m

200 WEEK2 Using Git Locally In this module, you’ll dive into advanced Git interactions by skipping the staging area for small code changes, and understand how Git uses the HEAD alias to represent checked-out snapshots. Next, you’ll explore how to move and remove files before finally getting a cheat sheet to help you in your Git explorations! The next step of your learning will include how to undo changes before committing and how to amend commits once they’re submitted. Finally, you’ll be able to identify errors in commits that were submitted a while back. In the final section of this module, you’ll explore the concept of branching and merging. You’ll learn what a branch is, how to create one, and how they work in harmony with you and your code. Once you’re comfortable with branching, you’ll dive into merging, how it works with branched data, and how to deal with merge conflicts.
201 SHOW ALL SYLLABUSSHOW ALL
202 Intro to Module 2: Using Git Locally1m

203 Skipping the Staging Area4m
git commit -a
A shortcut to stage any changes to tracked files and commit them in one step

#!/usr/bin/env python3 

import os

def check reboot():
  """Returns True if the computer has a pending reboot."""
  return os.path.exist("/run/reboot-required")

def main():
  pass
  
main()

git diff
-p
atom all_checks.py
git commit -a -m "Call check reboot from main, exit with 1 on error"
git log

Git uses the HEAD alias to represent the currently checked-out snapshot of your project.

204 Getting More Information About Our Changes6m
patch
git log -p
diff -u
git show
--stat
git diff

#!/usr/bin/env python3 import os 

import sys

def check_reboot():
  """Returns True if the computer has a pending reboot."""	
  return os.path.exist("/run/reboot-required")

def main():
  if checkreboot():
    print("Pending Reboot.") 
	sys.exit(1)
  print("Everything ok.")
  sys.exit(0)
	
main()

git add -p

git diff --staged

git commit -m 'Add a message when everything is ok'

205 Deleting and Renaming Files4m
git rm
ls -l
git rm process.py
ls -l
git status
git mv
git mv disk_usage.py check_free_space.py
git mv diskjjsage.py check_free_space.py 
git status
git commit -m 'New name for disk_usage.py'
.gitignore

206 Undoing Changes Before Committing5m
Undoing Changes Before Committing
git checkout
-p
git reset HEAD output.txt 
git status

https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%A0%D0%B0%D1%81%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5-%D1%82%D0%B0%D0%B9%D0%BD-reset


207 Amending Commits4m
--amend
touch auto-update.py 
touch gather-information.sh 
ls -l
git add gather-information.sh
git commit --amend

What does the git commit --amend do?
O Add an error log to the commit.
O Remove files from the staging area. 
O Change the commit message.
(•) Overwrite the previous commit.

Avoid amending commits that have already been made public.


208 Rollbacks5m
git revert
HEAD

def check_reboot():
  """Returns True if the computer has a pending reboot."""	
  return os.path.exists("/run/reboot-required")

def main():
  if check reboot():
    print("Pending Reboot.") 
	sys.exit (1)
    print("Everything ok.") 
	sys.exit(0)
	
main()

atom all_checks.py
git commit -a -m 'Add call to disk_full function'

git revert HEAD

git log -p -2

Question
Which of the following is true about the git revert command?
O It undoes a commit as though it never happened.
(.)It creates a new commit with inverse changes.
O The output of git revert is not the same as a regular commit. 
O It does not include the ID of the commit that was reverted.

Awesome! With sit revert, a new commit is created with inverse changes. This cancels previous changes instead of making it as though the original commit never happened.

209 Identifying a Commit6m
git log -1
Hash
SHA1
"You can verify the data you get back out is the exact same data you put in."
Linus Torvalds

git log -2
git show
git show 30e70712882267ca2dd749acfa02ea3aacfd0b24|
git show 30e70
git revert 30e70

Which of the following is NOT true about the SHA1 hash numbers that Git uses to identify commits?
O They provide the consistency that is critical for distributed systems such as Git.
O They are created using the commit message, date, author, and the snapshot taken of the working tree.
(.) Git requires the entire hash ID to identify a commit.
O They are composed of 40 characters.

You nailed it! Git can identify a commit using the first few hash numbers as long as there is only one matching possibility.

210 What is a branch?3m
Branch
A pointer to a particular commit
The default branch that git creates for you when a new repository is initialized is called master.

211 Creating New Branches4m
We can use the git branch command to list, create, delete, and manipulate branches.
git branch
git branch new-feature 
git branch
git checkout

We use git checkout to check out the latest snapshot for both files and for branches.

We use git checkout to check out the latest snapshot for both files and for branches.

git checkout new-feature 
git branch
git checkout -b new branch
git checkout -b even-better-feature

git add free_memory.py
git commit -m 'Add an empty free_memory.py'
git log -2

#!/usr/bin/env python3

def main(): 
  pass

main ()

212 Working with Branches3m
$ cd checks
$ git status
$ Is -l
-rwxr-xr-x 1 user user 658 Jan 6 09:15 c usage.py -rw-r--r-- 1 user user 57 Jan 6 09:46 free_memory.py

git branch -d
$ git	branch
even-better-feature
* master 
new-feature

$ git branch -d new-feature
Deleted branch new-feature (was 7dldel9).
$ git branch
even-better-feature
* master

$ git branch -d even-better-feature
error: The branch 'even-better-feature' is not fully merged.
If you are sure you want to delete it, run 'git branch -D even-better-feature'

213 Merging2m
Merging
The term that Git uses for combining branched data and history together

git merge

git branch
git merge even-better-feature

Git uses two different algorithms to perform a merge: fast-forward and three-way merge.

214 Merge Conflicts6m
atom free_memory.py
free_memory.py git commit -a -m 'Print everything ok'

def main():
  """Checks if there's enough free memory in the computer."""
  
main()

def main():
  print("Everything is ok.")
  
main()

$ git commit -a -m 'Print everything ok'
$ git checkout master
$ git merge even-better-feature

Auto-merging free_memory.py

CONFLICT (content): Merge conflict in free_memory.py Automatic merge failed; fix conflicts and then commit the result.

def main():
<<<<<< HEAD

    """Checks if there's enough free memory in the computer"""
======
    print("Everything is ok.") »»»> even-better-feature
>>>>>> even-better-featur	
	
main()

def main():
use me =
    """Checks if there's enough free memory in the computer."""
    print("Everything is ok.")

main()

atom free_memory.py 
git add free_memory.py 
git status

git log --graph --oneline

It prevents loss of work if two lines overlap.

O It helps us understand which changes to keep. O It warns us of all potential problems.

O It tells us whether the commit is a merge
Correct

Nice job! If two lines have differences Git is unsure about, it's best we decide than risk losing work forever.

git merge --abort

215 Module 2 Wrap Up: Using Git Locally1m

216 Advanced Git Cheat Sheet10m
217 Git Revert Cheat Sheet10m
218 Git Branches and Merging Cheat Sheet10m
219 Practice Quiz: Advanced Git Interaction25m
220 Practice Quiz: Undoing Things25m
221 Practice Quiz: Branching & Merging25m

300 WEEK3 Working with Remotes In this module, you’ll be introduced to GitHub and learn how it works with Git. You’ll create new repositories and clone those repositories onto your computer. Next, we’ll explain what a remote repository is, how we can work with them, and how we can host them. You’ll get familiar with commands like modify, stage, and commit, which will be used for local changes, as well as the fetch command, which can pull any changes from remote repositories. Our final lesson will focus on learning about conflicts. This will allow you to explore the concepts of pull-merge-push workflows, pushing remote branches and rebasing your changes.
301 SHOW ALL SYLLABUSSHOW ALL
302 Intro to Module 3: Working with Remotes2m

303 What is GitHub?2m
Distributed
Each developer has a copy of the whole repository on their local machine
Remote
GitHub
Clone

BitBucket
GitLab

For real configuration and development work, you should use a secure and private Git server, and limit the people authorized to work on it.

https://github.com

304 Basic Interaction with GitHub6m
redquinoa
health-checks
Scripts that check the health of my computers
git clone
git clone https://github.com/redquinoa/health-checks.gitl
Markdown
README.md
# health-checks
Scripts that check the health of my computers
This repo will be populated with lots of fancy checks.
git commit -a -m "Add one more line to README.md"
git push
SSH key-pair
Credential helper
git config --global credential.helper cache
git pull

305 What is a remote?4m
Remote repository
modify
stage
commit
fetch
merge
push

What will happen if the master repository receives a major update since the last local copy was synced?

O Git will push your local copy.

O Nothing will happen.

Git will let you know it's time for an update.

O Git will automatically merge the local copy with the master.
Correct

Great job! If there are pending changes in the master branch, Git will let you know.

306 Working with Remotes3m
git clone
origin
git remote -v
git remote show origin
Remote branches
git branch -r
If we want to make a change to a remote branch, what must we do?

O Directly make the change O Use the git branch -r command

Pull the remote branch, merge it with the local branch, then push it back to its origin. O Use the git remote -v command
Correct

Excellent! We still have to go through the normal workflow to change remote branches.

git status

307 Fetching New Changes3m
git remote show origin
git fetch
git checkout
git log
git log origin/master
git status
git merge origin/master
git log

What's the main difference between git fetch and git pull?

git fetch fetches remote updates but doesn't merge; git pull fetches remote updates O git pull fetches remote updates but doesn't merge, while git fetch does.

O git fetch clones the entire repository.

O git pull requires a password while git fetch doesn't.
Correct

Nice job! git pull instantly merges while git fetch only retrieves remote updates.

308 Updating the Local Repository3m
git pull
git log -p -1
git remote show origin
git checkout experimental

Assuming no merge conflicts, which type of merge does git pull perform automatically?

O Three-way merge O Explicit merge

Fast-forward merge O Half-merge
Correct

Awesome! As long as there are no conflicts, Git will move the current branch tip up to the target branch tip and combine histories of both commits.

309 The Pull-Merge-Push Workflow7m
git push
git add -p
git commit -m 'Rename min_absolute to min_gb, use parameter names'
git push
git pull
git log --graph --oneline --all
Three-way merge
git log -p origin/master
git add all_checks.py 
git commit
git push
git log --graph --oneline

What should you do with the <«««, =======, and »»»> conflict markers when resolving a merge

conflict?

Remove all of the conflict markers and only leave the code as it should be after the merge.

O Leave the conflict markers surrounding the code that you want to keep.

Remove the «««< and »»»> markers, and put the ======= marker in front of the lines that you

want to keep.

O Do nothing.
Correct

Awesome! Conflict markers aren't required when resolving a merge conflict.

310 Pushing Remote Branches8m
git checkout -b
git checkout -b refactor
git commit -a -m 'Create wrapper function for check_disk_full'

How do you switch to a new local branch?
git checkout -b <branch name> O git branch b O git pull origin branch O git merge branch
Correct

Great job! The command git checkout -b <branch name> will first create a new branch and then switch to it.

git push -u origin refactor

311 Rebasing Your Changes4m
What does "git rebase refactor" do?
Move the current branch on top of the refactor branch O Move the refactor branch on top of the current branch O Move the refactor branch on top of the master branch O Move the master branch on top of the refactor branch

Correct

Nailed it! This makes debugging easier and prevents three-way merges by transferring the completed work from one branch to another.

git log --graph --oneline --all
git checkout refactor
git rebase master
git log --graph --oneline
git checkout master
git merge refactor
git push --delete origin refactor
git branch -d refactor
git push

312 Another Rebasing Example8m
git rebase

def check no network():
  """Returns True if it fails to resolve Google's URL False otherwise""" 
  try:
    socket.gethostbyname("www.google.com") 
	return False 
  except:
    return True

atom all_checks.py
git commit -a -m'Add a simple network connectivity check'

git fetch
git rebase
origin/master
git rebase origin/master
git add health_checks.py 
git rebase --continue
git log --graph --oneline
git push
fetch
rebase
push

Generally, git rebase is an alternative to which command?
O git fetch 
(.)git merge
O git push
O git pull
Correct
Awesome! Rebasing instead of merging rewrites history and maintains linearity, making for cleaner code.

313 Best Practices for Collaboration4m
Always synchronize your branches before starting any work on your own.
Avoid having very large changes that modify lot of different things.
When working on a big change, it makes to have a separate feature branch.
Regularly merge changes made on the master branch back onto the feature branch.
Have the latest version of the project in the master branch, and the stable version of the project on a separate branch.
You shouldn't rebase changes that have been pushed to remote repos.

Which of the following statements is true regarding best practices for collaboration?
O Keep the stable version of the project in the master branch, and the latest version on a separate branch.
O Try to fit all changes into one large change.
O You should always rebase changes that have been pushed to a remote repo.
(.)Always synchronize your branches before starting any work on your own.
Excellent! This way, when you start changing code, you're starting from the most recent version, minimizing chances of conflicts or the need for rebasing.

Having good commit messages is important.


314 Module 3 Wrap Up: Working with Remotes1m
315 Basic Interaction with GitHub Cheat-Sheet10m
316 Git Remotes Cheat-Sheet10m
317 Conflict Resolution Cheat Sheet10m
318 Practice Quiz: Introduction to GitHub25m
319 Practice Quiz: Using a Remote Repository25m
320 Practice Quiz: Solving Conflicts25m

400 WEEK 4 Collaboration In this module, you’ll continue to explore the collaboration tools available in Git. You’ll learn about the tools that are available to help improve the quality of your code and to better track your code. This includes an overview of pull requests and how the typical workflow of a pull request looks like on GitHub. Next, you’ll dive into how you can squash changes in your code. We’ll finish up by providing you with a cheat sheet on fork and pull requests. Next up, we’ll cover what code reviews are and what the code review workflow looks like. Then, you’ll learn about how to use code reviews on GitHub. The final lesson of this module will focus on managing projects. We’ll take a rundown of best practices on managing projects and how to manage collaboration within those projects. We’ll explore different ways of tracking issues and finish up by discussing the concept of continuous integration with your projects.
401 Intro to Module 4: Collaboration2m
Open source

402 A Simple Pull Request on GitHub5m
blue-kale / validations
You’re editing a file in a project you don't have write access to. We've created a fork of this project for you
pull request

Forking
A way of creating a copy of the given repository so that it belongs to our user

Pull request
A commit or series of commits that you the owner of the repository so that they incorporate it into their tree

403 The Typical Pull Request Workflow on GitHub7m
git clone https://github.com/redquinoa/rearrange.git
cd rearrange
git log
qit checkout -b add-readme
Markdown
atom README.md 
git add README.md
git commit -m 'Add a simple README.md file'
git push -u origin add-readme

404 Updating an Existing Pull Request4m
Rearrange
This module is used for rearranging names.
Turns "LastName, FirstName" into "FirstName LastName"
# Example
Calling 'rearrange name("Turing, Alan")' will return '"Alan Turing"

atom README.md
git commit -a -m 'Add more information to the README' 
git push

405 Squashing Changes6m
rebase -i
git rebase -i master
pick

pick 736d754 Add a simple README.md file 
pick 01231b0 Add more information to the README

pick 736d754 Add a simple README.md file 
squash 01231b0 Add more information to the README

git show
git status

git log --graph --oneline --all -4
git push
git push -f

406 What are code reviews?4m
Code review
Going through someone else's code, documentation, or configuration and checking that it all makes sense and follows the expected patterns

Code review
Going through someone else's code, documentation, or configuration and checking that it all makes sense and follows the expected patterns

407 The Code Review Workflow3m
Nit
PEP8
+1

408 How to Use Code Reviews in GitHub5m
atom README.md
git commit -a --amend
git status
Fixup
git push -f

409 Managing Collaboration4m
If you're a project maintained it's important that you reply promptly to pull requests and don't let them stagnate.

It's important that you understand any changes you accept.

When it comes to coordinating who does what and when, a common strategy for active software projects is to use an issue tracker.





410 Tracking Issues8m
411 Continuous Integration5m
412 Module 4 Wrap Up: Collaboration1m
413 Congratulations!1m
414 Sneak Peek of the Next Course1m
415 Git Fork and Pull Request Cheat Sheet10m
416 More Information on Code Reviews10m
417 Additional Tools10m
418 Practice Quiz: Pull Requests25m
419 Practice Quiz: Code Reviews25m
420 Practice Quiz: Managing Collaboration25m
 