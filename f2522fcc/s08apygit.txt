
100 WEEK 1 Introduction to Version Control 
In this module, you'll be introduced to the concept of version control, which will make managing and rolling back your code look super easy. You’ll learn how to differentiate between files and the tools at your disposal to make this happen. Next, you'll be introduced to Git and how you can leverage that platform to improve your coding abilities. Once you’ve got a grasp on what Git is, you’ll install it and start using it to create and clone code repositories. Last up, you’ll deep dive into Git in order to get more familiar with the different tools and commands it has to offer.
101 SHOW ALL SYLLABUSSHOW ALL
102 Course Introduction5m
Version Control Systems (VCS)

103 Intro to Module 1: Version Control3m
diff patch

104 Keeping Historical Copies2m

105 Diffing Files4m
diff

$ cat rearrange1.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .]*), ([\w .]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ cat rearrange2.py

#!/usr/bin/env python3

import re

def rearrange_name(name):
  result = re.search(r"^([\w .-]*), ([\w .-]*)$", name)
  if result == None:
    return result
  return "{} {}".format(result[2], result[1])

$ diff rearrange1.py rearrange2.py
6c6
<  re.search(r"^([\w .]*), ([\w .]*)$", name)
---
>  re.search(r"^([\w .-]*), ([\w .-]*)$", name)

$ diff -u validations1.py validations2.py

wdiff
meld
KDiff3
vimdiff

106 Applying Changes5m
diff -u oldfile newfile > change.diff

diff file
patch file

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent() return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

$ cat cpu_usage.diff

patch
<

user@ubuntu: $ patch cpu_usage.py < cpu_usage.diff
patching file cpu_usage.py

$ cat cpu_usage.py 

#!/usr/bin/env python3 
import psutil

def check_cpu_usage(percent):  
  usage = psutil.cpu_percent(1) return usage < percent
  if not check_cpu_usage(75):
    print("ERROR! CPU is overloaded") 
  else:
    print("Everything ok")

107 Practical Application of diff and patch5m
cp disk_usage.py disk_usage_original.py 
cp disk_usage.py disk_usage_fixed.py

#!/usr/bin/env python3
import shutil

def check_disk_usage(disk, min_absolute, min_percent):
  """Returns True if there is enough free disk space, false otherwise.""" 
  du = shutil.disk usage(disk)

  # Calculate the percentage of free space 
  percent_free = 100 * du.free / du.total

  # Calculate how many free gigabytes 
  gigabytes_free = du.free / 2**30
  if percentfree < min percent or gigabytes_free < minabsolute: 
    return False return True
	
# Check for at least 2 GB and 10% free 
if not check_disk_usage('/", 2*2**30, 10):   
  print("ERROR: Not enough disk space") return 1

print("Everything ok") return 0

sys.exit

patch disk_usage.py < disk_usage.diff

108 What is version control?3m
Version Control System (VCS)
Keeps track of the changes we make to our files

We can make edits to multiple files and treat that collection of edits as a single change, which is commonly known as a commit.

Repositories

109 Version Control and Automation4m

110 What is Git?3m
git-scm.com
Source Control Management

Subversion
Mercurial

111 Installing Git3m
git --version

If you’re running a version number higher than 2.20, then you can just use that one.
If you get an error message, or an older version number, you'll need to install a current version.

apt
yum
Chocolatey
Homebrew

apt install git
yum install git

Notepad++
Atom

MinGW64

Integrated Developer Environments
IDEs

112 Installing Git on Windows (Optional)7m
113 First Steps with Git4m
git init
git clone

git config --global user.email "me@example.com" 
git config --global user.name "My name"

mkdir checks 
cd checks
$ git init

ls -la

Is -l .git/

Staging area (index)

A file maintained by Git that contains all of the information about what files and changes are going to go into your next commit

git status

git commit

114 Tracking Files5m




115 The Basic Git Workflow6m
116 Anatomy of a Commit Message4m
117 Module 1 Wrap Up: Intro to Version Control2m
118 Welcome to the Course10m
119 diff and patch Cheat Sheet10m
120 More Information About Git10m
121 Installing Git10m
122 Initial Git Cheat Sheet10m
123 How to Log in to Qwiklabs10m
124 Practice Quiz: Before Version Control25m
125 Practice Quiz: Version Control Systems25m
126 Practice Quiz: Using Git25m

200 WEEK2 Using Git Locally In this module, you’ll dive into advanced Git interactions by skipping the staging area for small code changes, and understand how Git uses the HEAD alias to represent checked-out snapshots. Next, you’ll explore how to move and remove files before finally getting a cheat sheet to help you in your Git explorations! The next step of your learning will include how to undo changes before committing and how to amend commits once they’re submitted. Finally, you’ll be able to identify errors in commits that were submitted a while back. In the final section of this module, you’ll explore the concept of branching and merging. You’ll learn what a branch is, how to create one, and how they work in harmony with you and your code. Once you’re comfortable with branching, you’ll dive into merging, how it works with branched data, and how to deal with merge conflicts.
201 SHOW ALL SYLLABUSSHOW ALL
202 Intro to Module 2: Using Git Locally1m
203 Skipping the Staging Area4m
204 Getting More Information About Our Changes6m
205 Deleting and Renaming Files4m
206 Undoing Changes Before Committing5m
207 Amending Commits4m
208 Rollbacks5m
209 Identifying a Commit6m
210 What is a branch?3m
211 Creating New Branches4m
212 Working with Branches3m
213 Merging2m
214 Merge Conflicts6m
215 Module 2 Wrap Up: Using Git Locally1m
216 Advanced Git Cheat Sheet10m
217 Git Revert Cheat Sheet10m
218 Git Branches and Merging Cheat Sheet10m
219 Practice Quiz: Advanced Git Interaction25m
220 Practice Quiz: Undoing Things25m
221 Practice Quiz: Branching & Merging25m

300 WEEK3 Working with Remotes In this module, you’ll be introduced to GitHub and learn how it works with Git. You’ll create new repositories and clone those repositories onto your computer. Next, we’ll explain what a remote repository is, how we can work with them, and how we can host them. You’ll get familiar with commands like modify, stage, and commit, which will be used for local changes, as well as the fetch command, which can pull any changes from remote repositories. Our final lesson will focus on learning about conflicts. This will allow you to explore the concepts of pull-merge-push workflows, pushing remote branches and rebasing your changes.
301 SHOW ALL SYLLABUSSHOW ALL
302 Intro to Module 3: Working with Remotes2m
303 What is GitHub?2m
304 Basic Interaction with GitHub6m
305 What is a remote?4m
306 Working with Remotes3m
307 Fetching New Changes3m
308 Updating the Local Repository3m
309 The Pull-Merge-Push Workflow7m
310 Pushing Remote Branches8m
311 Rebasing Your Changes4m
312 Another Rebasing Example8m
313 Best Practices for Collaboration4m
314 Module 3 Wrap Up: Working with Remotes1m
315 Basic Interaction with GitHub Cheat-Sheet10m
316 Git Remotes Cheat-Sheet10m
317 Conflict Resolution Cheat Sheet10m
318 Practice Quiz: Introduction to GitHub25m
319 Practice Quiz: Using a Remote Repository25m
320 Practice Quiz: Solving Conflicts25m

400 WEEK 4 Collaboration In this module, you’ll continue to explore the collaboration tools available in Git. You’ll learn about the tools that are available to help improve the quality of your code and to better track your code. This includes an overview of pull requests and how the typical workflow of a pull request looks like on GitHub. Next, you’ll dive into how you can squash changes in your code. We’ll finish up by providing you with a cheat sheet on fork and pull requests. Next up, we’ll cover what code reviews are and what the code review workflow looks like. Then, you’ll learn about how to use code reviews on GitHub. The final lesson of this module will focus on managing projects. We’ll take a rundown of best practices on managing projects and how to manage collaboration within those projects. We’ll explore different ways of tracking issues and finish up by discussing the concept of continuous integration with your projects.
401 Intro to Module 4: Collaboration2m
402 A Simple Pull Request on GitHub5m
403 The Typical Pull Request Workflow on GitHub7m
404 Updating an Existing Pull Request4m
405 Squashing Changes6m
406 What are code reviews?4m
407 The Code Review Workflow3m
408 How to Use Code Reviews in GitHub5m
409 Managing Collaboration4m
410 Tracking Issues8m
411 Continuous Integration5m
412 Module 4 Wrap Up: Collaboration1m
413 Congratulations!1m
414 Sneak Peek of the Next Course1m
415 Git Fork and Pull Request Cheat Sheet10m
416 More Information on Code Reviews10m
417 Additional Tools10m
418 Practice Quiz: Pull Requests25m
419 Practice Quiz: Code Reviews25m
420 Practice Quiz: Managing Collaboration25m
 