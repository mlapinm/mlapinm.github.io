100 WEEK 1 Введение в Python На первой неделе вы познакомитесь с языком, основными конструкциями и базовыми типами. Настроите окружение для работы и выберете среду разработки.
101 Приветствие1m
102 МФТИ1m
103 О языке3m
Гвидо ван Россум
1991 Python
Летающий цирк Монти Пайтона
Python 3.6
C Python
CPython IronPython PyPy
https://github.com/python/cpython
https://www.python.org/doc/

104 Начинаем программировать8m
~: python3
Python 3.6.0 (default, Dec 24 2016, 08:01:42)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin Type "help", "copyright", "credits" or "license" for more information.
>>
>> 1 + 1
2
>> 1 / 2
0.5
>> print ("hello") hello
>> help(print)|
>> exit ()|
vim example.руП
vim example.py python3 example.py
name = "Alex
lname = 1
snake_case = "Ш"
for i in range(4): print(i)
# Comment print( 'hello' )
""""""
Многострочный комментарий
# Comment
print.___doc

105 Базовые типы: численные типы11m
Целые числа (int)
num = 13 print(num)
num = 0 print(num)
num = -10 print(num)
13
0 -10
num = 100_000_000 print(num)
100000000
Встроенная функция type
num = 13
print(type(num))
<class 'int’>
num = 100_000.000_001
print(num)
100000.000001
#1.5 умножить на 10 в степени 2
num = 1.5е2
print(num)
150.0
Конвертация типов:
num = 150.2
print(type(num))
<class 'float'>
num = int(num)
print(num, type(num))
num = float(num) print(num, type(num))
150 <class 'int'>
150.0 <class 'float'>
Комплексные числа (complex)
num = 14 + lj
print(type(num)) print(num.real) print(num.imag)
<class 'complex'> 14.0
1.0
Модуль decimal для работы с вещественными числами с фиксированной точностью
Модуль fractions для работы с рациональными числами
Целочисленное деление:
10 // 3
Остаток от деления:
10 % 3
Question
Что выведет следующее выражение: 100 / (100 % 1)
O -0
(•) Исключение ZeroDivisionError
О 10
x1, y1 = 0, 0
Но нужно помнить об отличии изменяемых (mutable) и неизменяемых (immutable) типов:
X = у = [ ] х.append(1) х.append(2)
* print(x) print(y)
[1, 2] [1/ 2]
Поговорили о базовых численных типах в Python Рассмотрели математические операции с численными типами
Узнали о конвертации типов
Затронули тему изменяемых и неизменяемых объектов в Python

106 Базовые типы: логический тип7m
1 != 2
True
х = 2
print(1 < x < 3)
True
х = 12
у = False
print(х or у)
12
х = 12
z = "boom"
print(x and z
boom
Задача: определить високосный год или нет?
Год является високосным если он кратен 4, но при этом не кратен 100, либо кратен 400.
year = 2017
is_leap = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) print(is_leap)
False
import calendar
print(calendar.isleap(1980))
True
Поговорили о типе bool в Python
Рассмотрели логические операторы
Посмотрели на составные логические выражения

107 Базовые типы: строки и байтовые строки20m
example_string = "Курс про \"Python\" на \"Coursera\"" print(example_string)
Курс про "Python" на "Coursera"
"Сырые" (r-строки):
example_string = "Файл на диске с:\\\\" print(example_string)
example_string = г"Файл на диске с:\\" print(example_string)
Файл на диске с:\\
Файл на диске с:\\
Как разбить объявление длинной строки:
example_string = "Perl - это тот язык, который одинаково " \ "выглядит как до, так и после rsa шифрования. "(Keith Bostic)"
print(example_string)
Perl — это тот язык, который одинаково выглядит как до, так и п осле RSA шифрования. (Keith Bostic)
Как объединить 2 строки в одну?
"Можно просто " + "складывать строки"
'Можно просто складывать строки'
"Даже умножаты" * 3
'Даже умножать!Даже умножать!Даже умножать! '
Строки неизменяемые!
example_string = "Привет" print(id(example_string)) example_string += ", Мир!" print(id(example_string))
4472087304
4471975632
Срезы строк [start:stop:step]
example_string = "Курс про Python на Coursera" example_string[9 : ]
'Python на Coursera'
У строк есть методы:
quote = """Болтовня ничего не стоит. Покажите мне код.
Linus Torvalds
II II II
quote.count("О")
6
"москва".capitalize()
' Москва'
"2017".isdigit()
True
Оператор in позволяет проверить наличие подстроки в строке:
"3.14" in "ЧИСЛО Пи = 3.1415926
True
"Алексей" in "Александр Пушкин"
False
example_string = "Привет" for letter in example_string:
print("Буква", letter)
Конвертация типов:
num_string = str(999.01) print(type(num_string)) num_string
<class 'str'>
' 999.01'
bool (" Непустая строка")
True
bool("")
False
Форматирование строк
1-ый способ форматирования:
template = "%s — главное достоинство программиста. (%s)" template % ("Лень", "Larry Wall")
'Лень — главное достоинство программиста. (Larry wall)'
https://docs.python.org/3/library/string.html#format-specification-mini-language
2-ой способ:
"{} не лгут, но {} пользуются формулами. ({})".format( "Цифры", "лжецы", "Robert A. Heinlein"
)
'Цифры не лгут, но лжецы пользуются формулами. (Robert A. Hei nlein)'
Еще способ:
"{num} Кб должно хватить для любых задач. ({author})". format ( num=640, author="Bill Gates"
)
'640 Кб должно хватить для любых задач. (Bill Gates)'
И еще f-строки, Python >= 3.6:
subject = "оптимизация" author = "Donald Knuth"
f"Преждевременная {subject} - корень всех зол. ({author})"
'Преждевременная оптимизация — корень всех зол. (Donald Knut h)'
Модификаторы форматирования:
num = 8
f"Binary: {num:#b}"
'Binary: 0Ы000'
num =2/3 print(num)
print(f"{num:.3f}")
0.6666666666666666
0.667
Больше описания и примеров в документации:
https://docs.python.Org/3/library/string.html
Встроенная функция input()
Позволяет получить ввод пользователя в виде строки
name = input("Введи свое имя: ")
f" Привет, {name}!"
Введи свое имя: Александр
'Привет, Александр!'
Байтовые строки (bytes)
b-литерал для объявления байтовой строки:
example_bytes = b"hello" print(type(example_bytes))
<class 'bytes'>
for element in example_bytes: print(element)
104
101
108
108
111
encoded_string = example_string.encode(encoding="utf-8") print(encoded_string)
print(type(encoded_string))
b1\xd0\xbf\xdl\x80\xd0\xb8\xd0\xb2\xd0\xb5\xdl\x82'
<class 'bytes'>
Буква	Кодировка	hex	dec (bytes)	dec	binary
п	UTF-8	DO BF	208 191	53439	11010000 10111111
Декодируем байты обратно в строку:
decoded_string = encoded_string.decode() print(decoded_string)
привет

108 Базовые типы: объект None4m
109 Конструкции управления потоком9m
110 Пример на управление потоком7m
111 Модули и пакеты18m
112 Виртуальное окружение (Virtualenv). Установка и запуск Jupyter Notebook9m
113 Пример. Пишем программу5m
114 Объектная структура в Python5m
115 Байткод6m
116 Заключительное видео первой недели42s
117 Прежде чем начать10m
118 МФТИ10m
119 Mail.Ru Group5m
120 Фонд развития онлайн-образования5m
121 Установка Python 310m
122 Работа в терминале/командной строке10m
123 Выбор среды разработки (IDE)10m
124 Дополнительные материалы к лекции10m
125 Полезные ссылки10m
126 Слайды10m
127 Виртуальное окружение на Windows10m
128 Слайды10m
129 Решение задания про сумму цифр в строке10m
130 Решение задания про рисование лестницы10m
131 Решение задания про корни квадратного уравнения10m
132 Слайды10m
133 Конспект по Неделе 110m
134 Тест на типы и конструкции30m
135 Тест по неделе30m

200 WEEK 2 Структуры данных и функции. В этой неделе вы узнаете про новые типы данных — коллекции, познакомитесь с функциями, а так же научитесь использовать функциональное программирование в Python.
201 Списки и кортежи8m
202 Списки. Пример программы4m
203 Словари4m
204 Словари. Пример программы6m
205 Множества3m
206 Множества. Пример программы2m
207 Функции9m
208 Файлы4m
209 Функциональное программирование15m
210 Декораторы15m
211 Генераторы6m
212 Заключительное видео второй недели21s
213 Документация10m
214 Слайды10m
215 Документация10m
216 Слайды10m
217 Key-value хранилище10m
218 Декоратор to_json10m
219 Конспект по Неделе 210m
220 Тест по коллекциям30m
Question 1
Выберите верные утверждения про списки:
v проверка на вхождение элемента в список происходит за линейное время
проверка на вхождение элемента в список происходит за константное время
v списки изменяемые
списки неизменяемые
v списки могут содержать элементы различных типов
Question 2
К чему приведет обращение к непустому списку по индексу «-1»?
Вернется первый элемент
v Вернется последний элемент
Ошибка KeyError
Ошибка IndexError
Question 3
Выберите верные утверждения про словари:
словари неизменяемые
v поиск ключа в словаре происходит за константное время
поиск ключа в словаре происходит за линейное время
v словари изменяемые
Question 4
Можно ли изменять список, находящийся внутри кортежа?
Нет
v Да
Question 5
В чем отличие стандартного метода списка sort и встроенное функции sorted?
Функции sorted не существует
v Sort сортирует исходный список, а sorted возвращает новый
Sorted сортирует исходный список, а sort возвращает новый
Отличий нет

221 Тест по функциям30m
Question 1
Что по умолчанию возвращает функция, где не определен return?
В каждой функции необходимо использовать оператор return
v None
Question 2
Как оформляется тело функции в Python?
v Отступом
Фигурными скобками
Операторами BEGIN-END
Квадратными скобками
Question 3
def foo(*args, **kwargs): pass 
Что произойдет при вызове функции foo?
Все именованные аргументы запишутся в кортеж kwargs
v Все именованные аргументы запишутся в словарь kwargs
Синтаксическая ошибка
v Все позиционные аргументы запишутся в кортеж args
Question 4
В каком случае можно вызвать функцию без параметров?
v Если она не ожидает аргументов
Если используются *args, **kwargs
v У каждой функции должны быть параметры, в этом суть функций
v Если у всех аргументов есть значения по умолчанию

222 Тест по неделе30m
Question 1
Можно ли использовать изменяемые объекты в качестве значений по умолчанию в функциях?
Нет, случится синтаксическая ошибка
v Да, но это может привести к неочевидным ошибкам
Question 2
Выберите верные утверждения про кортежи:
кортежи изменяемые
проверка на вхождение элемента в кортеж происходит за константное время
v кортежи неизменяемые
v кортежи могут содержать элементы различных типов
v проверка на вхождение элемента в кортеж происходит за линейное время
Question 3
Какой записи эквивалентно применение декоратора?
@login_required
def send_feedback(request)
login_required = send_feedback(login_required)
def login_required(send_feedback)(request)
def login_required(send_feedback)
v send_feedback = login_required(send_feedback)
Question 4
Для чего используются декораторы?
v Для модификации поведения функций
Чтобы иметь возможность импортировать функцию в другой модуль
Для эффективного использования памяти при итерации
Question 5
Выберите верные утверждения про множества:
v проверка на вхождение элемента в множество происходит за константное время
v множества изменяемые
множества неизменяемые
проверка на вхождение элемента в множество происходит за линейное время
Question 6
Что происходит при итерации по генератору?
Итерация происходит по списку значений, который вернул генератор при вызове
v Каждую итерацию вызывается функция next, и исполнение генератора возобновляется с момента после yield
Каждую итерацию вызывается функция next, и генератор исполняется с начала

300 WEEK 3 Объектно-ориентированное программирование. В третьей неделе вас ждёт погружение в мир объектно-ориентированного программирования на Python. Вы научитесь создавать свои классы, применять наследование и обрабатывать исключения в программах.
301 Вступительное видео к третьей неделе50s
302 Классы и экземпляры. Часть 114m
303 Классы и экземпляры. Часть 210m
304 Методы. Часть 111m
305 Методы. Часть 28m
306 Пример на классы18m
307 Наследование в Python15m
308 Композиция классов, пример16m
309 Классы исключений и их обработка15m
310 Генерация исключений10m
311 Исключения в requests, пример10m
312 Заключительное видео 3 недели44s
313 Документация10m
314 Слайды10m
315 Документация10m
316 Документация10m
317 Слайды10m
318 Решение задания про класс для чтения из файла10m
319 Решение задания про классы и наследование10m
car_type;brand;passenger_seats_count;photo_file_name;body_whl;carrying;extra

Total tests: 166. Tests failed: 63, Errors: 0. Total time: 0.326.
Failed test - test_3.
 E   AssertionError: Тест 3. В классе CarBase отсутствует реализация метода get_photo_file_ext.
    assert False
     +  where False = hasattr(CarBase, 'get_photo_file_ext')
---
Total tests: 166. Tests failed: 47, Errors: 0. Total time: 0.334.
Failed test - test_5[carrying-Nissan-f1.jpg-1-5].
 E   AssertionError: Тест 5.2. Атрибут carrying экземпляра класса Car должен возвращать объект типа: float.
    assert False
     +  where False = isinstance('1', <class 'float'>)
     +    where '1' = getattr(<solution.Car object at 0x7f449159ad68>, 'carrying')
---
Total tests: 166. Tests failed: 15, Errors: 0. Total time: 0.282.
Failed test - test_10[Nissan-t1.jpg-2.5-2.4x2.3x2].
 E   AssertionError: Тест 10.5. Неверная инициализация атрибута body_width при создании экземпляра класса Truck c параметрами ('Nissan', 't1.jpg', '2.5', '2.4x2.3x2'). Установлено значение: 2.4, ожидалось: 2.3.
    assert 2.4 == 2.3
     +  where 2.4 = <solution.Truck object at 0x7fe92c6c4668>.body_width
	 
8x3x2.5	 
---
Total tests: 166. Tests failed: 10, Errors: 0. Total time: 0.276.
Failed test - test_10_1[].
 E   AssertionError: Тест 10.1.2. Атрибут body_width экземпляра класса Truck должны иметь тип float. При создании экземпляра передан невалидный body_whl: "".
    assert False
     +  where False = isinstance(None, <class 'float'>)
     +    where None = <solution.Truck object at 0x7f267fd01048>.body_width	 
---
Total tests: 166. Tests failed: 4, Errors: 0. Total time: 0.289.
Failed test - test_10_1[3x4x5x6].
 E   AssertionError: Тест 10.1.5. Неверная инициализация атрибута body_width при создании экземпляра класса Truck. Установлено значение: 4.0, ожидалось: 0.0. При создании экземпляра передан невалидный body_whl: 3x4x5x6.
    assert 4.0 == 0.0
     +  where 4.0 = <solution.Truck object at 0x7f6ada6612b0>.body_width
---
Total tests: 166. Tests failed: 2, Errors: 0. Total time: 0.272.
Failed test - test_19[0x0x0-0.0].
 E   AssertionError: Тест 19.2. Вызов метода get_body_volume у экземпляра класса Truck, созданного с параметрами ('Nissan', '1.jpg', '2.5', '0x0x0'), возвращает результат типа: <class 'NoneType'>. Ожидалось: float.
    assert False
     +  where False = isinstance(None, float)
---
Total tests: 166. Tests failed: 1, Errors: 0. Total time: 0.282.
Failed test - test_25.
 E   AssertionError: Тест 25.2. Вызов функции get_car_list вернул список с неверным количеством объектов: 3, ожидалось: 9.
    assert 3 == 9
     +  where 3 = len([<solution.Car object at 0x7f1803aef7b8>, <solution.Car object at 0x7f1803aefe48>, <solution.Car object at 0x7f1803af5fd0>])	 
---	 
Total tests: 166. Tests failed: 3, Errors: 0. Total time: 0.306.
Failed test - test_21.
 E   ValueError: could not convert string to float:

During handling of the above exception, another exception occurred:
E   AssertionError: Тест 21.1. Вызов функции get_car_list на файле, содержащем только невалидные данные, вызывает исключение ValueError.
    assert False

320 Конспект по Неделе 310m
321 Тест по уроку30m
Question 1
Как узнать тип объекта obj?
isinstance(obj)
v type(obj)
Question 2
Отметить что является классом:
a1024
v int
v str
class
"1024"
Question 3
Куда записываются атрибуты объекта?
v obj.__dict__
obj.__class__
obj.__doc__
obj.__attrt__
Question 4
Когда вызывается метод __init__?
v При создании экземпляра
При объявлении класса
При обращении к методу экземпляра
Question 5
Экземпляры классов хешируются?
Нет
v Да
Question 6
Отметьте верные утверждения про classmethod
v Метод первым аргументом принимает класс
v К этому методу можно обращаться от экземпляра класса
v К этому методу можно обращаться от имени класса
Метод первым аргументом принимает ссылку на экземпляр класса
Метод не принимает дополнительных аргументов кроме указанных программистом
Question 7
Отметьте верные утверждения про staticmethod
v К этому методу можно обращаться от экземпляра класса
Метод первым аргументом принимает ссылку на экземпляр класса
v Метод не принимает дополнительных аргументов кроме указанных программистом
v К этому методу можно обращаться от имени класса
Метод первым аргументом принимает класс
Question 8
Для чего используются @property?
Чтобы делать атрибуты приватными
v Чтобы создать вычисляемый атрибут

322 Тест по уроку30m
Question 1
Наследование классов нужно:
v для изменения поведения класса
для создания экземпляров класса
для ограничения доступа к атрибутам класса предка
v для расширения функционала класса
Question 2
Выберите истинные утверждения
v Классы-примеси используются в множественном наследовании
v В Python разрешено множественное наследование
v Все классы в python унаследованы от класса object
v Для вызова нужного метода используется линеаризация класса
Question 3
Предположим есть базовый класс питомец - Pet и класс наследник - Dog. Отметьте все варианты вызова метода Pet.__init__ из инициализатора класса потомка.
super(Pet, self).__init__()
v super().__init__()
v super(Dog, self).__init__()
Question 4
Предположим есть базовый класс питомец - Pet и класс наследник - Dog. Отметьте варианты, которые вернут True
v issubclass(Dog, object)
v issubclass(Dog, Pet)
issubclass(Pet, Dog)
v issubclass(Pet, object)
Question 5
Предположим есть базовый класс питомец - Pet и класс наследник - Dog. Отметьте варианты, которые вернут True
v isinstance(Dog(), Dog)
v isinstance(Pet(), object)
isinstance(Dog, Dog)
v isinstance(Dog(), Pet)
isinstance(Pet(), Dog)

323 Тест по неделе30m
Question 1
Отметьте все исключения стандартной библиотеки Python
RequestException
v KeyboardInterrupt
v IndexError
v ValueError
Question 2
Какие из методов генерации исключения разрешены в Python?
raise None
v raise ValueError
v raise ValueError("error")
raise "ValueError"
Question 3
Обращение к несуществующему атрибуту экземпляра
вернет False
вернет None
сгенерирует исключение KeyError
v сгенерирует исключение AttributeError
Question 4
Отметьте верные утверждения про classmethod
v К этому методу можно обращаться от имени класса
v К этому методу можно обращаться от экземпляра класса
v Метод первым аргументом принимает класс
Метод не принимает дополнительных аргументов кроме указанных программистом
Метод первым аргументом принимает ссылку на экземпляр класса
Question 5
Отметьте верные утверждения про staticmethod
v К этому методу можно обращаться от имени класса
v Метод не принимает дополнительных аргументов кроме указанных программистом
Метод первым аргументом принимает класс
v К этому методу можно обращаться от экземпляра класса
Метод первым аргументом принимает ссылку на экземпляр класса
Question 6
Для чего используются @property?
Чтобы делать методы приватными
Чтобы делать атрибуты приватными
v Чтобы создать вычисляемый атрибут
Question 7
Если имя метода в классе начинается с символа нижнего подчеркивания, например: _get_name
если вызвать метод у экземпляра класса, то сгенерируется исключение AttributeError
символ нижнего подчеркивания в начале метода не добавляет никакого дополнительного значения
v обращаться к методу объекта не рекомендуется, так как метод не считается публичным API класса
Question 8
Можно ли использовать экземпляры классов в качестве ключей словаря (dict)?
Нет
v Да
Question 9
Можно ли передавать экземпляр класса как аргумент в функцию?
Нет
v Да
Question 10
Предположим есть базовый класс питомец - Pet и класс наследник - Cat. Отметьте варианты, которые вернут True
issubclass(Pet, Cat)
v issubclass(Cat, object)
v isinstance(Cat(), Cat)
v issubclass(Cat, Pet)
v isinstance(Cat(), Pet)

400 WEEK 4 Углубленный Python. В этой неделе мы более подробно познакомимся с тем, как работают классы в Python. Узнаем, как создавать свои классы, которые поддерживают стандартные протоколы и методы. Научимся отлаживать и тестировать свои программы.
401 Магические методы10m
402 Итераторы2m
403 Контекстные менеджеры8m
404 Дескрипторы10m
405 Метаклассы6m
406 Отладка8m
407 Тестирование8m
408 Заключительное видео четвёртой недели27s
409 Документация10m
410 Слайды10m
411 Файл с магическими методами10m
412 Документация10m
413 Слайды10m
414 Дескриптор с комиссией10m
415 Документация10m
416 Слайды10m
417 Конспект по Неделе 410m
418 Тест по уроку30m
419 Тест по неделе30m

500 WEEK 5 Многопоточное и асинхронное программирование. Пятая неделя посвящена одной из самых актуальных тем современного мира разработки — асинхронному и многопоточному программированию. Вы узнаете про процессы и потоки, а также научитесь писать асинхронный код с помощью asyncio.
501 Вступительное видео пятой недели1m
502 Процесс и его характеристики9m
503 Создание процессов10m
504 Создание потоков5m
505 Синхронизация потоков8m
506 Глобальная блокировка интерпретатора6m
507 Сокеты, клиент-сервер14m
508 Таймауты и обработка сетевых ошибок7m
509 Обработка нескольких соединений9m
510 Исполнение кода в одном потоке, модуль select13m
511 Итераторы и генераторы, в чём разница?9m
512 Генераторы и сопрограммы13m
513 Первые шаги с asyncio13m
514 Работа с asyncio15m
515 Документация10m
516 Слайды10m
517 Документация10m
518 Слайды10m
519 Документация10m
520 Слайды10m
521 Клиент для отправки метрик10m
522 Конспект по Неделе 510m
523 Процессы и потоки30m
524 Работа с сетью, сокеты30m
525 Тест по неделе30m

600 WEEK 6 Финальный проект. 
На последней неделе курса вам предстоит реализовать полноценное серверное приложение для получения метрик от множества клиентов.
601 Сервер для приема метрик10m
602 Продолжение курса2m

