100 WEEK 1 Troubleshooting Concepts 
In this module, you'l be introduced to the fundamentals of troubleshooting and you'l learn different strategies and approaches to tackle problems that you might encounter. You'l learn about the concept of debugging and how debugging is one of the core principles of troubleshooting. You'l be introduced to some tools that will help you in the debugging process, like tcpdump, ps, top, itrace, and lots more. Next, you'l explore how to understand the problem.・This might sound like a no brainer, but it's not as easy as you might think! Next, we'l dive into the different approaches when troubleshooting reproducing errors versus intermittent errors. Finally, you'l learn about binary searching a problem.・We'l explore the different types of searches, including binary and linear searches. Then, we'l learn about the concept of bisecting and how it can be used in your troubleshooting approach, and finish up with finding invalid data in a CSV file.
101 SHOW ALL SYLLABUSSHOW ALL
102 Course Introduction4m
Amanda
Security SystemslAdministra

103 Intro to Module 1: Troubleshooting Concepts2m
Binary search

104 What is debugging?4m
Debugging
Troubleshooting
Troubleshooting
The process of identifying, analyzing, and solving problems

Debugging
The process of identifying, analyzing, and removing bugs in a system

tcpdump
Wireshark

ps, top, free
strace
ltrace

Debuggers
Let us follow the code line by line, inspect changes in variable assignments, interrupt the program when a specific condition is met, and more

What is the general description of debugging?
(.) Fixing bugs in the code of the application 
O Fixing problems in the system running the application 
O Fixing issues related to hardware 
O Fixing configuration issues in the software

Correct

Awesome! Generally, debugging means fixing bugs in the code of the application.

105 Problem Solving Steps4m
Reproduction case
A clear description of how and when the problem appears

-1.	Getting information
-2.	Finding the root cause
-3.	Performing the necessary remediation

Workaround
Document what we do

What is the second step of problem solving?
O Short-term remediation 
O Long-term remediation (.) Finding the root cause 
O Gathering information
Correct

Right on! Finding the root cause is the second step taken when problem solving.

106 Silently Crashing Application5m
strace

strace ./purplebox.py

System calls
Calls that the programs running on our computer make to the running kernel

strace -o

strace -o failure.strace ./purplebox.py

Which command can you use to scroll through a lot of text output after tracing system calls of a script?

O strace -o fail.strace (.) ./script.py strace ./script.py | less 
O strace ./script.py 
O strace ./script.py -o fail.strace
Correct

Great work! Piping the less command allows you to scroll through a lot of text output.

107 "It Doesn't Work"7m
What were you trying to do? What steps did you follow? What was the expected result?
What was the actual result?

What were they trying to do?
What steps did they follow?
What was the expected result?
What did they get instead?

When a user reports that a "website doesn't work," what is an appropriate follow-up question you can use to gather more information about the problem?

(.) What steps did you perform?
O Is the server receiving power?
O What server is the website hosted on?
O Do you have support ticket number?
You got it! Asking the user what steps they performed will help you gather more information in

108 Creating a Reproduction Case4m
kill-stop
Reproduction case
A way to verify if the problem is present or not

Linux
/var/log/syslog
.xsession-errors

MacOs
/Libra ry/Logs

Windows
Event Viewer

Unable to reach server

Invalid file format
Permission denied

Internal system error
strace
ltrace

A program fails with an error, "No such file or directory." You create a directory at the expected file path and the program successfully runs. Describe the reproduction case you'll submit to the program developer to verify and fix this error.

(.) A report explaining to open the program without the specific directory on the computer 
O A report with application logs exported from Windows Event Viewer O A report listing the contents of the new directory 
O A report listing the differences between strace and Itrace logs.
Correct

You got it! This a specific way to reproduce the error and verify it exists. The developer can work on fixing it right away.

109 Finding the Root Cause6m

Understanding the root cause is essential for performing the long-term remediation.

Whenever possible, we should check our hypothesis in a test environment, instead of the production environment that our users are working with.

Generally, understanding the root cause is essential for

O Purchasing new devices 
O Producing test data 
O Avoiding interfering with users 
(.) Providing the long-term resolution

Correct

Nailed it! Understanding the root cause is essential for providing the long-term resolution.

iotop
iostat
vmstat
lonice
iftop
rsync
-bwlimit
Trickle
nice

110 Dealing with Intermittent Issues4m
IAM

The load on the computer
The processes running at the same time
The usage of the network

Heisenbug
Werner Heisenberg

Observer effect
Observing a phenomenon alters the phenomenon

What sort of software bug might we be dealing with if power cycling resolves a problem?

(.) Poorly managed resources 
O A heisenbug 
O Logs filling up 
O A file remains open
Correct

Way to go! Power cycling releases resources stored in cache or memory, which gets rid of the problem.

111 Intermittently Failing Script9m

/bin/bash
meeting info=$(zenity   
  --forms \
  --title 'Meeting' --text 'Reminder information' \ 
  --add-calendar 'Date' --add-entry 'Title' \ 
  --add-entry 'Emails' \
  2>/dev/null)

if [[ -n "Smeeting info" ]]; then
python3 sendreminders.py "$meeting_info" 
fi

--forms-date-format='%Y-%m-%d'

112 What is binary search?3m
Linear search
Binary search

When searching for more than one element in a list, which of the following actions should you perform fir in order to search the list as quickly as possible?

(.) Sort the list 
O Do a binary search 
O Do a linear search 
O Use a base three logarithm
Correct

Nailed it! A list must be sorted first before it can take advantage of the binary search algorithm.

113 Applying Binary Search in Troubleshooting4m
Bisecting
bisect

When troubleshooting an XML configuration file that's failed after being updated for an application, what would you bisect in the code?

O File format 
O File quantity 
O Folder location 
(•) Variables
Correct

Nicely done! The list of variables in the file can be bisected or tested in halves continuously until a single root cause is found.

114 Finding Invalid Data6m
cat contacts.csv | ./import.py --server test
wc
wc -l
wc -l contacts.csv
head
tail
head -50 contacts.csv | ./import.py --server test
head -50 contacts.csv | head -25 | ./import.py --server test

bisect

115 Module 1 Wrap Up: Troubleshooting Concepts2m
116 Welcome to the Course10m
117 Linear and Binary Search (Optional)10m
118 How to Log in to Qwiklabs10m
119 Practice Quiz: Introduction to Debugging25m
Practice Quiz: Introduction to Debugging
Total points 5
Question 1
What is part of the final step when problem solving?
Documentation
v Long-term remediation
Finding the root cause
Gathering information
Question 2
Which tool can you use when debugging to look at library calls made by the software?
top
strace
tcpdump
v ltrace
Question 3
What is the first step of problem solving?
Prevention
v Gathering information
Long-term remediation
Finding the root cause
Question 4
What software tools are used to analyze network traffic to isolate problems? (Check all that apply)
v tcpdump
v wireshark
strace
top
Question 5
The strace (in Linux) tool allows us to see all of the _____ our program has made.
Network traffic
Disk writes
v System calls
Connection requests

120 Practice Quiz: Understanding the Problem25m
Practice Quiz: Understanding the Problem
Total points 5
Question 1
When a user reports that an "application doesn't work," what is an appropriate follow-up question to gather more information about the problem?
Is the server plugged in?
Why do you need the application?
Do you have a support ticket number?
v What should happen when you open the app?
Question 2
What is a heisenbug?
v The observer effect.
A test environment.
The root cause.
An event viewer. 
Question 3
The compare_strings function is supposed to compare just the alphanumeric content of two strings, ignoring upper vs lower case and punctuation. But something is not working. Fill in the code to try to find the problems, then fix the problems.
import re
def compare_strings(string1, string2):
  #Convert both strings to lowercase 
  #and remove leading and trailing blanks
  string1 = string1.lower().strip()
  string2 = string2.lower().strip()
  #Ignore punctuation
  punctuation = r"[.?!,;:\-']"
  string1 = re.sub(punctuation, r"", string1)
Reset
Question 4
How do we verify if a problem is still persisting or not?
Restart the device or server hardware
v Attempt to trigger the problem again by following the steps of our reproduction case
Repeatedly ask the user
Check again later
Question 5
The datetime module supplies classes for manipulating dates and times, and contains many types, objects, and methods. You've seen some of them used in the dow function, which returns the day of the week for a specific date. We'll use them again in the next_date function, which takes the date_string parameter in the format of "year-month-day", and uses the add_year function to calculate the next year that this date will occur (it's 4 years later for the 29th of February during Leap Year, and 1 year later for all other dates). Then it returns the value in the same format as it receives the date: "year-month-day".   
Can you find the error in the code? Is it in the next_date function or the add_year function? How can you determine if the add_year function returns what it's supposed to? Add debug lines as necessary to find the problems, then fix the code to work as indicated above. 
import datetime
from datetime import date
def add_year(date_obj):
  try:
    new_date_obj = date_obj.replace(year = date_obj.year + 1)
  except ValueError:
    # This gets executed when the above method fails, 
    # which means that we're making a Leap Year calculation
    new_date_obj = date_obj.replace(year = date_obj.year + 4)
  return new_date_obj
def next_date(date_string):
  # Convert the argument from string to date object
  date_obj = datetime.datetime.strptime(date_string, r"%Y-%m-%d")
  next_date_obj = add_year(date_obj)
  # Convert the datetime object to string, 
  # in the format of "yyyy-mm-dd"
  next_date_string = next_date_obj.strftime("%Y-%m-%d")
  return next_date_string
today = date.today()  # Get today's date
print(next_date(str(today))) 
# Should return a year from today, unless today is Leap Day
print(next_date("2021-01-01")) # Should return 2022-01-01
print(next_date("2020-02-29")) # Should return 2024-02-29


121 Practice Quiz: Binary Searching a Problem25m
Practice Quiz: Binary Searching a Problem
Total points 5
Question 1
You have a list of computers that a script connects to in order to gather SNMP traffic and calculate an average for a set of metrics. The script is now failing, and you do not know which remote computer is the problem. How would you troubleshoot this issue using the bisecting methodology?
v Run the script with the first half of the computers.
Run the script with last computer on the list.
Run the script with first computer on the list
Run the script with two-thirds of the computers.
Question 2
The find_item function uses binary search to recursively locate an item in the list, returning True if found, False otherwise. Something is missing from this function. Can you spot what it is and fix it? Add debug lines where appropriate, to help narrow down the problem.
#!/usr/bin/env python
def find_item(list, item):
  list.sort()
  #Returns True if the item is in the list, False if not.
  if len(list) == 0:
    return False
  #Is the item in the center of the list?
  middle = len(list)//2
  if list[middle] == item:
    return True
  #Is the item in the first half of the list? 
  if item < list[middle]:
    #Call the function with the first half of the list
    return find_item(list[:middle], item)
  else:
    #Call the function with the second half of the list
    return find_item(list[middle+1:], item)
  return False
#Do not edit below this line - This code helps check your work!
list_of_names = ["Parker", "Drew", "Cameron", "Logan", "Alex", "Chris", "Terry", "Jamie", "Jordan", "Taylor"]
print(find_item(list_of_names, "Alex")) # True
print(find_item(list_of_names, "Andrew")) # False
print(find_item(list_of_names, "Drew")) # True
print(find_item(list_of_names, "Jared")) # False
Reset
Question 3
The binary_search function returns the position of key in the list if found, or -1 if not found. We want to make sure that it's working correctly, so we need to place debugging lines to let us know each time that the list is cut in half, whether we're on the left or the right. Nothing needs to be printed when the key has been located.   
For example, binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) first determines that the key, 3, is in the left half of the list, and prints "Checking the left side", then determines that it's in the right half of the new list and prints "Checking the right side", before returning the value of 2, which is the position of the key in the list.  
Add commands to the code, to print out "Checking the left side" or "Checking the right side", in the appropriate places.  
#!/usr/bin/env python
def binary_search(list, key):
    #Returns the position of key in the list if found, -1 otherwise.
    #List must be sorted:
    list.sort()
    left = 0
    right = len(list) - 1
    while left <= right:
        middle = (left + right) // 2
        if list[middle] == key:
            return middle
        if list[middle] > key:
            right = middle - 1
            print("Checking the left side")            
        if list[middle] < key:
            left = middle + 1
            print("Checking the right side")
    return -1 
print(binary_search([10, 2, 9, 6, 7, 1, 5, 3, 4, 8], 1))
"""Should print 2 debug lines and the return value:
Checking the left side
Checking the left side 0
"""
print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
"""Should print no debug lines, as it's located immediately: 4
"""
print(binary_search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7))
"""Should print 3 debug lines and the return value:
Checking the right side
Checking the left side
Checking the right side 6
"""
print(binary_search([1, 3, 5, 7, 9, 10, 2, 4, 6, 8], 10))
"""Should print 3 debug lines and the return value:
Checking the right side
Checking the right side
Checking the right side 9
"""
print(binary_search([5, 1, 8, 2, 4, 10, 7, 6, 3, 9], 11))
"""Should print 4 debug lines and the "not found" value of -1:
Checking the right side
Checking the right side
Checking the right side
Checking the right side -1
"""
Reset
Question 4
When trying to find an error in a log file or output to the screen, what command can we use to review, say, the first 10 lines?
wc
tail
v head
bisect
Question 5
The best_search function compares linear_search and binary_search functions, to locate a key in the list, and returns how many steps each method took, and which one is the best for that situation. The list does not need to be sorted, as the binary_search function sorts it before proceeding (and uses one step to do so). Here, linear_search and binary_search functions both return the number of steps that it took to either locate the key, or determine that it's not in the list. If the number of steps is the same for both methods (including the extra step for sorting in binary_search), then the result is a tie. Fill in the blanks to make this work. 
#!/usr/bin/env python
# best_search
def linear_search(list, key):
    #Returns the number of steps to determine if key is in the list 
    #Initialize the counter of steps
    steps=0
    for i, item in enumerate(list):
        steps += 1
        if item == key:
            break
    return steps 
def binary_search(list, key):
    #Returns the number of steps to determine if key is in the list 
    #List must be sorted:
    list.sort()
    #The Sort was 1 step, so initialize the counter of steps to 1
    steps=1
    left = 0
    right = len(list) - 1
    while left <= right:
        steps += 1
        middle = (left + right) // 2
        if list[middle] == key:
            break
        if list[middle] > key:
            right = middle - 1
        if list[middle] < key:
            left = middle + 1
    return steps 
def best_search(list, key):
    steps_linear = linear_search(list, key) 
    steps_binary = binary_search(list, key)
    results = "Linear: " + str(steps_linear) + " steps, "
    results += "Binary: " + str(steps_binary) + " steps. "
    if (steps_linear < steps_binary):
        results += "Best Search is Linear."
    elif (steps_linear > steps_binary):
        results += "Best Search is Binary."
    else:
        results += "Result is a Tie."
    return results
print(best_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
#Should be: Linear: 1 steps, Binary: 4 steps. Best Search is Linear.
print(best_search([10, 2, 9, 1, 7, 5, 3, 4, 6, 8], 1))
#Should be: Linear: 4 steps, Binary: 4 steps. Result is a Tie.
print(best_search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7))
#Should be: Linear: 4 steps, Binary: 5 steps. Best Search is Linear.
print(best_search([1, 3, 5, 7, 9, 10, 2, 4, 6, 8], 10))
#Should be: Linear: 6 steps, Binary: 5 steps. Best Search is Binary.
print(best_search([5, 1, 8, 2, 4, 10, 7, 6, 3, 9], 11))
#Should be: Linear: 10 steps, Binary: 5 steps. Best Search is Binary.
Reset
Coursera Honor Code  Learn more

122 Qwiklabs Assessment: Debugging Python Scripts
sudo chmod 777 greetings.py
cat greetings.py
#!/usr/bin/env python3

import random

def greeting():
  name = input("Hello!, What's your name?")
  number = random.randint(1,101)
  print("hello " + name + ", your random number is " + number)

greeting()

./greetings.py

  print("hello " + name + ", your random number is " + str(number))

200 WEEK 2 Slowness 
In this module, you'l learn about what factors can cause a machine or program to act slowly. You'l dive into ways of addressing slowness by identifying the bottleneck that might be causing the slowness. You'l learn about tools to identify which resources are being exhausted, including iotop, iftop, and activity monitor in MacOS. Next, you'l learn how computers use resources, and understand the differences between CPU, RAM, and Cache in order to help you find the possible causes for slowness in our machines or scripts.
Next up, you'l learn how to write efficient code, then explore profilers to help you identify where your code is spending most of its time. Next, you'l dive into data structures and understand which ones are right for you to use. These include lists, tuples, dictionaries, sets, and expensive loops. Then, you'l dive into complex slowness problems and how utilizing concurrency and adding a caching service can improve the execution of your code. Finally, you'l understand how using threads can make the execution of your code much quicker.
202 SHOW ALL SYLLABUSSHOW ALL
203 Intro to Module 2: Slowness2m

204 Why is my computer slow?4m
Identify the bottleneck
Exhausted
top
iotop
iftop
MacOS
Activity Monitor
Windows

When addressing slowness, what do you need to identify?
(.)The bottleneck 
O The device 
O The script 
O The system
Woohoo! The bottleneck could be the CPU time, or time spent reading data from disk.

205 How Computers Use Resources5m
Cache
Stores data in a form that's faster to than its original form

Cached

Memory leak
Memory which is no longer needed is not getting released

After retrieving data from the network, how can an application access that same data quicker next time?
O Use the swap 
(.) Create a cache 
O Use memory leak 
O Store in RAM
You nailed it! A cache stores data in a form that's faster to access than its original form.

206 Possible Causes of Slowness5m
Logrotate

A computer becomes sluggish after a few days, and the problem goes away after a reboot. Which of the following is the possible cause?

O Files are growing too large.
(.) A program is keeping some state while running.
O Files are being read from the network.
O Hard drive failure.
Awesome! A program keeping a state without any change can slow down a computer up until it rebooted.

207 Slow Web Server10m
ab
ab -n 500 site.example.com/
pidof
for pid in $(pidof ffmpeg); do renice 19 $pid; done
ps ax
less
locate
grep
vim
ab -n 500 site.example.com/
ssh Webserver
top
clear
nice
renice
pidof
for pid in $(pidof ffmpeg); do renice 19 $pid; done
2874 (process ID) old priority 0, new priority 
19 2869 (process ID) old priority 0, new priority 19
ps ax
less
Daemonize
daemonize -c $PWD /usr/bin/ffnpeg -nostats -nostdin -i $video $mp4_video
/usr/bin/ffnpeg -nostats -nostdin -i $video $mp4_video

killall -STOP ffmpeg
CONT

for pid in $(pidof ffmpeg); do while kill -CONT $pid; do sleep 1; done; done

208 Writing Efficient Code4m
We should always start by writing clear code that does what it should, and only try to make it faster if we realize that it's not fast enough.

Trying to optimize every second out of a script is probably not worth your time.

If we want our code to finish faster, we need to make our computer do less work.

Profiler
A tool that measures the resources that our code is using, giving us a better understanding of what's going on

gprof
cProfile

kcachegrind

Expensive actions
Those that can take a long time to complete

What is the cProfile module used for?
O For parsing files.
O To analyze a C program.
(.)  To count functions calls 
O To remove unnecessary functions.
Right on! The cProfile module is used to count how many times functions are called, and how long they run.

209 Using the Right Data Structures3m
Lists
Tuples
Dictionaries
Sets

Lists
Sequences of elements. We can add, remove, or modify the elements in them, and we can iterate through the whole list to operate on each of the elements.

ArrayList in Java 
Vector in C++ 
Array in Ruby
Slice in Go

Dictionaries
Store key-value pairs. We add data by associating a value to a key, and then we retrieve a value by looking up a specific key.

HashMap in Java 
Unordered Map in C+ 
Hash in Ruby 
Map in Go

If you need to access elements by position, or will always iterate through all the elements, use a list to store them.

If we need to look up the elements using a key, we'll use a dictionary.

Which of the following has values associated with keys in Python? 
A hash
(•) A dictionary 
A HashMap 
An Unordered Map
You nailed it! Python uses a dictionary to store values, each with a specific key.

210 Expensive Loops4m
If you do an expensive operation inside a loop, you multiply the time it takes to do the expensive operation by the amount of times you repeat the loop.

Make sure that the list of elements that you're iterating through is only as long as you really need it to be.

Another thing to remember about loops is to break out of the loop once you've found what you were looking for.

break

Your Python script searches a directory, and runs other tasks in a single loop function for 100s of computers on the network. Which action will make the script the least expensive?
(.) Read the directory once 
O Loop the total number of computers 
O Service only half of the computers 
O Use more memory
Awesome! Reading the directory once before the loop will make the script less expensive to run.

211 Keeping Local Results4m
Your script calculates the average number of active user sessions during business hours in a seven-day period. How often should a local cache be created to give a good enough average without updating too often?
O Once a week 
(.) Once a day 
O Once a month 
O Once every 8 hours
Woohoo! A local cache for every day can be accessed quickly, and processed for a seven-day

212 Slow Script with Expensive Loop7m
You use the time command to determine how long a script runs to complete its various tasks. Which output value will show the time spent doing operations in the user space?
O Real
O Wall-clock
O Sys
(.) User
You nailed it! The user value is the time spent doing operations in the user space.

Slow Script with Expensive Loop
time
tine ./send_reminders.py "2020-01-13|Example|test1"

Real
The amount of actual time that it took to execute the command
Wall-clock time

User
The time spent doing operations in the user space

Sys
The time spent doing system-level operations

real 0m0.129s
user 0m0.068s
sys  0m0.013s

time ./send reminders.py "2020-01-13|Example|test1"

$ time ./send_reminders.py "2020-01-13|Example]test1,test2,test3,test4,test5,test6,test7,test8,test9"

Successfully sent reminders to: testl,test2,test3,test4,test5,test6,test7,test8,test9
real 0m0.296s
user 0m0.222s
svs	0m0.008s

pprofile3
pprofile3 -f callgrind -o profile.out ./send_reminders.py

kcachearind
kcachegrind profile.out

You use the time command to determine how long a script runs to complete its various tasks. Which output value will show the time spent doing operations in the user space?
O Real
O Wall-clock
O SVS
(•) User
You nailed it! The user value is the time spent doing operations in the user space.

213 Parallelizing Operations6m
Concurrency

Threads
Let us run parallel tasks inside a process

Threading
Asyncio
I/O bound
CPU bound

A script is ________ if you are running operations in parallel using all available CPU time.
O I/O bound
O Threading 
(•) CPU bound 
O Asyncio
Right on! A script is CPU bound if you're running operations in parallel using all available CPU time.

214 Slowly Growing in Complexity4m
You're creating a simple script that runs a query on a list of product names of a very small business, and initiates automated tasks based on those queries. Which of the following would you use to store product names?
O SQLite
O Microsoft SQL Server 
O Memcached 
(•) CSV file
Nice job! A simple CSV file is enough to store a list of product names.

215 Dealing with Complex Slow Systems4m
A company has a single web server hosting a website that also interacts with an external database server. The web server is processing requests very slowly. Checking the web server, you found the disk I/O has high latency. Where is the cause of the slow website requests most likely originating from?
v Local disk
You got it! The local disk I/O latency is causing the application to wait too long for data from disk.
□	Remote database
□	Slow Internet
□	Database index

216 Using Threads to Make Things Go Faster5m
$ cd thumbnail_generator
$ time ./thumbnail_generator.py
Processing: 100%
real 0ml.962s 
user 0ml.898s 
sys 0m0.065s

Executor
The process that's in charge of distributing the work among the different workers

from concurrent import futures

executor = futures.ThreadPoolExecutor() 
for root, _, files in os.walk('images'): 
  for basename in progressbar(files): 
    if not basename.endswith(’.jpg'): 
	  continue
    executor.submit(processfile, root, basename)
print('Waiting for all threads to finish.') executor.shutdown()

shutdown

executor = futures.ProcessPoolExecutor()

$ time ./thumbnail_generator.py
Processing: 100%
Waiting for all threads to finish.
real 0m0.945s
user 0m3.277s
sys	0m0.173s

Which module makes it possible to run operations in a script in parallel that makes better use of CPU processing time?
O Executor 
(.) Futures 
O Varnish 
O Concurrency
Woohoo! The futures module makes it possible to run operations in parallel using different executors.

217 Module 2 Wrap Up: Slowness1m

218 Monitoring Tools10m
219 More About Improving Our Code10m
220 More About Complex Slow Systems10m
221 Practice Quiz: Understanding Slowness25m
Practice Quiz: Understanding Slowness
Total points 5
Question 1
Which of the following will an application spend the longest time retrieving data from?
CPU L2 cache
RAM
Disk
v The network
Question 2
Which tool can you use to verify reports of 'slowness' for web pages served by a web server you manage?
The top tool
v The ab tool
The nice tool
The pidof tool
Question 3
If our computer running Microsoft Windows is running slow, what performance monitoring tools can we use to analyze our system resource usage to identify the bottleneck? (Check all that apply)
v Performance Monitor
v Resource Monitor
Activity Monitor
top 
Question 4
Which of the following programs is likely to run faster and more efficiently, with the least slowdown?
- A program with a cache stored on a hard drive
v A program small enough to fit in RAM
A program that reads files from an optical disc
A program that retrieves most of its data from the Internet
Question 5
What might cause a single application to slow down an entire system? (Check all that apply)
v A memory leak
The application relies on a slow network connection
v Handling files that have grown too large
Hardware faults

222 Practice Quiz: Slow Code25m
Practice Quiz: Slow Code
Total points 5
Question 1
Which of the following is NOT considered an expensive operation?
Parsing a file
Downloading data over the network
Going through a list
v Using a dictionary
Question 2
Which of the following may be the most expensive to carry out in most automation tasks in a script?
v Loops
Lists
Vector
Hash
Question 3
Which of the following statements represents the most sound advice when writing scripts?
Aim for every speed advantage you can get in your code
Use expensive operations often
v Start by writing clear code, then speed it up only if necessary
Use loops as often as possible
Question 4
In Python, what is a data structure that stores multiple pieces of data, in order, which can be changed later?
A hash
Dictionaries
v Lists
Tuples
Question 5
What command, keyword, module, or tool can be used to measure the amount of time it takes for an operation or program to execute? (Check all that apply)
v time
v kcachegrind
v cProfile
break

223 Practice Quiz: When Slowness Problems Get Complex25m
Practice Quiz: When Slowness Problems Get Complex
Total points 5
Question 1
Which of the following can cache database queries in memory for faster processing of automated tasks?
Threading
Varnish
v Memcached
SQLite
Question 2
What module specifies parts of a code to run in separate asynchronous events?
Threading
Futures
v Asyncio
Concurrent
Question 3
Which of the following allows our program to run multiple instructions in parallel?
v Threading 
Swap space
Memory addressing
Dual SSD
Question 4
What is the name of the field of study in computer science that concerns itself with writing programs and operations that run in parallel efficiently?
Memory management
v Concurrency
Threading
Performance analysis
Question 5
What would we call a program that often leaves our CPU with little to do as it waits on data from a local disk and the Internet?
Memory-bound
CPU-bound
User-bound
v I/O bound

224 Qwiklabs Assessment: Performance Tuning in Python Scripts
Qwiklabs Assessment: Performance Tuning in Python Scripts
CPU bound
sudo apt install python3-pip
pip3 install psutil

python3
import psutil
psutil.cpu_percent()
psutil.disk_io_counters()
sdiskio(read_count=6580, write_count=26953, read_bytes=205771776, write_bytes=766029824, read_time=21632, write_time=98000, read_merged_count=3, write_merged_count=30119, busy_time=14812)
>>> psutil.net_io_counters()
snetio(bytes_sent=580037, bytes_recv=115256926, packets_sent=4800, packets_recv=6425, errin=0, errout=0, dropin=0, dropout=0)
exit()

Basics rsync command
rsync [Options] [Source-Files-Dir] [Destination]

Options

Uses

-v

Verbose output

-q

Suppress message output

-a

Archive files and directory while synchronizing

-r

Sync files and directories recursively

-b

Take the backup during synchronization

-z

rsync -zvh [Source-Files-Dir] [Destination]
Copy or sync files locally:

rsync -zvh [Source-Files-Dir] [Destination]
Copied!
Copy or sync directory locally:

rsync -zavh [Source-Files-Dir] [Destination]
Copied!
Copy files and directories recursively locally:

rsync -zrvh [Source-Files-Dir] [Destination]
Copied!
To learn more about rsync basic command, check out this link.

Compress file data during the transfer

import subprocess
src = "<source-path>" # replace <source-path> with the source directory
dest = "<destination-path>" # replace <destination-path> with the destination directory

User exercise
nano ~/scripts/dailysync.py

#!/usr/bin/env python
import subprocess
src = "/data/prod/"
dest = "/data/prod_backup/"
subprocess.call(["rsync", "-arq", src, dest])

sudo chmod +x ~/scripts/dailysync.py
./scripts/dailysync.py
#!/usr/bin/env python
import subprocess
src = "./data/prod/"
dest = "./data/prod_backup/"
subprocess.call(["rsync", "-arq", src, dest])


300 WEEK 3 Crashing Programs 
In this module, you'l get introduced to the age old question, why has my program crashed?・You'l learn how to troubleshoot system crashes and application crashes, what tools you can be used to help identify the cause of the crash, and what log files to look at in order to find what might have gone wrong. Next, you'l dive into investigating why code crashes, and what you can do to prevent that from happening. Then, you'l explore what happens when an unhandled error occurs and throws an exception. You'l learn about the printf debugging technique, which will help you identify these errors and exceptions. Finally, you'l explore the concept of handling crashes and incidents at a much larger scale.
You'l delve into a scenario where a large eCommerce site will throw an error 20% of the time. Once that issue has been fixed, you'l understand the importance of communication and documentation during these incidents, and how writing a post mortem can prevent issues from happening again.
302 SHOW ALL SYLLABUSSHOW ALL
303 Intro to Module 3: Crashing Programs3m

304 Systems That Crash6m
memtest 86
S.M.A.R.T
A user reported an application crashes on their computer. You log in and try to run the program and it crashes again. Which of the following steps would you perform next to reduce the scope of the problem?
O Check the health of the RAM 
O Switch the hard drive into another computer 
O Check the health of the hard drive 
(.) Review application logs
Awesome! Reviewing logs is the next best step to determine if logs reveal any reason for the crash.

305 Understanding Crashing Applications6m
Console app
Permission denied
No such file or directory
Connection refused
Debug logging

Linux
strace

MacOS
dtruss

Windows
Process Monitor

To find the root cause of a crashing application, we'll want to look at all available logs, figure out what changed, trace the system or library calls the program makes, and create the smallest possible reproduction case.

Where should you look for application logs on a Windows system?
O The /var/log directory 
O The .xsession-errors file 
O The Console app
(.) The Event Viewer app
Great job! The Event Viewer app contains logs on a Windows system.

306 What to do when you can't fix the program?4m
Wrapper
A function or program that provides a compatibility layer between two functions programs, so they can work well together

Virtual machine
Container

Watchdog
A process that checks whether a program is running and, when it's not, starts the program again

An application fails in random intervals after it was installed on a different operating system version. What can you do to work around the issue?
O Use a wrapper 
(.) Use a container 
O Use a watchdog 
O Use an XML format
Nice work! A container allows the application to run in its own environment without interfering with the rest of the system.

What were you trying to do?
What were the steps you followed? 
What did you expect to happen? 
What was the actual outcome?

307 Internal Server Error10m
ssh Webserver
/var/log
date
ls -lt | head
tail syslog
netstat
sudo
-n
l
p
grep

sudo netstat -nip | grep :80

nginx - dir
Is -l /etc/nginx/sites-enabled/
vim /etc/nginx/sites-enabled/site.example.com.conf
gerver {

listen 80; listen [::]:80;

server_name site.exanple.com;

root /var/www/site.example.com; index index.html;

location / {

include uwsgi_params; uwsgi_pass 127.0.0.1:3031;

}

}

[uwsgi]

chdir = /srv/site.example.con uid = www-data gid = www-data

plugins = python3 wsgi-file = prod.pfl callable = app

plugins = logfile

logger = logs file:/var/log/site.log log-route = logs . *

processes = 4 threads = 2

socket = 127.0.0.1:3031 stats = 127.0.0.1:9191

ls -l site.log

sudo chown www-data.www-data site.log

Where is a common location to view configuration files for a web application running on a Linux server?

/etc/<app folder>

O /var/log/<app folder>

O /srv/<app folder>

O /<app folder>
Correct

Right on! The /etc directory will contain the application folder that stores configuration files.




308 Accessing Invalid Memory7m
309 Unhandled Errors and Exceptions6m
310 Fixing Someone Else's Code4m
311 Debugging a Segmentation Fault5m
312 Debugging a Python Crash5m
313 Crashes in Complex Systems6m
314 Communication and Documentation During Incidents5m
315 Writing Effective Postmortems4m
316 Module 3 Wrap Up: Crashing Programs1m
317 Resources for Understanding Crashes10m
318 Resources for Debugging Crashes10m
319 Practice Quiz: Why Programs Crash25m
320 Practice Quiz: Code that Crashes25m
321 Practice Quiz: Handling Bigger Incidents25m


400 WEEK 4 Managing Resources 
In this module, you'l learn how to manage your applications. You'l dive into some common issues that may cause your application to crash. You'l also understand what memory leaks are, and how to troubleshoot and prevent them. Up next, you'l run down managing disk space; you'l see some scenarios of how this happens and how to identify what process or application is taking up all your disk space. Then, you'll learn what network saturation is, how it can be caused, and some useful tools and techniques to solve a network saturation problem.
Next, we'l shift from managing applications to managing your time. You'l get tips on how to prioritize tasks, estimate how long a particular task will take before finishing, and communicate expectations when dealing with important tasks. The final lesson delves into how to deal with hard and complex problems by breaking it down into small, digestible chunks while keeping your eyes on a clear goal. You'l learn that using proactive approaches, like continuous integration, can help you with future issues that might come up. You'l also explore how to plan for future resource usage by making good use of monitoring.
402 SHOW ALL SYLLABUSSHOW ALL
403 Intro to Module 4: Managing Resources2m
404 Memory Leaks and How to Prevent Them5m
405 Managing Disk Space5m
406 Network Saturation5m
407 Dealing with Memory Leaks8m
408 Getting to the Important Tasks6m
409 Prioritizing Tasks6m
410 Estimating the Time Tasks Will Take4m
411 Communicating Expectations5m
412 Dealing with Hard Problems4m
413 Proactive Practices5m
414 Planning Future Resource Usage4m
415 Preventing Future Problems4m
416 Module 4 Wrap Up: Managing Resources1m
417 Congratulations!1m
418 Sneak Peek of Next Course1m
419 More About Managing Resources10m
420 More About Making the Best Use of Our Time10m
421 More About Preventing Future Breakage10m
422 Practice Quiz: Managing Computer Resources25m
423 Practice Quiz: Managing Our Time25m
424 Practice Quiz: Making Our Future Lives Easier25m