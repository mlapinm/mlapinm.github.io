100 WEEK 1 Troubleshooting Concepts 
In this module, you'l be introduced to the fundamentals of troubleshooting and you'l learn different strategies and approaches to tackle problems that you might encounter. You'l learn about the concept of debugging and how debugging is one of the core principles of troubleshooting. You'l be introduced to some tools that will help you in the debugging process, like tcpdump, ps, top, itrace, and lots more. Next, you'l explore how to understand the problem.・This might sound like a no brainer, but it's not as easy as you might think! Next, we'l dive into the different approaches when troubleshooting reproducing errors versus intermittent errors. Finally, you'l learn about binary searching a problem.・We'l explore the different types of searches, including binary and linear searches. Then, we'l learn about the concept of bisecting and how it can be used in your troubleshooting approach, and finish up with finding invalid data in a CSV file.
101 SHOW ALL SYLLABUSSHOW ALL
102 Course Introduction4m
Amanda
Security SystemslAdministra

103 Intro to Module 1: Troubleshooting Concepts2m
Binary search

104 What is debugging?4m
Debugging
Troubleshooting
Troubleshooting
The process of identifying, analyzing, and solving problems

Debugging
The process of identifying, analyzing, and removing bugs in a system

tcpdump
Wireshark

ps, top, free
strace
ltrace

Debuggers
Let us follow the code line by line, inspect changes in variable assignments, interrupt the program when a specific condition is met, and more

What is the general description of debugging?
(.) Fixing bugs in the code of the application 
O Fixing problems in the system running the application 
O Fixing issues related to hardware 
O Fixing configuration issues in the software

Correct

Awesome! Generally, debugging means fixing bugs in the code of the application.

105 Problem Solving Steps4m
Reproduction case
A clear description of how and when the problem appears

-1.	Getting information
-2.	Finding the root cause
-3.	Performing the necessary remediation

Workaround
Document what we do

What is the second step of problem solving?
O Short-term remediation 
O Long-term remediation (.) Finding the root cause 
O Gathering information
Correct

Right on! Finding the root cause is the second step taken when problem solving.

106 Silently Crashing Application5m
strace

strace ./purplebox.py

System calls
Calls that the programs running on our computer make to the running kernel

strace -o

strace -o failure.strace ./purplebox.py

Which command can you use to scroll through a lot of text output after tracing system calls of a script?

O strace -o fail.strace (.) ./script.py strace ./script.py | less 
O strace ./script.py 
O strace ./script.py -o fail.strace
Correct

Great work! Piping the less command allows you to scroll through a lot of text output.

107 "It Doesn't Work"7m
What were you trying to do? What steps did you follow? What was the expected result?
What was the actual result?

What were they trying to do?
What steps did they follow?
What was the expected result?
What did they get instead?

When a user reports that a "website doesn't work," what is an appropriate follow-up question you can use to gather more information about the problem?

(.) What steps did you perform?
O Is the server receiving power?
O What server is the website hosted on?
O Do you have support ticket number?
You got it! Asking the user what steps they performed will help you gather more information in

108 Creating a Reproduction Case4m
kill-stop
Reproduction case
A way to verify if the problem is present or not

Linux
/var/log/syslog
.xsession-errors

MacOs
/Libra ry/Logs

Windows
Event Viewer

Unable to reach server

Invalid file format
Permission denied

Internal system error
strace
ltrace

A program fails with an error, "No such file or directory." You create a directory at the expected file path and the program successfully runs. Describe the reproduction case you'll submit to the program developer to verify and fix this error.

(.) A report explaining to open the program without the specific directory on the computer 
O A report with application logs exported from Windows Event Viewer O A report listing the contents of the new directory 
O A report listing the differences between strace and Itrace logs.
Correct

You got it! This a specific way to reproduce the error and verify it exists. The developer can work on fixing it right away.

109 Finding the Root Cause6m

Understanding the root cause is essential for performing the long-term remediation.

Whenever possible, we should check our hypothesis in a test environment, instead of the production environment that our users are working with.

Generally, understanding the root cause is essential for

O Purchasing new devices 
O Producing test data 
O Avoiding interfering with users 
(.) Providing the long-term resolution

Correct

Nailed it! Understanding the root cause is essential for providing the long-term resolution.

iotop
iostat
vmstat
lonice
iftop
rsync
-bwlimit
Trickle
nice

110 Dealing with Intermittent Issues4m
IAM

The load on the computer
The processes running at the same time
The usage of the network

Heisenbug
Werner Heisenberg

Observer effect
Observing a phenomenon alters the phenomenon

What sort of software bug might we be dealing with if power cycling resolves a problem?

(.) Poorly managed resources 
O A heisenbug 
O Logs filling up 
O A file remains open
Correct

Way to go! Power cycling releases resources stored in cache or memory, which gets rid of the problem.

111 Intermittently Failing Script9m

/bin/bash
meeting info=$(zenity   
  --forms \
  --title 'Meeting' --text 'Reminder information' \ 
  --add-calendar 'Date' --add-entry 'Title' \ 
  --add-entry 'Emails' \
  2>/dev/null)

if [[ -n "Smeeting info" ]]; then
python3 sendreminders.py "$meeting_info" 
fi

--forms-date-format='%Y-%m-%d'

112 What is binary search?3m
Linear search
Binary search

When searching for more than one element in a list, which of the following actions should you perform fir in order to search the list as quickly as possible?

(.) Sort the list 
O Do a binary search 
O Do a linear search 
O Use a base three logarithm
Correct

Nailed it! A list must be sorted first before it can take advantage of the binary search algorithm.

113 Applying Binary Search in Troubleshooting4m
Bisecting
bisect

When troubleshooting an XML configuration file that's failed after being updated for an application, what would you bisect in the code?

O File format 
O File quantity 
O Folder location 
(•) Variables
Correct

Nicely done! The list of variables in the file can be bisected or tested in halves continuously until a single root cause is found.

114 Finding Invalid Data6m
cat contacts.csv | ./import.py --server test
wc
wc -l
wc -l contacts.csv
head
tail
head -50 contacts.csv | ./import.py --server test
head -50 contacts.csv | head -25 | ./import.py --server test

bisect

115 Module 1 Wrap Up: Troubleshooting Concepts2m
116 Welcome to the Course10m
117 Linear and Binary Search (Optional)10m
118 How to Log in to Qwiklabs10m
119 Practice Quiz: Introduction to Debugging25m
Practice Quiz: Introduction to Debugging
Total points 5
Question 1
What is part of the final step when problem solving?
Documentation
v Long-term remediation
Finding the root cause
Gathering information
Question 2
Which tool can you use when debugging to look at library calls made by the software?
top
strace
tcpdump
v ltrace
Question 3
What is the first step of problem solving?
Prevention
v Gathering information
Long-term remediation
Finding the root cause
Question 4
What software tools are used to analyze network traffic to isolate problems? (Check all that apply)
v tcpdump
v wireshark
strace
top
Question 5
The strace (in Linux) tool allows us to see all of the _____ our program has made.
Network traffic
Disk writes
v System calls
Connection requests

120 Practice Quiz: Understanding the Problem25m
Practice Quiz: Understanding the Problem
Total points 5
Question 1
When a user reports that an "application doesn't work," what is an appropriate follow-up question to gather more information about the problem?
Is the server plugged in?
Why do you need the application?
Do you have a support ticket number?
v What should happen when you open the app?
Question 2
What is a heisenbug?
v The observer effect.
A test environment.
The root cause.
An event viewer. 
Question 3
The compare_strings function is supposed to compare just the alphanumeric content of two strings, ignoring upper vs lower case and punctuation. But something is not working. Fill in the code to try to find the problems, then fix the problems.
import re
def compare_strings(string1, string2):
  #Convert both strings to lowercase 
  #and remove leading and trailing blanks
  string1 = string1.lower().strip()
  string2 = string2.lower().strip()
  #Ignore punctuation
  punctuation = r"[.?!,;:\-']"
  string1 = re.sub(punctuation, r"", string1)
Reset
Question 4
How do we verify if a problem is still persisting or not?
Restart the device or server hardware
v Attempt to trigger the problem again by following the steps of our reproduction case
Repeatedly ask the user
Check again later
Question 5
The datetime module supplies classes for manipulating dates and times, and contains many types, objects, and methods. You've seen some of them used in the dow function, which returns the day of the week for a specific date. We'll use them again in the next_date function, which takes the date_string parameter in the format of "year-month-day", and uses the add_year function to calculate the next year that this date will occur (it's 4 years later for the 29th of February during Leap Year, and 1 year later for all other dates). Then it returns the value in the same format as it receives the date: "year-month-day".   
Can you find the error in the code? Is it in the next_date function or the add_year function? How can you determine if the add_year function returns what it's supposed to? Add debug lines as necessary to find the problems, then fix the code to work as indicated above. 
import datetime
from datetime import date
def add_year(date_obj):
  try:
    new_date_obj = date_obj.replace(year = date_obj.year + 1)
  except ValueError:
    # This gets executed when the above method fails, 
    # which means that we're making a Leap Year calculation
    new_date_obj = date_obj.replace(year = date_obj.year + 4)
  return new_date_obj
def next_date(date_string):
  # Convert the argument from string to date object
  date_obj = datetime.datetime.strptime(date_string, r"%Y-%m-%d")
  next_date_obj = add_year(date_obj)
  # Convert the datetime object to string, 
  # in the format of "yyyy-mm-dd"
  next_date_string = next_date_obj.strftime("%Y-%m-%d")
  return next_date_string
today = date.today()  # Get today's date
print(next_date(str(today))) 
# Should return a year from today, unless today is Leap Day
print(next_date("2021-01-01")) # Should return 2022-01-01
print(next_date("2020-02-29")) # Should return 2024-02-29


121 Practice Quiz: Binary Searching a Problem25m


200 WEEK 2 Slowness 
In this module, you'l learn about what factors can cause a machine or program to act slowly. You'l dive into ways of addressing slowness by identifying the bottleneck that might be causing the slowness. You'l learn about tools to identify which resources are being exhausted, including iotop, iftop, and activity monitor in MacOS. Next, you'l learn how computers use resources, and understand the differences between CPU, RAM, and Cache in order to help you find the possible causes for slowness in our machines or scripts.
Next up, you'l learn how to write efficient code, then explore profilers to help you identify where your code is spending most of its time. Next, you'l dive into data structures and understand which ones are right for you to use. These include lists, tuples, dictionaries, sets, and expensive loops. Then, you'l dive into complex slowness problems and how utilizing concurrency and adding a caching service can improve the execution of your code. Finally, you'l understand how using threads can make the execution of your code much quicker.
202 SHOW ALL SYLLABUSSHOW ALL
203 Intro to Module 2: Slowness2m

204 Why is my computer slow?4m
Identify the bottleneck
Exhausted
top
iotop
iftop
MacOS
Activity Monitor
Windows

When addressing slowness, what do you need to identify?
(.)The bottleneck 
O The device 
O The script 
O The system
Woohoo! The bottleneck could be the CPU time, or time spent reading data from disk.

205 How Computers Use Resources5m
Cache
Stores data in a form that's faster to than its original form

Cached

Memory leak
Memory which is no longer needed is not getting released

After retrieving data from the network, how can an application access that same data quicker next time?
O Use the swap 
(.) Create a cache 
O Use memory leak 
O Store in RAM
You nailed it! A cache stores data in a form that's faster to access than its original form.

206 Possible Causes of Slowness5m
Logrotate

A computer becomes sluggish after a few days, and the problem goes away after a reboot. Which of the following is the possible cause?

O Files are growing too large.
(.) A program is keeping some state while running.
O Files are being read from the network.
O Hard drive failure.
Awesome! A program keeping a state without any change can slow down a computer up until it rebooted.

207 Slow Web Server10m
ab
ab -n 500 site.example.com/
pidof
for pid in $(pidof ffmpeg); do renice 19 $pid; done
ps ax
less
locate
grep
vim
ab -n 500 site.example.com/
ssh Webserver
top
clear
nice
renice
pidof
for pid in $(pidof ffmpeg); do renice 19 $pid; done
2874 (process ID) old priority 0, new priority 
19 2869 (process ID) old priority 0, new priority 19
ps ax
less
Daemonize
daemonize -c $PWD /usr/bin/ffnpeg -nostats -nostdin -i $video $mp4_video
/usr/bin/ffnpeg -nostats -nostdin -i $video $mp4_video

killall -STOP ffmpeg
CONT

for pid in $(pidof ffmpeg); do while kill -CONT $pid; do sleep 1; done; done






208 Writing Efficient Code4m
209 Using the Right Data Structures3m
210 Expensive Loops4m
211 Keeping Local Results4m
212 Slow Script with Expensive Loop7m
213 Parallelizing Operations6m
214 Slowly Growing in Complexity4m
215 Dealing with Complex Slow Systems4m
216 Using Threads to Make Things Go Faster5m
217 Module 2 Wrap Up: Slowness1m
218 Monitoring Tools10m
219 More About Improving Our Code10m
220 More About Complex Slow Systems10m
221 Practice Quiz: Understanding Slowness25m
222 Practice Quiz: Slow Code25m
223 Practice Quiz: When Slowness Problems Get Complex25m


300 WEEK 3 Crashing Programs 
In this module, you'l get introduced to the age old question, why has my program crashed?・You'l learn how to troubleshoot system crashes and application crashes, what tools you can be used to help identify the cause of the crash, and what log files to look at in order to find what might have gone wrong. Next, you'l dive into investigating why code crashes, and what you can do to prevent that from happening. Then, you'l explore what happens when an unhandled error occurs and throws an exception. You'l learn about the printf debugging technique, which will help you identify these errors and exceptions. Finally, you'l explore the concept of handling crashes and incidents at a much larger scale.
You'l delve into a scenario where a large eCommerce site will throw an error 20% of the time. Once that issue has been fixed, you'l understand the importance of communication and documentation during these incidents, and how writing a post mortem can prevent issues from happening again.
302 SHOW ALL SYLLABUSSHOW ALL
303 Intro to Module 3: Crashing Programs3m
304 Systems That Crash6m
305 Understanding Crashing Applications6m
306 What to do when you can't fix the program?4m
307 Internal Server Error10m
308 Accessing Invalid Memory7m
309 Unhandled Errors and Exceptions6m
310 Fixing Someone Else's Code4m
311 Debugging a Segmentation Fault5m
312 Debugging a Python Crash5m
313 Crashes in Complex Systems6m
314 Communication and Documentation During Incidents5m
315 Writing Effective Postmortems4m
316 Module 3 Wrap Up: Crashing Programs1m
317 Resources for Understanding Crashes10m
318 Resources for Debugging Crashes10m
319 Practice Quiz: Why Programs Crash25m
320 Practice Quiz: Code that Crashes25m
321 Practice Quiz: Handling Bigger Incidents25m


400 WEEK 4 Managing Resources 
In this module, you'l learn how to manage your applications. You'l dive into some common issues that may cause your application to crash. You'l also understand what memory leaks are, and how to troubleshoot and prevent them. Up next, you'l run down managing disk space; you'l see some scenarios of how this happens and how to identify what process or application is taking up all your disk space. Then, you'll learn what network saturation is, how it can be caused, and some useful tools and techniques to solve a network saturation problem.
Next, we'l shift from managing applications to managing your time. You'l get tips on how to prioritize tasks, estimate how long a particular task will take before finishing, and communicate expectations when dealing with important tasks. The final lesson delves into how to deal with hard and complex problems by breaking it down into small, digestible chunks while keeping your eyes on a clear goal. You'l learn that using proactive approaches, like continuous integration, can help you with future issues that might come up. You'l also explore how to plan for future resource usage by making good use of monitoring.
402 SHOW ALL SYLLABUSSHOW ALL
403 Intro to Module 4: Managing Resources2m
404 Memory Leaks and How to Prevent Them5m
405 Managing Disk Space5m
406 Network Saturation5m
407 Dealing with Memory Leaks8m
408 Getting to the Important Tasks6m
409 Prioritizing Tasks6m
410 Estimating the Time Tasks Will Take4m
411 Communicating Expectations5m
412 Dealing with Hard Problems4m
413 Proactive Practices5m
414 Planning Future Resource Usage4m
415 Preventing Future Problems4m
416 Module 4 Wrap Up: Managing Resources1m
417 Congratulations!1m
418 Sneak Peek of Next Course1m
419 More About Managing Resources10m
420 More About Making the Best Use of Our Time10m
421 More About Preventing Future Breakage10m
422 Practice Quiz: Managing Computer Resources25m
423 Practice Quiz: Managing Our Time25m
424 Practice Quiz: Making Our Future Lives Easier25m