1 Compare Scopes of the var and let Keywords
function checkScope() {
  let i = 'function scope';
  if (true) {
    let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

checkScope()
2 Mutate an Array Declared with const
const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line

  // Using s = [2, 5, 7] would be invalid
  s[0] = 2
  s[1] = 5
  s[2] = 7

  // Only change code above this line
}
editInPlace();
3 Prevent Object Mutation
function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line

  Object.freeze(MATH_CONSTANTS)

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();
4 Use Arrow Functions to Write Concise Anonymous Functions
const magic = () => new Date()

let a = magic()
console.log(a)

5 Write Arrow Functions with Parameters
const myConcat = (arr1, arr2) => arr1.concat(arr2)

console.log(myConcat([1, 2], [3, 4, 5]));
6 Set Default Parameters for Your Functions
// Only change code below this line
const increment = (number, value = 1) => number + value;
console.log(increment(3))
// Only change code above this line
7 Use the Rest Parameter with Function Parameters
const sum = (...args) => {
  // const args = [x, y, z];
  console.log(args)
  return args.reduce((a, b) => a + b, 0);
}
console.log(sum(1, 2, 3, 4))

8 Use the Spread Operator to Evaluate Arrays In-Place
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;

arr2 = [...arr1];  // Change this line

console.log(arr2);
9 Use Destructuring Assignment to Extract Values from Objects

10 Use Destructuring Assignment to Assign Variables from Objects

11 Use Destructuring Assignment to Assign Variables from Nested Objects

12 Use Destructuring Assignment to Assign Variables from Arrays

13 Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements

14 Use Destructuring Assignment to Pass an Object as a Function's Parameters

15 Create Strings using Template Literals

16 Write Concise Object Literal Declarations Using Object Property Shorthand

17 Write Concise Declarative Functions with ES6

18 Use class Syntax to Define a Constructor Function

19 Use getters and setters to Control Access to an Object

20 Create a Module Script

21 Use export to Share a Code Block

22 Reuse JavaScript Code Using import

23 Use * to Import Everything from a File

24 Create an Export Fallback with export default

25 Import a Default Export

26 Create a JavaScript Promise

27 Complete a Promise with resolve and reject

28 Handle a Fulfilled Promise with then

29 Handle a Rejected Promise with catch
