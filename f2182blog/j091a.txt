1
00:00:00,940 --> 00:00:03,420
Welcome to Jeremy’s IT Lab.

2
00:00:03,420 --> 00:00:06,840
This is a free, complete course for the CCNA.

3
00:00:06,840 --> 00:00:10,599
If you like these videos, please subscribe
to follow along with the series.

4
00:00:10,599 --> 00:00:15,269
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:15,269 --> 00:00:16,420
of videos.

6
00:00:16,420 --> 00:00:17,900
Thanks for your help.

7
00:00:17,900 --> 00:00:21,800
Also, remember to sign up via the link in
the description to get all of the lab files

8
00:00:21,800 --> 00:00:26,670
for this course, so you can try it out yourself
in packet tracer.

9
00:00:26,670 --> 00:00:30,960
If you want more labs like these, I highly
recommend picking up Boson’s NetSim for

10
00:00:30,960 --> 00:00:32,129
the CCNA.

11
00:00:32,129 --> 00:00:36,390
It’s a network simulator with tons of guided
labs covering all of the topics you need to

12
00:00:36,390 --> 00:00:38,690
know for the CCNA.

13
00:00:38,690 --> 00:00:42,640
Click the link in the video description to
check it out.

14
00:00:42,640 --> 00:00:47,390
In this lab we’ll do some basic QoS configurations
on R1.

15
00:00:47,390 --> 00:00:52,999
The design and configuration of QoS isn’t
actually a CCNA exam topic, so you don’t

16
00:00:52,999 --> 00:00:56,100
have to worry about remembering these configurations
for now.

17
00:00:56,100 --> 00:01:01,149
But I think doing some basic configurations
in a lab will help you understand how QoS

18
00:01:01,149 --> 00:01:03,749
works, so let’s do it.

19
00:01:03,749 --> 00:01:08,340
In this network we have PC1 connected to R1
via SW1.

20
00:01:08,340 --> 00:01:13,180
On the other side there is SRV1 connected
to R2 via SW2.

21
00:01:13,180 --> 00:01:17,820
Although I’ve only shown 1 PC, let’s say
there are many more connected to R1 and the

22
00:01:17,820 --> 00:01:19,610
network is getting congested.

23
00:01:19,610 --> 00:01:25,610
So, we will configure QoS on R1 to ensure
the more important traffic receives high-priority

24
00:01:25,610 --> 00:01:26,850
treatment.

25
00:01:26,850 --> 00:01:33,610
We will mark HTTPS traffic as AF31 and ensure
that it gets a minimum of 10% bandwidth in

26
00:01:33,610 --> 00:01:35,650
a priority queue.

27
00:01:35,650 --> 00:01:42,110
We will mark HTTP traffic as AF32 and ensure
that it gets a minimum of 10% bandwidth, but

28
00:01:42,110 --> 00:01:44,310
it will not be in a priority queue.

29
00:01:44,310 --> 00:01:50,750
We will mark ICMP traffic as CS2 and ensure
that it gets a minimum of 5% bandwidth.

30
00:01:50,750 --> 00:01:56,370
Now, the actual QoS design of a network depends
entirely on the network.

31
00:01:56,370 --> 00:02:02,140
Which traffic needs to be prioritized, how
much bandwidth it needs, etc, varies greatly.

32
00:02:02,140 --> 00:02:06,570
These values I selected are honestly just
random values so I can show you the basic

33
00:02:06,570 --> 00:02:08,060
configuration commands.

34
00:02:08,060 --> 00:02:13,700
Giving HTTPS traffic a priority queue, for
example, is probably not so common.

35
00:02:13,700 --> 00:02:16,710
Usually priority queues are used for voice
traffic.

36
00:02:16,710 --> 00:02:21,670
Anyway, after configuring the QoS rules we
will apply them to traffic being forwarded

37
00:02:21,670 --> 00:02:25,040
out of R1’s G0/0/0 interface.

38
00:02:25,040 --> 00:02:31,610
So, when R1 forwards traffic out of G0/0/0
to R2, it will be prioritized according to

39
00:02:31,610 --> 00:02:33,260
our configurations.

40
00:02:33,260 --> 00:02:37,690
Now, once the traffic reaches R2 that’s
a different story.

41
00:02:37,690 --> 00:02:42,810
Even if R1 marks the packets as high priority,
unless R2 is also configured to treat those

42
00:02:42,810 --> 00:02:47,480
packets as high priority, it will treat them
all equally.

43
00:02:47,480 --> 00:02:52,930
In the CCNA exam topics, it is stated that
you must be able to explain the PHB, per-hop

44
00:02:52,930 --> 00:02:55,070
behavior, of QoS.

45
00:02:55,070 --> 00:02:58,230
Well, this is the per hop behavior.

46
00:02:58,230 --> 00:03:04,490
We configure QoS on R1 and it will prioritize
certain types of traffic over the hop to R2,

47
00:03:04,490 --> 00:03:11,209
but then how R2 prioritizes traffic over the
next hop depends on the configuration of R2.

48
00:03:11,209 --> 00:03:15,569
You can’t just configure one router to prioritize
voice traffic and then expect the rest of

49
00:03:15,569 --> 00:03:18,190
the network to also prioritize it.

50
00:03:18,190 --> 00:03:22,050
You have to configure QoS all across the network,
wherever it’s needed.

51
00:03:22,050 --> 00:03:26,440
Okay, I just wanted to make that clear since
I didn’t clearly explain the per-hop behavior

52
00:03:26,440 --> 00:03:29,400
of QoS in the lecture videos.

53
00:03:29,400 --> 00:03:34,880
To show you the basic QoS configurations,
though, we’ll just configure R1.

54
00:03:34,880 --> 00:03:38,730
Before configuration, though, let me show
you the default markings of traffic being

55
00:03:38,730 --> 00:03:40,060
forwarded from R1.

56
00:03:40,060 --> 00:03:42,470
I’ll go on PC1.

57
00:03:42,470 --> 00:03:47,550
First, let me try to ping jeremysitlab.com.

58
00:03:47,550 --> 00:03:48,760
PING jeremysitlab.com.

59
00:03:48,760 --> 00:03:57,630
So, PC1 will send a DNS query to its DNS server,
which is SRV1 at 10.0.0.100, and then it will

60
00:03:57,630 --> 00:04:04,739
learn the IP address of jeremysitlab.com,
which in this case is also 10.0.0.100, and

61
00:04:04,739 --> 00:04:07,650
then PC1 will ping SRV1.

62
00:04:07,650 --> 00:04:09,690
As you can see, the pings work.

63
00:04:09,690 --> 00:04:13,390
Now let’s switch to simulation mode, and
ping again.

64
00:04:13,390 --> 00:04:16,220
PING jeremysitlab.com.

65
00:04:16,220 --> 00:04:22,280
In reality PC1 should store the IP address
of jeremysitlab.com in its DNS cache, but

66
00:04:22,280 --> 00:04:27,050
it seems that doesn’t work in packet tracer,
so it sends the DNS query again.

67
00:04:27,050 --> 00:04:31,810
Anyway, lets go to the point where the ICMP
packet is at R1.

68
00:04:31,810 --> 00:04:36,150
And now let’s check that packet, and click
on outbound PDU details.

69
00:04:36,150 --> 00:04:40,840
So, this is the state of the packet as it
is going to be forwarded by R1.

70
00:04:40,840 --> 00:04:45,120
Notice the DSCP field is written as hexadecimal
00.

71
00:04:45,120 --> 00:04:52,680
Technically, two hexadecimal digits is 8 bits,
but really the DSCP field is just 6 bits.

72
00:04:52,680 --> 00:04:55,600
And in packet tracer, the ECN field isn’t
displayed.

73
00:04:55,600 --> 00:05:00,820
Anyway, since the field is displayed in hexadecimal
here we’ll have to do some conversions later

74
00:05:00,820 --> 00:05:05,590
when we check the markings, but for now just
notice that the DSCP field isn’t marked,

75
00:05:05,590 --> 00:05:08,600
it’s 0, default forwarding.

76
00:05:08,600 --> 00:05:12,830
This is how PCs send their traffic by default,
and the switches and routers won’t add any

77
00:05:12,830 --> 00:05:15,060
markings by default.

78
00:05:15,060 --> 00:05:20,180
For time’s sake I won’t show you HTTP
and HTTPS now, but they would also have a

79
00:05:20,180 --> 00:05:22,070
DSCP value of 0.

80
00:05:22,070 --> 00:05:26,430
Okay, now let’s configure QoS, I’ll go
on R1.

81
00:05:26,430 --> 00:05:27,800
ENABLE.

82
00:05:27,800 --> 00:05:34,830
CONF T. So, there are three main steps to
configure QoS.

83
00:05:34,830 --> 00:05:38,070
First, you have to identify the traffic.

84
00:05:38,070 --> 00:05:42,210
In order to give special treatment for certain
kinds of traffic, you have tell the router

85
00:05:42,210 --> 00:05:46,340
what kinds of traffic you want to give that
special treatment to.

86
00:05:46,340 --> 00:05:51,950
To identify traffic in a Cisco IOS QoS configuration,
we use class maps.

87
00:05:51,950 --> 00:05:54,400
The command is CLASS-MAP.

88
00:05:54,400 --> 00:06:02,009
I will call this first class map HTTPS_MAP,
since we will use it to match HTTPS traffic.

89
00:06:02,009 --> 00:06:05,980
Then I will enter MATCH PROTOCOL HTTPS.

90
00:06:05,980 --> 00:06:06,990
And that’s it.

91
00:06:06,990 --> 00:06:12,600
So, this class map can be used to identify
HTTPS traffic, and now I’ll exit out.

92
00:06:12,600 --> 00:06:15,419
Let’s make another class map.

93
00:06:15,419 --> 00:06:17,370
CLASS-MAP HTTP_MAP.

94
00:06:17,370 --> 00:06:21,780
I’ll use this to match HTTP traffic.

95
00:06:21,780 --> 00:06:24,169
MATCH PROTOCOL HTTP.

96
00:06:24,169 --> 00:06:25,650
EXIT.

97
00:06:25,650 --> 00:06:28,759
And one more, we’ll match ICMP traffic.

98
00:06:28,759 --> 00:06:32,139
CLASS-MAP ICMP_MAP.

99
00:06:32,139 --> 00:06:33,560
MATCH PROTOCOL ICMP.

100
00:06:33,560 --> 00:06:34,560
EXIT.

101
00:06:34,560 --> 00:06:38,169
Okay, let’s check those class maps.

102
00:06:38,169 --> 00:06:43,400
DO SHOW RUN | SECTION CLASS-MAP.

103
00:06:43,400 --> 00:06:46,220
There are the three class maps I configured.

104
00:06:46,220 --> 00:06:53,389
Notice that, although I only typed CLASS-MAP
HTTPS_MAP, CLASS-MAP HTTP_MAP, and CLASS-MAP

105
00:06:53,389 --> 00:06:59,050
ICMP_MAP, the default mode of MATCH-ALL was
applied.

106
00:06:59,050 --> 00:07:03,900
This means that, to match this class map,
traffic has to match all of the MATCH statements

107
00:07:03,900 --> 00:07:05,930
in that class map.

108
00:07:05,930 --> 00:07:10,680
In this case, each class map only has one
MATCH statement, so it doesn’t matter, but

109
00:07:10,680 --> 00:07:15,490
if there are multiple match statements you
can also use MATCH-ANY mode, which means traffic

110
00:07:15,490 --> 00:07:20,400
will match that class map even if it matches
only one of the MATCH statements in the class

111
00:07:20,400 --> 00:07:21,680
map.

112
00:07:21,680 --> 00:07:26,490
So you could, for example, make a class map
with two match statements, MATCH PROTOCOL

113
00:07:26,490 --> 00:07:30,590
HTTPS and MATCH PROTOCOL HTTP.

114
00:07:30,590 --> 00:07:36,960
In that case, if a packet is either an HTTPS
packet or an HTTP packet, it would match that

115
00:07:36,960 --> 00:07:38,400
class map.

116
00:07:38,400 --> 00:07:40,840
Anyway, let’s move on.

117
00:07:40,840 --> 00:07:44,789
So, that’s the first step of QoS configuration.

118
00:07:44,789 --> 00:07:48,030
Identify the kinds of traffic you want to
apply special treatment to.

119
00:07:48,030 --> 00:07:54,030
Next, we have to specify what kind of treatment
we want to give to each kind of traffic.

120
00:07:54,030 --> 00:07:56,620
To do that we use policy maps.

121
00:07:56,620 --> 00:08:04,080
The command is POLICY-MAP, and I’ll name
it G0/0/0_OUT, since we will later apply this

122
00:08:04,080 --> 00:08:08,949
policy map outbound on the G0/0/0 interface.

123
00:08:08,949 --> 00:08:14,670
Then I’ll use CLASS, followed by the name
of one of the class maps I just configured,

124
00:08:14,670 --> 00:08:16,330
HTTPS_MAP.

125
00:08:16,330 --> 00:08:22,870
Okay, now we can tell R1 what to do with traffic
that matches this class map.

126
00:08:22,870 --> 00:08:27,500
First, SET IP DSCP AF31.

127
00:08:27,500 --> 00:08:33,610
So, it will mark any HTTPS packets with a
DSCP value of AF31.

128
00:08:33,610 --> 00:08:40,229
Then, we’ll give HTTPS a priority queue
with at least 10% of the links bandwidth during

129
00:08:40,229 --> 00:08:42,779
periods of congestion.

130
00:08:42,779 --> 00:08:44,350
PRIORITY PERCENT 10.

131
00:08:44,350 --> 00:08:48,860
Okay, that’s all for the HTTPS class.

132
00:08:48,860 --> 00:08:50,010
EXIT.

133
00:08:50,010 --> 00:08:52,580
Now for HTTP traffic.

134
00:08:52,580 --> 00:08:55,330
CLASS HTTP_MAP.

135
00:08:55,330 --> 00:09:00,100
SET IP DSCP AF32.

136
00:09:00,100 --> 00:09:04,690
And now we’ll give it a minimum bandwidth
of 10% during times of congestion, but it

137
00:09:04,690 --> 00:09:07,350
won’t be a priority queue.

138
00:09:07,350 --> 00:09:09,250
BANDWIDTH PERCENT 10.

139
00:09:09,250 --> 00:09:10,410
EXIT.

140
00:09:10,410 --> 00:09:12,730
Finally, ICMP.

141
00:09:12,730 --> 00:09:14,459
CLASS ICMP_MAP.

142
00:09:14,459 --> 00:09:19,910
SET IP DSCP CS2.

143
00:09:19,910 --> 00:09:22,830
And we’ll give it 5% of bandwidth.

144
00:09:22,830 --> 00:09:24,880
BANDWIDTH PERCENT 5.

145
00:09:24,880 --> 00:09:28,000
EXIT, and EXIT again.

146
00:09:28,000 --> 00:09:31,240
Okay let’s check that configuration.

147
00:09:31,240 --> 00:09:35,100
DO SHOW RUNNING-CONFIG | SECTION POLICY-MAP.

148
00:09:35,100 --> 00:09:39,260
So, here’s how this QoS configuration works.

149
00:09:39,260 --> 00:09:44,660
We haven’t actually applied it outbound
on G0/0/0 yet, but after we do it will check

150
00:09:44,660 --> 00:09:48,730
all traffic that is to be forwarded out of
G0/0/0.

151
00:09:48,730 --> 00:09:55,380
If its an HTTPS packet, it will mark it as
DSCP AF31, and give it a priority queue with

152
00:09:55,380 --> 00:09:58,600
at least 10% of the link’s bandwidth.

153
00:09:58,600 --> 00:10:04,830
If it’s an HTTP packet it will mark it as
DSCP AF32 and give it a queue with at least

154
00:10:04,830 --> 00:10:07,370
10% of the link’s bandwidth.

155
00:10:07,370 --> 00:10:13,850
If it’s ICMP traffic it will mark the packet
as DSCP CS2 and give it a queue with at least

156
00:10:13,850 --> 00:10:16,750
5% of the link’s bandwidth.

157
00:10:16,750 --> 00:10:21,540
All other traffic, not matching any of these,
will not be marked and will be forwarded without

158
00:10:21,540 --> 00:10:24,490
any special QoS treatment.

159
00:10:24,490 --> 00:10:29,550
Okay, finally let’s apply this policy map
using a service policy.

160
00:10:29,550 --> 00:10:31,820
INTERFACE G0/0/0.

161
00:10:31,820 --> 00:10:38,930
SERVICE-POLICY OUTPUT,and then the policy
map’s name, G0/0/0_OUT.

162
00:10:38,930 --> 00:10:44,320
That’s it, our QoS configuration is complete.

163
00:10:44,320 --> 00:10:45,730
END.

164
00:10:45,730 --> 00:10:46,830
SHOW RUNNING-CONFIG.

165
00:10:46,830 --> 00:10:53,600
For review, here are the class maps, identifying
the types of traffic we want to match.

166
00:10:53,600 --> 00:10:58,080
Below them is the policy map, which sets the
actions we want to take on the traffic matched

167
00:10:58,080 --> 00:10:59,399
in the class maps.

168
00:10:59,399 --> 00:11:06,890
Finally, I used a service policy to apply
the policy map outbound on G0/0/0.

169
00:11:06,890 --> 00:11:11,580
Now let’s send some traffic from PC1 to
SRV1 and check the markings.

170
00:11:11,580 --> 00:11:13,380
Let me switch to simulation mode.

171
00:11:13,380 --> 00:11:15,959
First, I’ll ping SRV1.

172
00:11:15,959 --> 00:11:21,640
If I use the name jeremysitlab.com it’ll
send a DNS request first, so I’ll just use

173
00:11:21,640 --> 00:11:23,560
the IP address.

174
00:11:23,560 --> 00:11:25,470
PING 10.0.0.100.

175
00:11:25,470 --> 00:11:30,399
Let’s bring the packet to R1, and then check.

176
00:11:30,399 --> 00:11:37,520
In the inbound PDU details tab, the DSCP marking
is 0, but if we check outbound, which is the

177
00:11:37,520 --> 00:11:44,310
state of the packet as it is forwarded by
R1, the marking is now hexadecimal 1 0.

178
00:11:44,310 --> 00:11:46,940
Let me open up this document to show the calculations.

179
00:11:46,940 --> 00:11:55,620
So, we marked it as CS2, and here’s the
binary, 010 000, which is 16 in decimal.

180
00:11:55,620 --> 00:12:02,770
In hexadecimal that is 1 0, so that’s why
we see 1 0 in the DSCP field in packet tracer.

181
00:12:02,770 --> 00:12:07,589
Okay, now let’s send some HTTP traffic from
PC1 to SRV1.

182
00:12:07,589 --> 00:12:13,010
I’ll return to realtime mode, then I’ll
exit out of the command prompt, and then click

183
00:12:13,010 --> 00:12:14,480
on web browser.

184
00:12:14,480 --> 00:12:21,200
I’ll enter the URL here, HTTP://10.0.0.100.

185
00:12:21,200 --> 00:12:26,310
Now, let me switch back to simulation mode.

186
00:12:26,310 --> 00:12:28,050
Now I’ll hit GO in the browser.

187
00:12:28,050 --> 00:12:33,310
Okay, let’s bring the packet to R1, and
then check again.

188
00:12:33,310 --> 00:12:36,459
Inbound PDU details, the marking is 0.

189
00:12:36,459 --> 00:12:39,200
Outbound, and it’s 1c.

190
00:12:39,200 --> 00:12:43,180
Okay we marked it as AF32, let’s check the
math.

191
00:12:43,180 --> 00:12:48,329
Here it is in binary, 011 100.

192
00:12:48,329 --> 00:12:56,220
That’s 28 in decimal, 16+8+4, which is 1c
in hexadecimal, and that’s what’s displayed

193
00:12:56,220 --> 00:12:57,920
in packet tracer.

194
00:12:57,920 --> 00:13:02,649
Okay, I’ll return to realtime mode.

195
00:13:02,649 --> 00:13:04,970
Finally let’s send some HTTPS traffic.

196
00:13:04,970 --> 00:13:11,529
I’ll go back to the web browser, and add
an S after HTTP.

197
00:13:11,529 --> 00:13:15,730
Then I’ll switch back to simulation mode
and hit GO in the browser.

198
00:13:15,730 --> 00:13:19,550
Bring the packet to R1, and let’s check.

199
00:13:19,550 --> 00:13:24,660
So, inbound PDU details, the DSCP marking
is 0.

200
00:13:24,660 --> 00:13:30,269
But outbound, R1 has marked it as DSCP 1A,
which should be AF31.

201
00:13:30,269 --> 00:13:32,350
Let’s check the math.

202
00:13:32,350 --> 00:13:37,990
So, here’s AF31 in binary, 011 010.

203
00:13:37,990 --> 00:13:42,850
That’s 26 in decimal, 16 + 8 + 2.

204
00:13:42,850 --> 00:13:47,750
Convert that to hexadecimal and you get 1A,
and that’s what was displayed in packet

205
00:13:47,750 --> 00:13:49,200
tracer.

206
00:13:49,200 --> 00:13:52,910
Okay, in this lab we took a look at QoS configuration.

207
00:13:52,910 --> 00:13:58,269
Once again, you don’t need to know this
for the CCNA exam, but hopefully it was helpful

208
00:13:58,269 --> 00:14:01,649
to see some basic QoS configurations.

209
00:14:01,649 --> 00:14:07,521
Class maps identify traffic, policy maps specify
what actions to take on that traffic, and

210
00:14:07,521 --> 00:14:10,690
service policies apply the policy maps to
interfaces.

211
00:14:10,690 --> 00:14:12,700
That’s all for this lab.

212
00:14:12,700 --> 00:14:18,680
Usually, we’d take a look at a lab in Boson
NetSim next, but since QoS configuration isn’t

213
00:14:18,680 --> 00:14:23,320
a CCNA exam topic there are no QoS labs in
NetSim for CCNA.

214
00:14:23,320 --> 00:14:30,250
Plus, I think this lab video has been long
enough, so that’s all for now.

215
00:14:30,250 --> 00:14:35,140
Before finishing today’s video I want to
thank my JCNP-level channel members.

216
00:14:35,140 --> 00:14:39,560
To join, please click the ‘Join’ button
under the video.

217
00:14:39,560 --> 00:14:45,339
Thank you to Khoa, Justin, Christopher, Sam,
Anton, Tebogo, Samil, Anand, Pavel, Abraham,

218
00:14:45,339 --> 00:14:51,940
Serge, Njoku, Viktor, Roger, Raj, Kenneth,
Seamus, Brandon, Marcel, Kone, Donald, C Mohd,

219
00:14:51,940 --> 00:14:57,010
Gustavo, Prakaash, Nasir, Erlison, Marko,
Daming, Ed, John, Funnydart, Velvijaykum,

220
00:14:57,010 --> 00:15:01,550
Mark, Yousif, Boson Software, Devin, Yonatan,
and Vance.

221
00:15:01,550 --> 00:15:06,089
Sorry if I pronounced your name incorrectly,
but thank you so much for your support.

222
00:15:06,089 --> 00:15:11,800
This is the list of JCNP-level members at
the time of recording by the way, April 29th

223
00:15:11,800 --> 00:15:12,800
2021.

224
00:15:12,800 --> 00:15:17,010
If you signed up recently and your name isn’t
on here don’t worry, you’ll be in future

225
00:15:17,010 --> 00:15:19,580
videos.

226
00:15:19,580 --> 00:15:21,160
Thank you for watching.

227
00:15:21,160 --> 00:15:25,060
Please subscribe to the channel, like the
video, leave a comment, and share the video

228
00:15:25,060 --> 00:15:28,399
with anyone else studying for the CCNA.

229
00:15:28,399 --> 00:15:31,040
If you want to leave a tip, check the links
in the description.

230
00:15:31,040 --> 00:15:37,029
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

231
00:15:37,029 --> 00:15:38,500
Brave browser.

232
00:15:38,500 --> 00:15:39,070
That's all for now.