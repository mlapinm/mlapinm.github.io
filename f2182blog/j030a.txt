1
00:00:02,050 --> 00:00:04,590
Welcome to Jeremy’s IT Lab.

2
00:00:04,590 --> 00:00:08,000
This is a free, complete course for the CCNA.

3
00:00:08,000 --> 00:00:12,250
If you like these videos, please subscribe
to follow along with the series.

4
00:00:12,250 --> 00:00:17,090
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:17,090 --> 00:00:18,400
of videos.

6
00:00:18,400 --> 00:00:20,400
Thanks for your help.

7
00:00:20,400 --> 00:00:26,840
In this video we will continue with the topic
of VLANs, Virtual Local Area Networks.

8
00:00:26,840 --> 00:00:32,940
In the last video, Day 16, we covered the
absolute basics of VLANs, what a VLAN is,

9
00:00:32,940 --> 00:00:37,079
what their purpose is, and the most basic
VLAN configurations.

10
00:00:37,079 --> 00:00:42,859
However, that’s not really enough information,
there is still more basic knowledge you need

11
00:00:42,859 --> 00:00:44,840
to be able to understand and use VLANs.

12
00:00:44,840 --> 00:00:49,089
That’s what we’ll cover in today’s video.

13
00:00:49,089 --> 00:00:52,109
So let’s take a look at what we’ll cover, exactly.

14
00:00:52,109 --> 00:00:56,850
This will be a fairly long video I think,
but let’s take it step by step.

15
00:00:56,850 --> 00:00:59,390
First of all, what is a trunk port?

16
00:00:59,390 --> 00:01:02,379
I mentioned trunk ports briefly in the last
video.

17
00:01:02,379 --> 00:01:08,190
Whereas an access port belongs to a single
VLAN, trunk ports carry traffic from multiple

18
00:01:08,190 --> 00:01:10,540
VLANs on a single interface.

19
00:01:10,540 --> 00:01:13,900
Next, what is the purpose of trunk ports?

20
00:01:13,900 --> 00:01:16,680
How are they actually used?

21
00:01:16,680 --> 00:01:20,840
Next I will talk about 802.1Q encapsulation.

22
00:01:20,840 --> 00:01:26,390
This is an additonal tag added to an Ethernet
frame which is used to identify which VLAN

23
00:01:26,390 --> 00:01:28,320
traffic belongs to on a trunk.

24
00:01:28,320 --> 00:01:34,520
Next, we’ll go into trunk port configuration,
it’s not so complicated, you only need to

25
00:01:34,520 --> 00:01:36,600
learn a few more commands.

26
00:01:36,600 --> 00:01:40,080
Finally, we’ll cover ‘router on a stick’.

27
00:01:40,080 --> 00:01:44,700
It’s a bit of an odd name, but this is something
you really need to know for your CCNA.

28
00:01:44,700 --> 00:01:49,890
It’s a more efficient way of performing
inter-VLAN routing, an alternative to using

29
00:01:49,890 --> 00:01:52,820
a separate router interface for every VLAN.

30
00:01:52,820 --> 00:01:56,220
So, let’s get started.

31
00:01:56,220 --> 00:02:01,230
For a quick review, here is the network topology
used in the last video.

32
00:02:01,230 --> 00:02:03,940
There is a single switch, and three VLANs.

33
00:02:03,940 --> 00:02:10,679
All of the switch interfaces are access ports
which belong to a single VLAN, either VLAN10,

34
00:02:10,679 --> 00:02:13,700
VLAN20, or VLAN30.

35
00:02:13,700 --> 00:02:18,500
Three interfaces are used to connect to the
router, one for each VLAN.

36
00:02:18,500 --> 00:02:22,170
For this video, let’s use a different network
topology.

37
00:02:22,170 --> 00:02:27,170
Here’s the network topology we’ll start
with for this lesson.

38
00:02:27,170 --> 00:02:29,940
This time, there are two switches used.

39
00:02:29,940 --> 00:02:36,250
Note that VLAN10, the VLAN for the engineering
department, is split between the two switches.

40
00:02:36,250 --> 00:02:42,030
This is very common, as departments in a company
aren’t always split up exactly by location.

41
00:02:42,030 --> 00:02:45,930
You might have some engineers on one
floor of the building, for example, and some

42
00:02:45,930 --> 00:02:47,200
on another floor.

43
00:02:47,200 --> 00:02:50,820
We are still using only access ports.

44
00:02:50,820 --> 00:02:57,600
There are two links between SW1 and SW2, one
for VLAN10, and one for VLAN30.

45
00:02:57,600 --> 00:03:02,630
There must be a link in VLAN10 between the
two switches because VLAN10 PCs are connected

46
00:03:02,630 --> 00:03:09,300
to both SW1 and SW2, and also because the
PCs connected to SW1 need to be able to reach

47
00:03:09,300 --> 00:03:12,450
R1 via SW2.

48
00:03:12,450 --> 00:03:17,870
As for the link in VLAN30, it is necessary
because PCs in VLAN30 also need to be

49
00:03:17,870 --> 00:03:21,540
able to reach R1 via SW2.

50
00:03:21,540 --> 00:03:25,480
There is no link in VLAN20 between SW1 and
SW2.

51
00:03:25,480 --> 00:03:30,490
This is because there are no PCs in VLAN20
connected to SW1.

52
00:03:30,490 --> 00:03:38,730
PCs in VLAN20 can still reach PCs connected
to SW1, R1 will perform the inter-VLAN routing.

53
00:03:38,730 --> 00:03:41,050
Let me demonstrate that inter-VLAN routing.

54
00:03:41,050 --> 00:03:47,430
Let’s say this PC in VLAN20 wants to send
traffic to one of the VLAN10 PCs connected

55
00:03:47,430 --> 00:03:49,460
to SW1.

56
00:03:49,460 --> 00:03:54,400
It will send the frame with a destination
MAC address of R1, its default gateway.

57
00:03:54,400 --> 00:03:58,260
R1 then forwards it back to SW2.

58
00:03:58,260 --> 00:04:04,500
Note that this traffic arrived at SW2 on the
VLAN10 interface, the traffic is now in VLAN10,

59
00:04:04,500 --> 00:04:10,480
so it forwards it to SW1 on the VLAN10 connection
between them, and then SW1 forwards the traffic

60
00:04:10,480 --> 00:04:12,370
to the destination PC.

61
00:04:12,370 --> 00:04:19,190
So, you can see that, even though there isn’t
a VLAN20 connection between SW2 and SW1, the

62
00:04:19,190 --> 00:04:24,449
PC in VLAN20 can still send traffic to the
PC in VLAN10, because the router performs

63
00:04:24,449 --> 00:04:27,479
inter-VLAN routing.

64
00:04:27,479 --> 00:04:33,380
In a small network with few VLANs, it is possible
to use a separate interface for each VLAN

65
00:04:33,380 --> 00:04:37,400
when connecting switches to switches, and
switches to routers.

66
00:04:37,400 --> 00:04:42,129
However, when the number of VLANs increases,
this is not viable.

67
00:04:42,129 --> 00:04:47,009
It will result in wasted interfaces, and often
routers won’t have enough interfaces for

68
00:04:47,009 --> 00:04:48,990
each VLAN.

69
00:04:48,990 --> 00:04:55,419
You can use 'trunk ports' to carry traffic from
multiple VLANs over a single interface.

70
00:04:55,419 --> 00:05:00,460
Once again, these are different than access ports, which belong to a single VLAN only.

71
00:05:00,460 --> 00:05:04,999
Let’s take a quick look at how trunk ports
work.

72
00:05:04,999 --> 00:05:10,820
So, now I’ve replaced those separate connections
for each VLAN, with a single connection

73
00:05:10,820 --> 00:05:14,810
between SW1 and SW2, and SW2 and R1.

74
00:05:14,810 --> 00:05:19,360
However, to make it more clear, let’s add
those colors back.

75
00:05:19,360 --> 00:05:24,029
Okay, so now you can see which VLANs are allowed
on each trunk.

76
00:05:24,029 --> 00:05:29,569
Remember, these are single physical connections,
but traffic from multiple VLANs is allowed

77
00:05:29,569 --> 00:05:30,919
over each trunk.

78
00:05:30,919 --> 00:05:38,779
Let’s say this PC in VLAN10 wants to send
some data to this other PC in VLAN 10.

79
00:05:38,779 --> 00:05:42,819
It sends the traffic to SW2, which then sends
it to SW1.

80
00:05:42,819 --> 00:05:45,590
Now here’s a question.

81
00:05:45,590 --> 00:05:49,939
How does SW1 know which VLAN the traffic belongs
to?

82
00:05:49,939 --> 00:05:55,689
Both VLANs 10 and 30 are allowed on the interface
the traffic was received on, but how does

83
00:05:55,689 --> 00:05:59,139
SW1 know which VLAN it belongs to?

84
00:05:59,139 --> 00:06:02,199
The answer is VLAN tagging.

85
00:06:02,199 --> 00:06:05,889
Switches will ‘tag’ all frames that they
send over a trunk link.

86
00:06:05,889 --> 00:06:09,560
This allows the receiving switch to know which
VLAN the frame belongs to.

87
00:06:09,560 --> 00:06:14,800
In fact, another name for a trunk port is
a ‘tagged’ port, and another name for

88
00:06:14,800 --> 00:06:18,559
an access port is an ‘untagged’ port.

89
00:06:18,559 --> 00:06:22,680
Frames sent over access ports aren’t tagged,
they don’t need to be tagged because the

90
00:06:22,680 --> 00:06:25,779
interface belongs to a single VLAN.

91
00:06:25,779 --> 00:06:31,309
If a frame arrives on a switchport in VLAN10,
the switch knows the frame is in VLAN10.

92
00:06:31,309 --> 00:06:35,699
Let’s talk about those VLAN tags.

93
00:06:35,699 --> 00:06:44,789
There are two main trunking protocols: ISL
(Inter-Switch Link) and IEEE 802.1Q. Usually,

94
00:06:44,789 --> 00:06:49,050
we call 802.1Q ‘dot1q’.

95
00:06:49,050 --> 00:06:55,389
ISL is an old Cisco proprietary protocol,
created before the industry standard IEEE

96
00:06:55,389 --> 00:07:02,809
802.1Q. Dot1q is an industry standard
protocol created by the IEEE (Institute of

97
00:07:02,809 --> 00:07:06,379
Electrical and Electronics Engineers).

98
00:07:06,379 --> 00:07:08,099
Remember the IEEE?

99
00:07:08,100 --> 00:07:10,980
How about IEEE 802.3?

100
00:07:10,980 --> 00:07:15,020
That’s Ethernet, another industry standard
protocol.

101
00:07:15,020 --> 00:07:17,979
You will probably NEVER use ISL in the real
world.

102
00:07:17,979 --> 00:07:21,969
Even modern Cisco equipment doesn’t support
it.

103
00:07:21,969 --> 00:07:25,280
For the CCNA, you only need to learn dot1q.

104
00:07:25,280 --> 00:07:31,260
You should know what ISL is, but you don’t
have to study it like dot1q.

105
00:07:31,260 --> 00:07:36,449
Okay here’s an old slide, back from Day
5 on Ethernet switching.

106
00:07:36,449 --> 00:07:40,289
Do you remember the fields of the Ethernet
header and trailer?

107
00:07:40,289 --> 00:07:44,649
If you don’t, I recommend going back to
check out Day 5’s video, I won’t waste

108
00:07:44,649 --> 00:07:46,939
time explaining it all again here.

109
00:07:46,939 --> 00:07:52,620
However, the reason I am showing this is because
the dot1q tag is actually inserted between

110
00:07:52,620 --> 00:07:54,649
two fields of the Ethernet header.

111
00:07:54,649 --> 00:07:58,050
So, here’s just the Ethernet header.

112
00:07:58,050 --> 00:08:04,409
Dot1q inserts a 4-byte, or 32-bit field between
two fields of this Ethernet header.

113
00:08:04,409 --> 00:08:07,199
Let’s take a look.

114
00:08:07,199 --> 00:08:12,589
As you can see here, the dot1q tag is inserted
between the source MAC address and the type

115
00:08:12,589 --> 00:08:15,479
or length fields of the Ethernet header.

116
00:08:15,479 --> 00:08:18,800
Let’s go over some basics.

117
00:08:18,800 --> 00:08:25,300
As I just said, the 802.1Q tag is inserted
between the Source and Type/Length fields

118
00:08:25,300 --> 00:08:27,830
of the Ethernet frame.

119
00:08:27,830 --> 00:08:31,659
The tag is 4 bytes, or 32 bits, in length.

120
00:08:31,659 --> 00:08:34,740
The tag consists of two main fields.

121
00:08:34,740 --> 00:08:43,349
Those are the Tag Protocol Identifier, TPID,
and the Tag Control Information, TCI.

122
00:08:43,349 --> 00:08:46,280
The TCI itself consists of three sub-fields.

123
00:08:46,280 --> 00:08:51,240
Let’s quickly take a look at each field
of the dot1q tag.

124
00:08:51,240 --> 00:08:57,399
Here’s a diagram of the dot1q tag format,
thanks to wikipedia.

125
00:08:57,399 --> 00:09:03,540
Notice that it can be divided into two halves,
the TPID and TCI I mentioned before.

126
00:09:03,540 --> 00:09:12,430
Also, the TCI can be divided into three sub
fields, the PCP, DEI, and VID.

127
00:09:12,430 --> 00:09:17,160
Okay first up lets look at the TPID field.

128
00:09:17,160 --> 00:09:25,580
The field is 16 bits, or 2 bytes, in length,
taking up half of the 802.1Q tag’s length.

129
00:09:25,580 --> 00:09:31,400
The TPID is ALWAYS set to a value of 0x8100.

130
00:09:31,400 --> 00:09:39,520
Remember, 0x just means hexadecimal, so the actual
value in the field is 8 1 0 0, four hexadecimal

131
00:09:39,520 --> 00:09:41,329
digits.

132
00:09:41,329 --> 00:09:48,800
Each hexadecimal digit is 4 bits, so 4 x 4
is 16, the total length of the field.

133
00:09:48,800 --> 00:09:54,819
This value of 8 1 0 0 indicates that the frame
is dot1q-tagged.

134
00:09:54,819 --> 00:09:59,029
As I just showed you, the dot1q tag comes
after the source MAC field of the Ethernet

135
00:09:59,029 --> 00:10:00,660
frame.

136
00:10:00,660 --> 00:10:04,160
This is where the TYPE field is usually located.

137
00:10:04,160 --> 00:10:09,769
When the switch sees this value of 8 1 0 0
here, it knows it’s a dot1q-tagged frame.

138
00:10:09,769 --> 00:10:14,930
Okay, that’s all for the TPID field.

139
00:10:14,930 --> 00:10:20,490
Next up let’s look at the first field of
the TCI, which is the PCP, or Priority Code

140
00:10:20,490 --> 00:10:21,940
Point.

141
00:10:21,940 --> 00:10:24,670
The field is 3 bits in length.

142
00:10:24,670 --> 00:10:30,930
It is used for Class of Service, CoS, which
prioritizes important traffic in congested

143
00:10:30,930 --> 00:10:31,930
networks.

144
00:10:31,930 --> 00:10:39,310
Don’t worry about this field too much, just
know the name and that it is used for CoS.

145
00:10:39,310 --> 00:10:43,779
Next up is the DEI, Drop Eligible Indicator.

146
00:10:43,779 --> 00:10:47,040
This field is just a single bit in length.

147
00:10:47,040 --> 00:10:51,411
It is used to indicate frames that can be
dropped if the network is congested, which

148
00:10:51,411 --> 00:10:55,350
makes sure more important network traffic
gets through.

149
00:10:55,350 --> 00:10:59,501
Once again, you don’t really need to worry
about this field too much for your CCNA, just

150
00:10:59,501 --> 00:11:01,920
know the name and it’s basic purpose.

151
00:11:01,920 --> 00:11:08,970
Okay, finally is a very important field, the
VID, or VLAN ID field.

152
00:11:08,970 --> 00:11:11,329
It is 12 bits in length.

153
00:11:11,329 --> 00:11:15,920
It is the field that actually identifies the
VLAN the frame belongs to, so you could say

154
00:11:15,920 --> 00:11:20,480
this is the most important field of the dot1q
tag.

155
00:11:20,480 --> 00:11:26,460
Because this field is 12 bits in length, that
means there are 4096 total VLANs, because

156
00:11:26,460 --> 00:11:30,380
2 to the power of 12 equals 4096.

157
00:11:30,380 --> 00:11:37,889
However, the first and last VLANs, 0 and 4095,
are reserved and can’t be used.

158
00:11:37,889 --> 00:11:44,510
Therefore, the actual range of VLANs that
can be used is 1 to 4094.

159
00:11:44,510 --> 00:11:49,470
By the way, Cisco’s proprietary ISL, which
is an alternative protocol for VLAN tagging

160
00:11:49,470 --> 00:11:55,889
over trunk connections, also uses a VLAN range
of 1 to 4094.

161
00:11:55,889 --> 00:12:00,360
As I mentioned before, however, you don’t
really need to know ISL, it’s almost been

162
00:12:00,360 --> 00:12:04,399
completely replaced by the industry standard
dot1q.

163
00:12:04,399 --> 00:12:09,000
So, those are the fields of the dot1q tag.

164
00:12:09,000 --> 00:12:13,399
Take a look at this diagram, do you remember
the names of each section and their basic

165
00:12:13,399 --> 00:12:15,089
function?

166
00:12:15,089 --> 00:12:19,449
If you want to read a little bit about dot1q,
I recommend checking out the wikipedia page

167
00:12:19,449 --> 00:12:21,970
for a solid overview of it.

168
00:12:21,970 --> 00:12:26,899
Okay let me talk about the VLAN ranges a little
bit more.

169
00:12:26,899 --> 00:12:33,860
The range of VLANs, which as I mentioned is
1 to 4094, is divided into two sections.

170
00:12:33,860 --> 00:12:41,050
'normal VLANs', which are numbered from 1 to
1005, and 'extended VLANs', which are numbered

171
00:12:41,050 --> 00:12:44,970
from 1006 to 4094.

172
00:12:44,970 --> 00:12:49,920
Some older devices cannot use the extended
VLAN range, however it’s safe to expect

173
00:12:49,920 --> 00:12:53,519
that modern switches will support the extended
VLAN range.

174
00:12:53,519 --> 00:12:58,269
I work with Cisco switches a lot in my job,
and I’ve never encountered a switch that

175
00:12:58,269 --> 00:13:03,110
doesn’t support the entire range, from 1
to 4094.

176
00:13:03,110 --> 00:13:07,759
Just be aware that some older switches might
not support the extended range.

177
00:13:07,760 --> 00:13:12,440
Okay, so let’s look at this diagram once again.

178
00:13:12,440 --> 00:13:18,820
So, this PC in VLAN10 wants to send
traffic to this other PC in VLAN10.

179
00:13:18,829 --> 00:13:24,220
The traffic goes to SW2, which then forwards
it to SW1, with a tag indicating that the

180
00:13:24,220 --> 00:13:26,519
traffic belongs to VLAN10.

181
00:13:26,519 --> 00:13:32,940
SW1 receives the frame, and because the destination
is also in VLAN10, it will forward the traffic

182
00:13:32,940 --> 00:13:34,310
to the destination.

183
00:13:34,310 --> 00:13:40,250
Remember, a standard layer 2 switch like this
will only forward traffic in the same VLAN,

184
00:13:40,250 --> 00:13:45,970
it will not forward traffic between VLANs.

185
00:13:45,970 --> 00:13:48,870
Let me introduce another concept of dot1q.

186
00:13:48,870 --> 00:13:52,439
Dot1q has a feature called the NATIVE VLAN.

187
00:13:52,439 --> 00:13:56,939
Cisco’s ISL does not have this feature,
by the way.

188
00:13:56,939 --> 00:14:02,560
The native VLAN is VLAN 1 by default on all
trunk ports, however this can be manually

189
00:14:02,560 --> 00:14:04,050
configured on each trunk port.

190
00:14:04,050 --> 00:14:08,949
It’s important to remember that this has
to be configured on each trunk port separately, it’s not

191
00:14:08,949 --> 00:14:11,589
a global configuration on the switch.

192
00:14:11,589 --> 00:14:15,660
Now, what exactly does the native VLAN do?

193
00:14:15,660 --> 00:14:20,860
The switch does not add an 802.1Q tag to frames
in the native VLAN.

194
00:14:20,860 --> 00:14:25,069
It will forward the frame normally, without
adding the dot1q tag to it.

195
00:14:25,069 --> 00:14:29,620
So, what does the receiving switch do when
it receives this untagged frame on a trunk

196
00:14:29,620 --> 00:14:31,250
port?

197
00:14:31,250 --> 00:14:35,449
When a switch receives an untagged frame on
a trunk port, it assumes the frame belongs

198
00:14:35,449 --> 00:14:36,730
to the native VLAN.

199
00:14:36,730 --> 00:14:41,680
So, it’s very important that the native
VLAN matches between switches!

200
00:14:41,680 --> 00:14:47,209
Switches will still forward traffic if there
is a native VLAN mismatch, but problems may

201
00:14:47,209 --> 00:14:48,209
occur.

202
00:14:48,209 --> 00:14:51,430
Let’s look at an example.

203
00:14:51,430 --> 00:14:55,540
This time, let’s say I’ve configured the
native VLAN to be VLAN10 on the trunk link

204
00:14:55,540 --> 00:14:57,930
between SW1 and SW2.

205
00:14:57,930 --> 00:15:01,510
Let’s follow some traffic on the same path
as usual.

206
00:15:01,510 --> 00:15:05,999
This PC sends the traffic to SW2.

207
00:15:05,999 --> 00:15:11,490
It will send the traffic to SW1, but because
it is in the native VLAN, VLAN10, it won’t

208
00:15:11,490 --> 00:15:14,540
tag it as being in VLAN10.

209
00:15:14,540 --> 00:15:20,250
The untagged frame arrives at SW1, which assumes
that the traffic belongs to VLAN10, so it

210
00:15:20,250 --> 00:15:23,839
forwards it to the destination.

211
00:15:23,839 --> 00:15:28,580
This time, let’s look at if there is a native
VLAN mismatch configuration.

212
00:15:28,580 --> 00:15:33,339
On SW2’s interface I’ve configured VLAN10
as the native VLAN.

213
00:15:33,339 --> 00:15:39,259
However, on SW1’s interface I’ve configured
VLAN30 as the native VLAN.

214
00:15:39,259 --> 00:15:41,990
Let’s see what happens.

215
00:15:41,990 --> 00:15:45,500
Up to the point the traffic reaches SW1, it’s
the same.

216
00:15:45,500 --> 00:15:50,220
However, when SW1 receives the frame this
is what it will think.

217
00:15:50,220 --> 00:15:51,920
This frame has no VLAN tag.

218
00:15:51,920 --> 00:15:54,470
Therefore, it must belong to VLAN30.

219
00:15:54,470 --> 00:15:57,899
But, the destination is in VLAN10, not VLAN30.

220
00:15:57,899 --> 00:16:00,069
So, I won’t forward the frame.

221
00:16:00,069 --> 00:16:04,550
So, I think you can see why it is important
that the native VLAN configuration matches

222
00:16:04,550 --> 00:16:06,290
between switches.

223
00:16:06,290 --> 00:16:11,720
Let’s look at another reason why it’s
important for the native VLANs to match.

224
00:16:11,720 --> 00:16:18,029
This time, this PC in VLAN10 wants to reach
this PC in VLAN30.

225
00:16:18,029 --> 00:16:24,309
The PC sends the frame to SW2, which forwards
it to SW1 with a tag of VLAN30, since it’s

226
00:16:24,309 --> 00:16:27,230
not the native VLAN of SW2.

227
00:16:27,230 --> 00:16:31,649
However, VLAN30 is the native VLAN of SW1.

228
00:16:31,649 --> 00:16:36,680
When this frame tagged with VLAN30 arrives,
it will simply discard the frame, and will

229
00:16:36,680 --> 00:16:39,620
not forward it to the destination.

230
00:16:39,620 --> 00:16:44,580
Because it expects all traffic in VLAN 30
to be untagged on the trunk interface, it

231
00:16:44,580 --> 00:16:48,690
will consider the frame to be an error, and
not forward it.

232
00:16:48,690 --> 00:16:52,860
So once again, make sure the native VLAN matches
on each switch!

233
00:16:52,860 --> 00:16:57,480
Okay, let’s finally get into the configuration
of trunk ports.

234
00:16:57,480 --> 00:17:01,939
I’ve added the interface numbers to the
diagram to make it easier to understand.

235
00:17:01,939 --> 00:17:11,140
So, we will be configuring G0/0 on SW1,
and G0/0 and G0/1 on SW2 as trunk ports.

236
00:17:11,140 --> 00:17:15,910
Let’s go on SW1 first.

237
00:17:15,910 --> 00:17:20,450
First let’s look at the most basic trunk
configuration, manually configuring the interface

238
00:17:20,450 --> 00:17:22,950
as a trunk.

239
00:17:22,950 --> 00:17:28,810
After entering interface configuration mode,
use this command, SWITCHPORT MODE TRUNK to

240
00:17:28,810 --> 00:17:31,900
manually configure the interface as a trunk.

241
00:17:31,900 --> 00:17:35,990
However, in this case we got an error message.

242
00:17:35,990 --> 00:17:40,970
Command rejected, an interface whose trunk
encapsulation is ‘AUTO’ can not be configured

243
00:17:40,970 --> 00:17:42,630
to ‘trunk’ mode.

244
00:17:42,630 --> 00:17:44,650
This is a little tricky.

245
00:17:44,650 --> 00:17:48,220
Many modern switches do not support Cisco’s
ISL at all.

246
00:17:48,220 --> 00:17:51,130
They only support dot1q.

247
00:17:51,130 --> 00:17:56,660
Even though ISL is a proprietary Cisco protocol,
even Cisco switches are moving toward supporting

248
00:17:56,660 --> 00:17:58,850
only dot1q.

249
00:17:58,850 --> 00:18:04,830
However, switches that do support both dot1q
and ISL (like the one I’m using in this

250
00:18:04,830 --> 00:18:09,620
example) have a trunk encapsulation of ‘Auto’
by default.

251
00:18:09,620 --> 00:18:15,400
To manually configure the interface as a trunk
port, you must first set the encapsulation

252
00:18:15,400 --> 00:18:18,900
to 802.1Q or ISL.

253
00:18:18,900 --> 00:18:24,540
On switches that only support dot1q, this
is not necessary.

254
00:18:24,540 --> 00:18:28,760
After you set the encapsulation type, you
can then configure the interface as a trunk.

255
00:18:28,760 --> 00:18:32,550
So, let’s see how to set the encapsulation
type.

256
00:18:32,550 --> 00:18:37,280
You use the SWITCHPORT TRUNK ENCAPSULATION
command.

257
00:18:37,280 --> 00:18:40,310
I used the question mark to see the options.

258
00:18:40,310 --> 00:18:44,200
There are dot1q, isl, and negotiate.

259
00:18:44,200 --> 00:18:47,650
Negotiate sets it to AUTO mode, so we cant
choose that.

260
00:18:47,650 --> 00:18:52,500
I will talk more about AUTO mode in the next
lecture video, by the way, so if you have

261
00:18:52,500 --> 00:18:54,780
questions I will answer them there.

262
00:18:54,780 --> 00:19:00,370
I set the encapsulation to dot1q, and then
this time the SWITCHPORT MODE TRUNK command

263
00:19:00,370 --> 00:19:02,410
is accepted.

264
00:19:02,410 --> 00:19:08,050
On switches that only support dot1q, you will
ONLY need the switchport mode trunk command,

265
00:19:08,050 --> 00:19:13,660
but on some switches you will need to set
the encapsulation first.

266
00:19:13,660 --> 00:19:18,190
I used the SHOW INTERFACES TRUNK command to
confirm.

267
00:19:18,190 --> 00:19:21,520
First up, the trunk interfaces are listed
here.

268
00:19:21,520 --> 00:19:26,200
'Mode on' means that the interface was manually
configured as a trunk.

269
00:19:26,200 --> 00:19:30,950
In the next lecture we will look at how a
port can automatically become a trunk without

270
00:19:30,950 --> 00:19:34,390
configuration, but we’ll forget about that
for the moment.

271
00:19:34,390 --> 00:19:40,710
Encapsulation is dot1q as we configured, status
is trunking, and the native VLAN, which I

272
00:19:40,710 --> 00:19:44,620
mentioned before, is the default of 1.

273
00:19:44,620 --> 00:19:48,300
Under that, the VLANs allowed on the trunk
are displayed.

274
00:19:48,300 --> 00:19:53,770
By the default, ALL VLANs, 1 to 4094, are
allowed on the trunk.

275
00:19:53,770 --> 00:19:58,550
However, for security purposes, we might want
to limit which VLANs can be forwarded on the

276
00:19:58,550 --> 00:20:03,330
trunk, so we’ll look at that configuration next.

277
00:20:03,330 --> 00:20:07,930
Next up is VLANs allowed and active in management
domain.

278
00:20:07,930 --> 00:20:13,540
This includes the default VLAN of 1, as well
as VLANs 10 and 30, which I already configured

279
00:20:13,540 --> 00:20:15,300
on this switch.

280
00:20:15,300 --> 00:20:22,590
Note that, although VLAN1, which exists by
default, appears here, VLANs 1002 to 1005,

281
00:20:22,590 --> 00:20:26,220
which I showed you in the previous lecture
video, do not.

282
00:20:26,220 --> 00:20:29,960
As I mentioned before, don’t worry about
those VLANs, they’re not really used in

283
00:20:29,960 --> 00:20:31,930
modern networks.

284
00:20:31,930 --> 00:20:37,040
The last field of the SHOW INTERFACES TRUNK
command is ‘Vlans in spanning tree forwarding

285
00:20:37,040 --> 00:20:39,170
state and not pruned’.

286
00:20:39,170 --> 00:20:44,040
I’ll talk about this in a future lecture,
we don’t know about spanning tree and VLAN

287
00:20:44,040 --> 00:20:46,940
pruning yet.

288
00:20:46,950 --> 00:20:51,060
Here is the command to configure the VLANs
allowed on a trunk.

289
00:20:51,060 --> 00:20:55,640
SWITCHPORT TRUNK ALLOWED VLAN, and then there
are some options.

290
00:20:55,640 --> 00:20:59,250
WORD allows you to simply configure the list
of VLANs allowed.

291
00:20:59,250 --> 00:21:01,580
Let’s see how that works.

292
00:21:01,580 --> 00:21:08,520
So, I used the command SWITCHPORT TRUNK ALLOWED
VLAN 10 comma 30.

293
00:21:08,520 --> 00:21:13,960
Notice that the SHOW INTERFACES TRUNK command
now only shows VLANs 10 and 30 as being allowed

294
00:21:13,960 --> 00:21:16,720
on the trunk.

295
00:21:16,720 --> 00:21:19,610
Now let’s take a look at the ADD option.

296
00:21:19,610 --> 00:21:23,550
This allows you to add allowed VLANs to the
currently existing list.

297
00:21:23,550 --> 00:21:29,860
Currently VLANs 10 and 30 are allowed, let’s
say I also want to add 20, even though no

298
00:21:29,860 --> 00:21:33,990
hosts in VLAN20 are connected to SW1.

299
00:21:33,990 --> 00:21:39,690
This time I used the command SWITCHPORT TRUNK
ALLOWED VLAN ADD 20.

300
00:21:39,690 --> 00:21:45,590
The SHOW INTERFACES TRUNK command now shows
vlans 10,20, and 30 as allowed, so 20 was

301
00:21:45,590 --> 00:21:48,200
added to the list.

302
00:21:48,200 --> 00:21:53,490
Note that, because I haven’t actually created
VLAN20 on this switch, VLAN20 still isn’t

303
00:21:53,490 --> 00:21:59,250
displayed in the VLANs allowed and active
in management domain section.

304
00:21:59,250 --> 00:22:02,200
Next up I’ll show you the ‘remove’ option.

305
00:22:02,200 --> 00:22:06,540
VLAN20 isn’t necessary on this trunk, so
let’s remove it.

306
00:22:06,550 --> 00:22:11,290
I used the command SWITCHPORT TRUNK ALLOWED
VLAN REMOVE 20.

307
00:22:11,290 --> 00:22:17,000
Now, as you can see, VLAN20 has been removed
from the list of allowed VLANs, leaving only

308
00:22:17,000 --> 00:22:21,150
VLANs 10 and 30.

309
00:22:21,150 --> 00:22:23,170
Next up lets look at the ALL option.

310
00:22:23,170 --> 00:22:28,210
I think this one is fairly obvious, but lets
take a look anyway.

311
00:22:28,210 --> 00:22:32,840
This time I used the command SWITCHPORT TRUNK
ALLOWED VLAN ALL.

312
00:22:32,840 --> 00:22:35,590
Now all VLANs are allowed on the trunk.

313
00:22:35,590 --> 00:22:41,860
This is the same as the default state, as
all VLANs are allowed by default.

314
00:22:41,860 --> 00:22:44,720
Next up lets look at the EXCEPT option.

315
00:22:44,720 --> 00:22:47,790
It allows all VLANS except the ones you specify.

316
00:22:47,790 --> 00:22:51,340
Let’s check it out.

317
00:22:51,340 --> 00:22:58,730
I used the command SWITCHPORT TRUNK ALLOWED
VLAN EXCEPT 1 to 5, comma 10.

318
00:22:58,730 --> 00:23:08,420
As you can see it allows all VLANs except
those, so 6 to 9, and 11 to 4094…

319
00:23:08,420 --> 00:23:15,460
Okay, finally let’s look at the NONE option,
which is also pretty easy to understand.

320
00:23:15,520 --> 00:23:21,840
This time I used the command SWITCHPORT TRUNK
ALLOWED VLAN NONE, and as you can see no VLANs

321
00:23:21,840 --> 00:23:23,780
are allowed on the trunk.

322
00:23:23,780 --> 00:23:28,190
This effectively allows no traffic to pass
over the trunk, so now let’s do the actual

323
00:23:28,190 --> 00:23:31,000
settings we want for this network.

324
00:23:31,000 --> 00:23:33,420
Here’s the diagram once more.

325
00:23:33,420 --> 00:23:37,940
SW1 has hosts in VLAN 10 and VLAN 30 connected
to it.

326
00:23:37,950 --> 00:23:42,580
No hosts in VLAN20 are connected, so there’s
no need to allow VLAN20 on the trunk between

327
00:23:42,580 --> 00:23:44,010
SW1 and SW2.

328
00:23:44,010 --> 00:23:49,360
So, let’s set the allowed VLANs to 10 and
30 like we did before.

329
00:23:49,360 --> 00:23:52,490
Okay, there we go.

330
00:23:52,490 --> 00:23:56,640
Now the only VLANs allowed on the trunk are
VLANs 10 and 30.

331
00:23:56,640 --> 00:24:01,500
The reason to do this is for security purposes,
to make sure only traffic in the necessary

332
00:24:01,500 --> 00:24:03,840
VLANs can use that connection.

333
00:24:03,840 --> 00:24:09,950
Also, for network performance purposes, this
avoids unncessary traffic, because broadcasts

334
00:24:09,950 --> 00:24:13,550
and such in other VLANs won’t be sent over
the trunk.

335
00:24:13,550 --> 00:24:17,920
Now, I said I’d show you how to change the
native VLAN.

336
00:24:17,920 --> 00:24:23,960
For security purposes, it is best to change
the native VLAN to an unused VLAN.

337
00:24:23,960 --> 00:24:28,030
Network security will be explained more in-depth
later in the course.

338
00:24:28,030 --> 00:24:32,600
This video is already getting long so I won’t
explain the detailed reasons, but again it’s

339
00:24:32,600 --> 00:24:38,020
about limiting unnecessary traffic in the
network, and controlling what traffic is allowed.

340
00:24:38,020 --> 00:24:42,990
Also, remember to make the native VLAN match
between switches.

341
00:24:42,990 --> 00:24:46,650
Now let’s look at how to change the native
VLAN.

342
00:24:46,650 --> 00:24:53,470
The command to change the native VLAN is SWITCHPORT
TRUNK NATIVE VLAN, followed by the VLAN number.

343
00:24:53,470 --> 00:24:56,950
I chose an unused VLAN, 1001.

344
00:24:56,950 --> 00:25:04,200
As you can see, the native VLAN has now been
changed to 1001.

345
00:25:04,200 --> 00:25:08,820
After configuring this trunk port, I did the SHOW VLAN BRIEF command.

346
00:25:08,820 --> 00:25:14,680
Notice that G0/0 is not listed anywhere.  Not in VLAN10 or VLAN30,

347
00:25:14,680 --> 00:25:18,420
even though those are the VLANs allowed on the trunk.

348
00:25:18,420 --> 00:25:24,300
This is because the SHOW VLAN BRIEF command shows the access ports assigned to each VLAN,

349
00:25:24,300 --> 00:25:26,820
not the trunk ports that allow each VLAN.

350
00:25:26,920 --> 00:25:32,360
Use the SHOW INTERFACES TRUNK command instead to confirm trunk ports.

351
00:25:32,360 --> 00:25:36,800
Now that we’ve seen the configurations
on SW1, I’ll quickly do the configurations

352
00:25:36,800 --> 00:25:39,440
on SW2 as well.

353
00:25:39,450 --> 00:25:45,140
On SW2’s G0/0 interface, we must allow VLANs
10 and 30.

354
00:25:45,140 --> 00:25:51,500
On SW2’s G0/1 interface, however, we must
allow VLAN 20 as well.

355
00:25:51,500 --> 00:25:58,200
Here are the configurations for SW2’s G0/0
interface, the interface connected to SW1.

356
00:25:58,200 --> 00:26:02,020
These are the same as before, so I won’t go
through each one.

357
00:26:02,020 --> 00:26:06,500
You can pause the video if you want to take a look
at them to review.

358
00:26:06,500 --> 00:26:10,440
Now let’s move on to G0/1, which is connected
to R1.

359
00:26:10,440 --> 00:26:13,720
Okay, here are the configurations.

360
00:26:13,720 --> 00:26:20,540
Almost identical to G0/0, except I allowed
VLAN20 in addition to VLAN 10 and 30.

361
00:26:20,550 --> 00:26:27,260
Now, both G0/0 and G0/1 are displayed in the
output of the SHOW INTERFACES TRUNK command.

362
00:26:27,260 --> 00:26:32,380
So, that’s all for the switch configurations
for this lesson.

363
00:26:32,380 --> 00:26:35,660
However, you may be wondering about the router.

364
00:26:35,660 --> 00:26:40,100
In the previous lecture, we used three separate
interfaces for the connection from SW2 to

365
00:26:40,100 --> 00:26:45,790
R1, and assigned a separate IP address to
each one on R1.

366
00:26:45,790 --> 00:26:50,320
Each one served as the default gateway address
for the PCs in each VLAN.

367
00:26:50,320 --> 00:26:55,020
However, now we are using only one physical
connection between the two devices.

368
00:26:55,020 --> 00:26:58,790
So, we must use ‘subinterfaces’ on
R1.

369
00:26:58,790 --> 00:27:01,960
Let’s take a look.

370
00:27:01,960 --> 00:27:05,250
First of all, look at the title of the slide.

371
00:27:05,250 --> 00:27:08,570
ROUTER ON A STICK, also written as ROAS.

372
00:27:08,570 --> 00:27:13,500
It’s a bit of a strange name, but it’s
the name used for this method of inter-VLAN

373
00:27:13,500 --> 00:27:18,460
routing, as there is only a single physical
interface connecting the router and the switch,

374
00:27:18,460 --> 00:27:22,190
and it looks like a ‘stick’ on the network
topology diagram.

375
00:27:22,190 --> 00:27:29,520
So, in this case that one physical interface
being used on R1 to connect to SW2 is G0/0.

376
00:27:29,520 --> 00:27:33,080
It’s connected to G0/1 on SW2.

377
00:27:33,080 --> 00:27:39,540
But, we can actually divide this one physical
interface into three separate subinterfaces,

378
00:27:39,540 --> 00:27:44,500
which will allow us to perform inter-VLAN
routing with only one physical interface.

379
00:27:44,500 --> 00:27:47,680
So, it would look like this.

380
00:27:47,680 --> 00:27:58,500
G0/0.10 for VLAN10, G0/0.20 for VLAN20, and
G0/0.30 for VLAN30.

381
00:27:58,500 --> 00:28:04,510
These three logical subinterfaces are really
one physical interface, G0/0 which is connected

382
00:28:04,510 --> 00:28:11,860
to SW2’s G0/1 interface, but they can operate
like three separate interfaces.

383
00:28:11,860 --> 00:28:15,990
Before we look at the router configurations,
note that we don’t need to do any additional

384
00:28:15,990 --> 00:28:18,810
configurations on SW2.

385
00:28:18,810 --> 00:28:25,190
We already configured G0/1 as a trunk, and
made sure that VLANs 10, 20, and 30 are allowed.

386
00:28:25,190 --> 00:28:31,230
That’s all you need to do on the switch, configure
the interface like a regular trunk.

387
00:28:31,230 --> 00:28:35,710
Now let’s look at the router configurations.

388
00:28:35,710 --> 00:28:37,330
Here are the configurations.

389
00:28:37,330 --> 00:28:43,080
First, make sure the interface is enabled
with ‘no shutdown’, as router interfaces

390
00:28:43,080 --> 00:28:46,060
are disabled by default.

391
00:28:46,060 --> 00:28:48,700
Next up is the first subinterface.

392
00:28:48,700 --> 00:28:52,790
Notice how to enter subinterface configuration
mode.

393
00:28:52,790 --> 00:28:56,410
Interface g0/0 DOT 10.

394
00:28:56,410 --> 00:29:00,860
This subinterface number does not have to
match the VLAN number.

395
00:29:00,860 --> 00:29:06,230
However it is highly recommended that they
do match, to make it easier to understand.

396
00:29:06,230 --> 00:29:11,400
If each subinterface’s number matches the
VLAN number, it’s easy to see which subinterface

397
00:29:11,400 --> 00:29:14,690
is used for each VLAN.

398
00:29:14,690 --> 00:29:20,270
The next command after that is ENCAPSULATION
DOT1Q, followed by the VLAN number, which

399
00:29:20,270 --> 00:29:22,540
is 10 in this case.

400
00:29:22,540 --> 00:29:27,760
This tells the router to treat any arriving
frames tagged with the specified VLAN number

401
00:29:27,760 --> 00:29:31,390
as if they arrived on this sub interface.

402
00:29:31,390 --> 00:29:36,820
If a frame arrives tagged with VLAN10, R1
will behave as if it arrived on interface

403
00:29:36,820 --> 00:29:39,620
G0/0.10.

404
00:29:39,620 --> 00:29:45,510
It will also tag all frames leaving this subinterface
with VLAN10 using dot1q.

405
00:29:45,510 --> 00:29:53,640
Finally, after the encapsulation dot1q command,
simply assign the IP address to the subinterface.

406
00:29:53,640 --> 00:29:56,870
Once again, I have assigned the last usable
address of the subnet.

407
00:29:56,870 --> 00:30:00,530
And that’s all for this subinterface.

408
00:30:00,530 --> 00:30:03,790
Then I did the same thing with the other two
subinterfaces.

409
00:30:03,790 --> 00:30:09,960
Again, I made the subinterface and VLAN numbers
match, and configured the last usable IP address

410
00:30:09,960 --> 00:30:15,370
of each subnet as the IP address of the subinterface.

411
00:30:15,370 --> 00:30:20,010
If you confirm with the SHOW IP INTERFACE
BRIEF command, you can see that each of the

412
00:30:20,010 --> 00:30:25,220
subinterfaces appears, as well as the physical
interface, although the physical interface

413
00:30:25,220 --> 00:30:29,560
itself has no IP address assigned to it.

414
00:30:29,560 --> 00:30:31,920
And here is the routing table.

415
00:30:31,920 --> 00:30:36,020
Notice the connected and local routes are
added just like when IP addresses are added

416
00:30:36,020 --> 00:30:39,150
to regular physical interfaces.

417
00:30:39,150 --> 00:30:46,600
When R1 sends frames out of these subinterfaces,
it adds the VLAN tag configured on the subinterface.

418
00:30:46,600 --> 00:30:54,220
For example, if a packet arrives destined
for the 192.168.1.64/26 subnet, it will send

419
00:30:54,220 --> 00:30:58,600
the packet out of it’s G0/0 interface tagged
with VLAN20.

420
00:30:58,600 --> 00:31:04,820
Okay, let’s review the important points
about router on a stick.

421
00:31:04,820 --> 00:31:10,560
ROAS is used to route between multiple VLANs
using a single interface on the router and

422
00:31:10,560 --> 00:31:12,180
switch.

423
00:31:12,180 --> 00:31:16,130
The switch interface is configured as a regular
trunk.

424
00:31:16,130 --> 00:31:19,830
The router interface is configured using subinterfaces.

425
00:31:19,830 --> 00:31:25,070
You configure the VLAN tag and IP address
on each subinterface.

426
00:31:25,070 --> 00:31:29,770
The router will behave as if frames arriving
with a certain VLAN tag have arrived on the

427
00:31:29,770 --> 00:31:32,990
subinterface configured with that VLAN tag.

428
00:31:32,990 --> 00:31:38,680
Finally, the router will tag frames sent out
of each subinterface with the VLAN tag configured

429
00:31:38,680 --> 00:31:42,250
on the subinterface.

430
00:31:42,250 --> 00:31:46,320
Now that we have configured the router, let’s
return to this diagram to see how interVLAN

431
00:31:46,320 --> 00:31:50,060
routing works with these subinterfaces.

432
00:31:50,060 --> 00:31:55,770
This PC in VLAN10 is trying to reach this
PC in VLAN30.

433
00:31:55,770 --> 00:31:58,060
The frame is sent to SW2.

434
00:31:58,060 --> 00:32:04,810
SW2 sends the frame on its G0/1 interface
to R1, tagging it as being in VLAN10.

435
00:32:04,810 --> 00:32:12,880
R1 receives it on its G0/0 interface, identifying
it as arriving on the G0/0.10 subinterface

436
00:32:12,880 --> 00:32:15,910
because of the VLAN10 tag.

437
00:32:15,910 --> 00:32:27,120
The destination is in the subnet 192.168.1.128/26,
which is connected to R1’s G0/0.30 subinterface,

438
00:32:27,120 --> 00:32:31,070
so it sends the frame out of its G0/0 interface.

439
00:32:31,070 --> 00:32:37,120
It tags it as VLAN30 because that is what
was configured on the G0/0.30 subinterface.

440
00:32:37,120 --> 00:32:42,490
SW2 then forwards it to SW1, tagging it as
VLAN30 over the trunk.

441
00:32:42,490 --> 00:32:45,530
SW1 then forwards the frame to the destination.

442
00:32:45,530 --> 00:32:50,450
Okay, let’s quickly review before moving
on to today’s quiz.

443
00:32:50,450 --> 00:32:55,340
I think I say this after every video these
days, but there was a lot of information in

444
00:32:55,340 --> 00:32:56,340
this video.

445
00:32:56,340 --> 00:33:01,090
Please rewatch certain parts of the video
if you need to, and use the supplementary

446
00:33:01,090 --> 00:33:05,250
materials to help you practice and review
as well.

447
00:33:05,250 --> 00:33:09,030
First off, we answered the question WHAT IS
A TRUNK PORT?

448
00:33:09,030 --> 00:33:14,600
It’s a switch interface that carries traffic
over multiple VLANs.

449
00:33:14,600 --> 00:33:17,810
We also answered what the purpose of a trunk
port is.

450
00:33:17,810 --> 00:33:23,110
It allows switches to forward traffic from
multiple VLANs over a single physical interface,

451
00:33:23,110 --> 00:33:27,610
instead of having to use a separate physical
interface for every single VLAN.

452
00:33:27,610 --> 00:33:34,050
I also introduced 802.1Q encapsulation, which
is a tag inserted into the Ethernet frame

453
00:33:34,050 --> 00:33:39,330
and is used to identify which VLAN the frame
belongs to when sent over a trunk port.

454
00:33:39,330 --> 00:33:44,630
I showed how to configure trunk ports on a
Cisco switch, including the encapsulation

455
00:33:44,630 --> 00:33:47,700
type, allowed VLANs, and native VLAN.

456
00:33:47,700 --> 00:33:53,210
Finally, I showed you how to configure ROUTER
ON A STICK, which involves configuring multiple

457
00:33:53,210 --> 00:33:58,900
subinterfaces on a single physical interface,
which again allows for traffic from multiple

458
00:33:58,900 --> 00:34:03,830
VLANs and subnets to be routed without having
to use a separate physical interface for each

459
00:34:03,830 --> 00:34:04,830
one.

460
00:34:04,830 --> 00:34:07,320
It’s like a trunk port on a router.

461
00:34:07,320 --> 00:34:12,210
Finally, let’s move on to today’s quiz.

462
00:34:12,210 --> 00:34:14,879
First up, question 1.

463
00:34:14,879 --> 00:34:21,270
You want to configure SW1 to send VLAN10 frames
untagged over its GigabitEthernet0/1 interface,

464
00:34:21,270 --> 00:34:22,810
a trunk.

465
00:34:22,810 --> 00:34:24,620
Which command is appropriate?

466
00:34:24,620 --> 00:34:29,379
A, encapsulaton dot1q 10.

467
00:34:29,379 --> 00:34:33,860
B, switchport trunk allowed vlan 10.

468
00:34:33,860 --> 00:34:37,909
C, switchport trunk allowed vlan add 10.

469
00:34:37,909 --> 00:34:42,500
D, switchport trunk native vlan 10.

470
00:34:42,500 --> 00:34:49,380
Pause the video to think about your answer.

471
00:34:49,380 --> 00:34:53,659
The answer is D, switchport trunk native VLAN10.

472
00:34:53,659 --> 00:35:00,120
A, encapsulation dot1q 10 is used on a router
subinterface to specify which VLAN it belongs

473
00:35:00,120 --> 00:35:01,640
to.

474
00:35:01,640 --> 00:35:06,070
B and C are used to modify the VLANs allowed
on the trunk.

475
00:35:06,070 --> 00:35:11,210
D is used to specify the native VLAN, and
traffic in the native VLAN is sent untagged

476
00:35:11,210 --> 00:35:13,430
over the trunk.

477
00:35:13,430 --> 00:35:17,320
Next let’s go to question 2.

478
00:35:17,320 --> 00:35:22,070
After modifying the VLANs allowed on a trunk
interface, you want to return it to the default

479
00:35:22,070 --> 00:35:23,120
state.

480
00:35:23,120 --> 00:35:25,130
Which command will do this?

481
00:35:25,130 --> 00:35:29,260
A, switchport trunk allowed vlan default.

482
00:35:29,260 --> 00:35:33,870
B, switchport trunk allowed vlan all.

483
00:35:33,870 --> 00:35:38,470
C, switchport trunk allowed vlan none.

484
00:35:38,470 --> 00:35:45,870
Or D, switchport trunk allowed vlan 1 and
1001 to 1005.

485
00:35:45,870 --> 00:35:52,500
Pause the video to think about your answer.

486
00:35:52,500 --> 00:35:57,070
The answer is B, switchport trunk allowed
VLAN all.

487
00:35:57,070 --> 00:36:02,850
By default all VLANs are allowed on a trunk
port, so switchport trunk allowed vlan all

488
00:36:02,850 --> 00:36:05,110
will return it to the default state.

489
00:36:05,110 --> 00:36:11,490
Answer D, by the way, lists the VLANs that
exist on a Cisco switch by default, but that’s

490
00:36:11,490 --> 00:36:14,430
different than the VLANs allowed on a trunk
by default.

491
00:36:14,430 --> 00:36:18,600
Okat, let's go to question 3.

492
00:36:18,600 --> 00:36:23,300
You try to configure an interface on a Cisco
switch as a trunk port with the command switchport

493
00:36:23,300 --> 00:36:27,020
mode trunk, but the command is rejected.

494
00:36:27,020 --> 00:36:29,650
Which command might fix this issue?

495
00:36:29,650 --> 00:36:33,360
A, switch port mode trunk.

496
00:36:33,360 --> 00:36:39,140
B, switchport trunk encapsulation 802.1q.

497
00:36:39,140 --> 00:36:44,810
C, switchport trunk encapsulation dot1q.

498
00:36:44,810 --> 00:36:49,150
Or D, switchport trunk encapsulation auto.

499
00:36:49,150 --> 00:36:55,120
Pause the video to think about your answer.

500
00:36:55,120 --> 00:37:00,020
The answer is C, switchport trunk encapsulation
dot1q.

501
00:37:00,020 --> 00:37:06,481
On Cisco switches that support both 802.1Q
and ISL encapsulations for trunk ports, if

502
00:37:06,481 --> 00:37:10,830
you want to manually configure the interface
as a trunk you have to manually specify the

503
00:37:10,830 --> 00:37:16,570
encapsulation type with SWITCHPORT TRUNK
ENCAPSULATION DOT1Q.

504
00:37:16,570 --> 00:37:20,740
You could use ISL instead, but ISL is almost
never used.

505
00:37:20,740 --> 00:37:24,890
Okay, let’s go to question 4.

506
00:37:24,890 --> 00:37:30,570
Which field of the 802.1Q tag identifies the
VLAN ID of the frame?

507
00:37:30,570 --> 00:37:33,210
A, TPID.

508
00:37:33,210 --> 00:37:35,860
B, VID.

509
00:37:35,860 --> 00:37:38,510
C, TCI.

510
00:37:38,510 --> 00:37:40,980
Or D, VLN.

511
00:37:40,980 --> 00:37:46,820
Pause the video to think about your answer.

512
00:37:46,820 --> 00:37:49,460
The answer is B, VID.

513
00:37:49,460 --> 00:37:57,460
VID stands for VLAN ID, it is 12 bits long
and identifies the VLAN number.

514
00:37:57,460 --> 00:38:05,330
TPID stands for tag protocol identifier, and
uses a hexadecimal value of 8100 to identify

515
00:38:05,330 --> 00:38:09,270
the frame as 802.1Q-tagged.

516
00:38:09,270 --> 00:38:15,140
PCP stands for priority code point and is
used for class of service, not to tag the

517
00:38:15,140 --> 00:38:16,810
VLAN ID.

518
00:38:16,810 --> 00:38:21,720
D, VLN, is not a real field of the 802.1Q
tag.

519
00:38:21,720 --> 00:38:27,620
Let’s go to the last question, question
5.

520
00:38:27,620 --> 00:38:34,020
You configured switchport trunk allowed vlan
add 10 on an interface, but VLAN10 doesn’t

521
00:38:34,020 --> 00:38:39,640
appear in the Vlans allowed and active in
management domain section of the show interfaces

522
00:38:39,640 --> 00:38:42,230
trunk command output.

523
00:38:42,230 --> 00:38:43,530
What might be the reason?

524
00:38:43,530 --> 00:38:48,120
A, VLAN10 doesn’t exist on the switch.

525
00:38:48,120 --> 00:38:51,080
B, the command is invalid.

526
00:38:51,080 --> 00:38:59,620
C, the command should be switchport trunk
allowed vlan 10. or D, vlan10 is reserved

527
00:38:59,620 --> 00:39:01,900
and cannot be used.

528
00:39:01,900 --> 00:39:07,760
Pause the video to think about your answer.

529
00:39:07,760 --> 00:39:12,490
The answer is A, VLAN10 doesn’t exist on
the switch.

530
00:39:12,490 --> 00:39:17,460
If a VLAN doesn’t exist on the switch, even
if it is allowed on the trunk, it won’t

531
00:39:17,460 --> 00:39:22,780
appear in the 'Vlans allowed and active in
management domain' section of the show interfaces

532
00:39:22,780 --> 00:39:24,330
trunk command output.

533
00:39:24,330 --> 00:39:27,130
That’s all for the quiz.

534
00:39:27,130 --> 00:39:32,590
Okay, so as always there will be supplementary
materials for this video.

535
00:39:32,590 --> 00:39:36,620
There will be flash cards to use with the
software ANKI, to help you remember things

536
00:39:36,620 --> 00:39:39,200
learned in this video.

537
00:39:39,200 --> 00:39:43,500
There will also be a packet tracer practice
lab so you can practice the configurations

538
00:39:43,500 --> 00:39:45,610
learned in this video.

539
00:39:45,610 --> 00:39:49,240
That will be in a separate video.

540
00:39:49,240 --> 00:39:55,790
Before finishing this video, I want to think
all of my JCNP-level channel members.

541
00:39:55,790 --> 00:40:05,500
Thank you to Charlsetta, Lito, Yonatan, Mike,
Aleksander, Vance, Yousif, Samil, Boson Software,

542
00:40:05,500 --> 00:40:07,950
Sidi, Magrathea, and Devin.

543
00:40:07,950 --> 00:40:14,380
Sorry if I pronounced your names incorrectly,
but thank you so much for your support.

544
00:40:14,380 --> 00:40:20,750
Extra shoutout to Boson software, I absolutely
love their ExSim practice exams and NetSim

545
00:40:20,750 --> 00:40:27,270
network simulator, check out the links in
the video description for their products.

546
00:40:27,270 --> 00:40:28,850
Thank you for watching.

547
00:40:28,850 --> 00:40:32,750
Please subscribe to the channel, like the
video, leave a comment, and share the video

548
00:40:32,750 --> 00:40:36,100
with anyone else studying for the CCNA.

549
00:40:36,100 --> 00:40:38,700
If you want to leave a tip, check the links
in the description.

550
00:40:38,700 --> 00:40:44,850
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

551
00:40:44,850 --> 00:40:46,200
Brave browser.

552
00:40:46,200 --> 00:40:46,820
That's all for now.