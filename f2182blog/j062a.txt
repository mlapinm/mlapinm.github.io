1
00:00:01,420 --> 00:00:04,120
Welcome to Jeremy’s IT Lab.

2
00:00:04,120 --> 00:00:07,290
This is a free, complete course for the CCNA.

3
00:00:07,290 --> 00:00:11,100
If you like these videos, please subscribe
to follow along with the series.

4
00:00:11,100 --> 00:00:15,880
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:15,880 --> 00:00:17,150
of videos.

6
00:00:17,150 --> 00:00:19,240
Thanks for your help.

7
00:00:19,240 --> 00:00:22,640
In this video we will wrap up our studies
of IPv6.

8
00:00:22,640 --> 00:00:27,390
Honestly, there is so much more I want to
cover, but this video will be enough to wrap

9
00:00:27,390 --> 00:00:31,340
up our IPv6 studies for the CCNA.

10
00:00:31,340 --> 00:00:36,010
However, in future videos I will continue
to reference and use IPv6.

11
00:00:36,010 --> 00:00:42,139
Some labs will use IPv4, some will use IPv6,
some will use both.

12
00:00:42,139 --> 00:00:44,549
Same for the examples in my lectures.

13
00:00:44,549 --> 00:00:49,629
A lot of people studying for the CCNA don’t
feel confident about IPv6, and I think it’s

14
00:00:49,629 --> 00:00:53,760
just because they don’t spend a lot of time
getting familiar with it.

15
00:00:53,760 --> 00:01:00,799
Outside of a few IPv6-specific lessons everything
else is IPv4 in most courses.

16
00:01:00,799 --> 00:01:07,320
To review, here are the IPv6-specific topics
on the official CCNA exam topics list.

17
00:01:07,320 --> 00:01:12,259
The focus of today’s video will be topic
3.3, applying the static routing concepts

18
00:01:12,259 --> 00:01:16,310
you already know from IPv4 to IPv6.

19
00:01:16,310 --> 00:01:20,610
Here’s what we’ll cover in this video.

20
00:01:20,610 --> 00:01:23,870
First up, a correction about my previous IPv6
videos.

21
00:01:23,870 --> 00:01:28,460
It’s not a big mistake, in fact it’s a
mistake that even Cisco makes, but it’s

22
00:01:28,460 --> 00:01:30,799
something you should know.

23
00:01:30,799 --> 00:01:33,820
Then we’ll very briefly cover the IPv6 header.

24
00:01:33,820 --> 00:01:39,789
We’ll also cover neighbor discovery protocol,
NDP, which replaced ARP in IPv6.

25
00:01:39,789 --> 00:01:44,780
That’s right, IPv6 doesn’t use ARP.

26
00:01:44,780 --> 00:01:47,200
Next we’ll cover something called SLAAC.

27
00:01:47,200 --> 00:01:52,720
Finally, the main topic of today’s video
is IPv6 static routing.

28
00:01:52,720 --> 00:01:57,369
Although it’s probably the most important
section, it’s right in the exam topics list,

29
00:01:57,369 --> 00:02:01,539
because you already understand IPv4 static
routes, it should be simple to learn them

30
00:02:01,539 --> 00:02:04,200
in IPv6.

31
00:02:04,200 --> 00:02:08,420
As always, make sure to watch until the end
of the quiz for a bonus question from Boson

32
00:02:08,420 --> 00:02:14,480
ExSim for CCNA, the best practice exams for
the CCNA and the ones I used when studying

33
00:02:14,480 --> 00:02:16,319
for my exams.

34
00:02:16,319 --> 00:02:20,280
To check out ExSim, follow the link in the
video description.

35
00:02:20,280 --> 00:02:26,790
So, that correction I wanted to make is about
IPv6 address representation, how we write

36
00:02:26,790 --> 00:02:29,340
IPv6 addresses.

37
00:02:29,340 --> 00:02:33,239
When making these videos I do a lot of research
to make sure my information is as accurate

38
00:02:33,239 --> 00:02:36,939
as possible, and I often learn many new things
while making them.

39
00:02:36,939 --> 00:02:42,760
While preparing these IPv6 videos, I was looking
through some RFCs.

40
00:02:42,760 --> 00:02:45,909
Let me briefly explain what an RFC is.

41
00:02:45,909 --> 00:02:53,290
An RFC, which stands for Request for Comments,
is a publication from the ISOC, Internet Society,

42
00:02:53,290 --> 00:02:59,041
and associated organizations like the IETF,
Internet Engineering Task Force, and these

43
00:02:59,041 --> 00:03:05,430
RFCs are the official documents of Internet
specifications, protocols, procedures, etc.

44
00:03:05,430 --> 00:03:10,900
So, if you really want to go in-depth about
OSPF, for example, and learn all you can about

45
00:03:10,900 --> 00:03:17,150
it, there are tons of RFCs that document OSPF,
how it works, etc.

46
00:03:17,150 --> 00:03:25,860
RFC 5952 is titled ‘A Recommendation for
IPv6 Address Text Representation’.

47
00:03:25,860 --> 00:03:30,879
Before this RFC, IPv6 address representation
was more flexible.

48
00:03:30,879 --> 00:03:35,379
For example, you could remove leading 0s from
the quartets of the address, or just leave

49
00:03:35,379 --> 00:03:36,800
them there.

50
00:03:36,800 --> 00:03:41,439
You could replace all-0 quartets with a double
colon, or choose not to.

51
00:03:41,439 --> 00:03:45,769
You could use upper-case hexadecimal A, B,
C, D, E, and F, or lower-case.

52
00:03:45,769 --> 00:03:54,210
However, RFC 5952 suggests standardizing IPv6
address representation, so we all write them

53
00:03:54,210 --> 00:03:56,540
the same.

54
00:03:56,540 --> 00:04:00,010
Here are some of the details from that RFC.

55
00:04:00,010 --> 00:04:02,110
Leading 0s MUST be removed.

56
00:04:02,110 --> 00:04:09,230
So, this IPv6 address MUST be represented
like this, with all of the leading 0s removed.

57
00:04:09,230 --> 00:04:14,329
The double colon MUST be used to shorten the
longest string of all-0 quartets.

58
00:04:14,329 --> 00:04:18,350
But if there is just a single all-0 quartet,
don’t use the double-colon.

59
00:04:18,350 --> 00:04:22,780
So, this IPv6 address has two choices for
the double colon.

60
00:04:22,780 --> 00:04:27,540
On the left there are three all-0 quartets,
on the right there are only two.

61
00:04:27,540 --> 00:04:32,340
So, we MUST shorten it like this, using the
double colon on the left.

62
00:04:32,340 --> 00:04:37,450
Then, if there are two equal-length choices
for the double colon, use the double colon

63
00:04:37,450 --> 00:04:39,190
to shorten the one on the left.

64
00:04:39,190 --> 00:04:44,570
So, this address has two choices for the double
colon, both are two quartets of 0s.

65
00:04:44,570 --> 00:04:47,720
So, we must shorten the one on the left.

66
00:04:47,720 --> 00:04:53,660
Finally, this is the main one I wanted to
share, hexadecimal characters a, b, c, d,

67
00:04:53,660 --> 00:04:58,980
e, and f MUST be written using lower-case,
not upper-case.

68
00:04:58,980 --> 00:05:04,170
In my videos I have been using both, sometimes
upper-case, sometimes lower-case, but from

69
00:05:04,170 --> 00:05:05,820
now on I will use only lower-case.

70
00:05:05,820 --> 00:05:10,110
However, I’m not the only one who wasn’t
following this rule.

71
00:05:10,110 --> 00:05:14,700
Here’s a screenshot from a Cisco router,
notice the upper-case characters.

72
00:05:14,700 --> 00:05:17,990
So, this is technically incorrect.

73
00:05:17,990 --> 00:05:23,230
However, because even Cisco’s devices don’t
follow this rule, it’s not a big deal if

74
00:05:23,230 --> 00:05:24,870
you write them in upper-case characters.

75
00:05:24,870 --> 00:05:30,000
I guess this RFC isn’t very well-known,
and it’s not a hardfast rule.

76
00:05:30,000 --> 00:05:32,870
But let’s try to follow the standard from
now on.

77
00:05:32,870 --> 00:05:38,490
Okay, let’s move on to take a brief look
at the IPv6 header.

78
00:05:38,490 --> 00:05:41,550
Here it is, thanks to Wikipedia for the chart.

79
00:05:41,550 --> 00:05:45,900
To compare, here’s the IPv4 header we studied
earlier in the course.

80
00:05:45,900 --> 00:05:47,710
Lots of different fields.

81
00:05:47,710 --> 00:05:50,520
Now take another look at the IPv6 header.

82
00:05:50,520 --> 00:05:52,250
Much simpler, right?

83
00:05:52,250 --> 00:05:58,130
One thing that makes it simpler is this word
here, ‘fixed’ header format.

84
00:05:58,130 --> 00:06:02,580
The IPv4 header has a variable header length,
from 20 to 60 bytes.

85
00:06:02,580 --> 00:06:06,360
But the IPv6 header has a fixed size of 40
bytes.

86
00:06:06,360 --> 00:06:10,800
That’s why there is a ‘payload length’
field, indicating the length of the encapsulated

87
00:06:10,800 --> 00:06:15,280
Layer 4 segment, but no ‘header length’
field like there is for IPv4.

88
00:06:15,280 --> 00:06:18,340
It’s always 40 bytes.

89
00:06:18,340 --> 00:06:23,210
The processing of the IPv6 header is much
easier for routers, so performance is generally

90
00:06:23,210 --> 00:06:24,210
improved.

91
00:06:24,210 --> 00:06:28,800
Okay, I won’t spend a whole lecture on this
header like I did for IPv4, but let me give

92
00:06:28,800 --> 00:06:32,280
a brief description of each field.

93
00:06:32,280 --> 00:06:34,740
First up, the version field, just like in
IPv4.

94
00:06:34,740 --> 00:06:37,380
It’s 4 bits in length.

95
00:06:37,380 --> 00:06:40,650
It indicates the version of IP that is used.

96
00:06:40,650 --> 00:06:47,910
Because this is IPv6, this field will always
be set to 6, or binary 0110 indicating IP

97
00:06:47,910 --> 00:06:49,830
version 6.

98
00:06:49,830 --> 00:06:53,130
And that’s all there is to say about this
field.

99
00:06:53,130 --> 00:06:55,100
Next up is the Traffic Class field.

100
00:06:55,100 --> 00:06:56,880
It’s 8 bits in length.

101
00:06:56,880 --> 00:07:02,810
It’s used for QoS, quality of service, to
indicate high-priority traffic.

102
00:07:02,810 --> 00:07:08,820
For example, IP phone traffic, live video
calls, etc, will have a traffic class value

103
00:07:08,820 --> 00:07:11,580
which gives them priority over other traffic.

104
00:07:11,580 --> 00:07:17,640
QoS is something we’ll cover later in the
course, so don’t worry about it at the moment.

105
00:07:17,640 --> 00:07:19,740
Next up is the ‘flow label’ field.

106
00:07:19,740 --> 00:07:21,450
It’s 20 bits in length.

107
00:07:21,450 --> 00:07:26,500
It’s used to identify specific traffic flows,
which are communications between a specific

108
00:07:26,500 --> 00:07:30,890
source and destination, like the interaction
between a server and a client downloading

109
00:07:30,890 --> 00:07:31,940
a file.

110
00:07:31,940 --> 00:07:36,030
I briefly talked about flows in the TCP/UDP
video.

111
00:07:36,030 --> 00:07:39,850
Okay, that’s all for this field.

112
00:07:39,850 --> 00:07:42,030
Next up is the ‘payload length’ field.

113
00:07:42,030 --> 00:07:44,500
It’s 16 bits in length.

114
00:07:44,500 --> 00:07:48,410
It indicates the length of the payload, the
Layer 4 segment that is encapsulated in the

115
00:07:48,410 --> 00:07:50,740
IPv6 header, in bytes.

116
00:07:50,740 --> 00:07:57,490
So, a value of 1024 in this field would mean
that the encapsulated segment is 1024 bytes

117
00:07:57,490 --> 00:08:00,390
in length, for example.

118
00:08:00,390 --> 00:08:06,060
The length of the IPv6 header itself isn’t
included, because it’s always 40 bytes,

119
00:08:06,060 --> 00:08:07,620
it’s fixed.

120
00:08:07,620 --> 00:08:09,350
Next is the ‘next header’ field.

121
00:08:09,350 --> 00:08:11,810
It’s 8 bits in length.

122
00:08:11,810 --> 00:08:16,211
It indicates the type of the ‘next header’,
the header of the encapsulated segment, for

123
00:08:16,211 --> 00:08:19,000
example TCP or UDP.

124
00:08:19,000 --> 00:08:21,940
It has the same function as the ‘protocol’
field of the IPv4 header.

125
00:08:21,940 --> 00:08:26,990
The next field is the ‘hop limit’ field.

126
00:08:26,990 --> 00:08:29,210
Its length is 8 bits.

127
00:08:29,210 --> 00:08:33,820
The value in this field is decremented by
one by each router that forwards it.

128
00:08:33,820 --> 00:08:36,899
If the value reaches 0, the packet is discarded.

129
00:08:36,899 --> 00:08:42,889
So, the function is the same as the IPv4 header’s
TTL field.

130
00:08:42,889 --> 00:08:48,610
Finally, the last two fields are the source
address and destination address fields.

131
00:08:48,610 --> 00:08:52,279
As you already know, they are 128 bits in
length each.

132
00:08:52,279 --> 00:08:57,660
128 bits for the source, 128 bits for the
destination.

133
00:08:57,660 --> 00:09:02,350
These fields contain the IPv6 addresses of
the packet’s source and the packet’s intended

134
00:09:02,350 --> 00:09:03,350
destination.

135
00:09:03,350 --> 00:09:09,720
Okay, so that was a very brief explanation
of the IPv6 header and its fields.

136
00:09:09,720 --> 00:09:12,519
I will include flashcards to help you remember
the fields.

137
00:09:12,519 --> 00:09:18,310
However, I doubt that you will get any direct
questions about the IPv6 header on the CCNA

138
00:09:18,310 --> 00:09:19,310
exam.

139
00:09:19,310 --> 00:09:23,410
But I still think it’s good foundational
knowledge for network engineers, so I recommend

140
00:09:23,410 --> 00:09:25,879
not deleting the cards.

141
00:09:25,879 --> 00:09:30,750
Okay, the next topic is something I didn’t
specifically mention in the beginning of the

142
00:09:30,750 --> 00:09:31,750
video.

143
00:09:31,750 --> 00:09:38,420
However, it’s an important part of Neighbor
Discovery Protocol, NDP, which replaces ARP.

144
00:09:38,420 --> 00:09:41,800
First let me just show you how the address
is formed, then when I talk about NDP you’ll

145
00:09:41,800 --> 00:09:44,540
see how the address is used.

146
00:09:44,540 --> 00:09:50,730
An IPv6 solicited-node multicast address is
calculated from a unicast address.

147
00:09:50,730 --> 00:09:53,209
Here’s how it’s calculated.

148
00:09:53,209 --> 00:10:01,000
The address begins with a fixed prefix, ff02::1:ff
if you shorten it properly, and then the last

149
00:10:01,000 --> 00:10:07,589
6 hex digits of the unicast address this solicited-node
address is being generated from.

150
00:10:07,589 --> 00:10:11,220
For example, here’s a unicast IPv6 address.

151
00:10:11,220 --> 00:10:16,880
To generate a solicited-node multicast address
from it, we take these last 6 digits, and

152
00:10:16,880 --> 00:10:21,160
then add ff02::1:ff to them.

153
00:10:21,160 --> 00:10:25,880
That’s it, that’s how you generate a solicited-node
multicast address.

154
00:10:25,880 --> 00:10:27,829
Here’s another one.

155
00:10:27,829 --> 00:10:31,220
Try to write out the solicited-node multicast
address yourself.

156
00:10:31,220 --> 00:10:34,680
Okay, let’s check.

157
00:10:34,680 --> 00:10:36,560
These are the last 6 digits.

158
00:10:36,560 --> 00:10:42,040
Add ff02::1:ff to them, and you get the answer.

159
00:10:42,040 --> 00:10:48,029
I showed you this output in the previous video
when talking about IPv6 multicast addresses.

160
00:10:48,029 --> 00:10:55,690
I pointed out that routers join the FF02::1
and ::2 multicast groups by default.

161
00:10:55,690 --> 00:11:01,220
But notice this other multicast group that
R1 joined.

162
00:11:01,220 --> 00:11:03,160
FF02::1:FF36:8500.

163
00:11:03,160 --> 00:11:08,790
That’s a solicited-node multicast address.

164
00:11:08,790 --> 00:11:13,770
FF02::1:FF, and then 6 more hex digits.

165
00:11:13,770 --> 00:11:17,959
Those last six digits are the same as in this
global unicast address on the interface.

166
00:11:17,959 --> 00:11:24,069
Okay, so now you know how solicited-node multicast
addresses are calculated, next let me briefly

167
00:11:24,069 --> 00:11:30,100
introduce NDP and show you how these addresses
are used.

168
00:11:30,100 --> 00:11:34,620
Neighbor Discovery Protocol, NDP, is a protocol
used with IPv6.

169
00:11:34,620 --> 00:11:40,329
It’s not directly listed on the exam topics
list, but just as ARP is an essential part

170
00:11:40,329 --> 00:11:46,699
of IPv4 routing, NDP is an essential part
of IPv6 routing, so you should have at least

171
00:11:46,699 --> 00:11:49,500
a basic understanding of it.

172
00:11:49,500 --> 00:11:54,250
It has various functions, and one of those
functions is to replace ARP, which is no longer

173
00:11:54,250 --> 00:11:55,250
used in IPv6.

174
00:11:55,250 --> 00:12:03,970
The ARP-like function of NDP uses ICMPv6 and
solicited-node multicast addresses to learn

175
00:12:03,970 --> 00:12:06,670
the MAC address of other hosts.

176
00:12:06,670 --> 00:12:13,999
As you probably remember, ARP in IPv4 uses
broadcast messages for the ARP requests.

177
00:12:13,999 --> 00:12:18,069
Solicited-node multicast messages are much
more efficient, being addressed to a specific

178
00:12:18,069 --> 00:12:22,749
host, unlike a broadcast which is for all
hosts.

179
00:12:22,749 --> 00:12:26,029
In the process, two message types are used.

180
00:12:26,029 --> 00:12:33,850
The first one is the neighbor solicitation
message, the NDP equivalent of an ARP request.

181
00:12:33,850 --> 00:12:39,029
Note that the NDP neighbor solicitation message
is ICMPv6 Type 135.

182
00:12:39,029 --> 00:12:44,850
I haven’t talked much about ICMP in this
course, it’s a protocol that involves various

183
00:12:44,850 --> 00:12:47,959
messages, perhaps the most famous one being
ping.

184
00:12:47,959 --> 00:12:53,529
After I finish the course I’ll probably
make some extra videos about ICMP.

185
00:12:53,529 --> 00:13:01,220
Anyway, IPv6 has its own version of ICMP,
and the neighbor solicitation message is ICMP

186
00:13:01,220 --> 00:13:03,620
Type 135.

187
00:13:03,620 --> 00:13:09,059
The other message is the neighbor advertisement
message, the NDP equivalent of an ARP reply.

188
00:13:09,059 --> 00:13:13,189
It’s ICMP message type 136.

189
00:13:13,189 --> 00:13:17,800
Try to remember those ICMP message types,
I’ll include them in the flashcards.

190
00:13:17,800 --> 00:13:24,329
So, here’s the basic function of the neighbor
solicitation message, the NDP equivalent of

191
00:13:24,329 --> 00:13:25,829
an ARP request.

192
00:13:25,829 --> 00:13:36,089
Let’s say I typed PING 2001:db8::78:9abc
on R1, to attempt to ping R2.

193
00:13:36,089 --> 00:13:41,860
R1 needs to encapsulate that packet in an
Ethernet frame, so it needs to know R2’s

194
00:13:41,860 --> 00:13:43,769
MAC address.

195
00:13:43,769 --> 00:13:48,440
To ask for R2’s MAC address, R1 will send
a neighbor solicitation message.

196
00:13:48,440 --> 00:13:53,269
So, R1 is basically just saying ‘Hi, what’s
your MAC address?’.

197
00:13:53,269 --> 00:13:58,160
Now, to show you how this is different than
an ARP request message let’s look at the

198
00:13:58,160 --> 00:14:01,939
different addresses in the packet and frame.

199
00:14:01,939 --> 00:14:07,139
Below is this message taken from a Wireshark
capture, and above I’ll explain what each

200
00:14:07,139 --> 00:14:09,470
address is.

201
00:14:09,470 --> 00:14:11,850
The source IP is R1’s IP address.

202
00:14:11,850 --> 00:14:14,779
Okay, that’s the same as ARP.

203
00:14:14,779 --> 00:14:20,689
The destination IP address, however, is R2’s
solicited-node multicast address.

204
00:14:20,689 --> 00:14:24,010
How does R1 know R2’s solicited node address?

205
00:14:24,010 --> 00:14:29,519
Well, it knows the unicast address because
I typed in the PING command, and R1 is able

206
00:14:29,519 --> 00:14:34,760
to automatically calculate the solicited-node
multicast address from that.

207
00:14:34,760 --> 00:14:38,990
The source MAC is the MAC address of R1’s
G0/0 interface.

208
00:14:38,990 --> 00:14:42,170
That’s the same as in ARP as well.

209
00:14:42,170 --> 00:14:47,010
The destination MAC address is a multicast
MAC address based on R2’s solicited-node

210
00:14:47,010 --> 00:14:49,980
multicast address.

211
00:14:49,980 --> 00:14:58,369
Notice that in Wireshark it is displayed as
IPv6mcast_ff:78:9a:bc, but to the right you

212
00:14:58,369 --> 00:15:01,369
can see the real multicast MAC address in
brackets.

213
00:15:01,369 --> 00:15:05,839
I haven’t really taught you about multicast
MAC addresses, and you don’t need to study

214
00:15:05,839 --> 00:15:10,220
them for the CCNA, so don’t worry about
the details here.

215
00:15:10,220 --> 00:15:14,329
Just note that the big difference between
an NDP neighbor solicitation message and an

216
00:15:14,329 --> 00:15:19,319
ARP request message, is that the ARP request
is broadcast, and the neighbor solicitation

217
00:15:19,319 --> 00:15:21,829
is multicast, which is more efficient.

218
00:15:21,829 --> 00:15:28,860
Now let’s see the neighbor advertisement
message, the NDP equivalent of an ARP reply.

219
00:15:28,860 --> 00:15:33,579
R2 received a message from R1 asking for its
MAC address.

220
00:15:33,579 --> 00:15:37,640
Basically, in response R2 just teaches R1
its MAC address.

221
00:15:37,640 --> 00:15:41,790
So, let’s see the different addresses in
the message.

222
00:15:41,790 --> 00:15:48,709
R2 will send the neighbor advertisement message
using its G0/0 IP address as the source, and

223
00:15:48,709 --> 00:15:52,970
the destination will be R1’s G0/0 IP address.

224
00:15:52,970 --> 00:15:59,129
It knows R1’s IP address because it was
the source address of the solicitation message.

225
00:15:59,129 --> 00:16:05,910
The source MAC will be R2’s G0/0 MAC address,
and the destination will be R1’s MAC address.

226
00:16:05,910 --> 00:16:12,089
Again, R2 knows R1’s MAC address because
R1 used it as the source for the solicitation

227
00:16:12,089 --> 00:16:13,459
message.

228
00:16:13,459 --> 00:16:18,259
Now, since IPv6 doesn’t use ARP, there isn’t
an ARP table.

229
00:16:18,259 --> 00:16:22,519
Instead, the devices will keep an IPv6 neighbor
table.

230
00:16:22,519 --> 00:16:27,690
Keep in mind I’m showing this on Cisco routers,
but all devices running IPv6 will use NDP,

231
00:16:27,690 --> 00:16:30,430
keep a neighbor table, etc.

232
00:16:30,430 --> 00:16:36,589
Here’s R1’s IPv6 neighbor table, you can
view it with SHOW IPV6 NEIGHBOR.

233
00:16:36,589 --> 00:16:39,060
Let’s look at the output.

234
00:16:39,060 --> 00:16:42,300
First, the IPv6 address column.

235
00:16:42,300 --> 00:16:47,300
Notice that R1 has an entry for both R2’s
global unicast address and its link-local

236
00:16:47,300 --> 00:16:48,380
address.

237
00:16:48,380 --> 00:16:52,670
It learned that link-local address automatically,
I didn’t ping it.

238
00:16:52,670 --> 00:16:58,399
Next, the age column indicates how long ago
R1 received traffic from these addresses,

239
00:16:58,399 --> 00:17:00,350
in minutes.

240
00:17:00,350 --> 00:17:04,920
The link-layer address column shows R2’s
MAC address, and the interface column, of

241
00:17:04,920 --> 00:17:08,900
course, shows the interface this entry was
learned on.

242
00:17:08,900 --> 00:17:13,120
There is also a ‘state’ column, but for
this lesson we won’t talk about that.

243
00:17:13,120 --> 00:17:18,190
Basically, this REACH state means that the
neighbor is reachable, so that’s good.

244
00:17:18,190 --> 00:17:22,210
By the way, this is R2’s neighbor table,
feel free to pause the video if you want to

245
00:17:22,210 --> 00:17:23,380
check it out.

246
00:17:23,380 --> 00:17:29,790
Okay, I will briefly explain one more function
of NDP before moving on, this is necessary

247
00:17:29,790 --> 00:17:32,810
to understand the next topic.

248
00:17:32,810 --> 00:17:38,050
Another function of NDP allows hosts to automatically
discover routers on the local network.

249
00:17:38,050 --> 00:17:42,040
Again, two messages are used for this process.

250
00:17:42,040 --> 00:17:46,790
First one, router solicitation, which is ICMPv6
type 133.

251
00:17:46,790 --> 00:17:52,020
Don’t mix this up with the neighbor solicitation
we just learned.

252
00:17:52,020 --> 00:17:58,610
These are sent to multicast address FF02::2,
the all routers address.

253
00:17:58,610 --> 00:18:04,460
This message asks routers on the local link,
the local network, to identify themselves.

254
00:18:04,460 --> 00:18:08,290
This message is sent when an interface is
enabled, or when the host is connected to

255
00:18:08,290 --> 00:18:10,590
the network.

256
00:18:10,590 --> 00:18:17,030
The next kind of message is the router advertisement,
ICMPv6 type 134.

257
00:18:17,030 --> 00:18:22,800
These messages are sent to multicast address
FF02::1, the all nodes address.

258
00:18:22,800 --> 00:18:28,900
So, these messages are received by all hosts
on the local link, not just routers.

259
00:18:28,900 --> 00:18:32,790
Using this message, the router announces its
presence and provides some other information

260
00:18:32,790 --> 00:18:36,010
about the link, the local network.

261
00:18:36,010 --> 00:18:39,530
These messages are sent in response to RS
messages.

262
00:18:39,530 --> 00:18:42,410
If a router receives an RS, it will send an
RA.

263
00:18:42,410 --> 00:18:49,330
However, even if the router doesn’t receive
an RS, it will send RAs periodically.

264
00:18:49,330 --> 00:18:52,740
To give a brief demonstration, I’ll use
R1 and R2 again.

265
00:18:52,740 --> 00:18:55,650
Once again, these functions aren’t unique
to routers.

266
00:18:55,650 --> 00:19:01,420
Although only routers send router advertisements,
all IPv6 hosts will send router solicitations

267
00:19:01,420 --> 00:19:02,750
when they come online.

268
00:19:02,750 --> 00:19:07,830
So, let’s say we enable R2’s G0/0 interface.

269
00:19:07,830 --> 00:19:12,700
It automatically sends an RS message, asking
if there are any routers on the link.

270
00:19:12,700 --> 00:19:16,490
R1 replies, identifying itself.

271
00:19:16,490 --> 00:19:20,330
There are lots of ways this can be used, for
example hosts can automatically learn their

272
00:19:20,330 --> 00:19:23,520
default gateway from these RA messages.

273
00:19:23,520 --> 00:19:27,530
But let’s move on to the next topic, and
you’ll see another purpose for these RS

274
00:19:27,530 --> 00:19:30,630
and RA messages.

275
00:19:30,630 --> 00:19:32,420
The next topic is SLAAC.

276
00:19:32,420 --> 00:19:35,790
SLAAC stands for Stateless Address Auto-configuration.

277
00:19:35,790 --> 00:19:40,270
Yes, another way to configure IPv6 addresses.

278
00:19:40,270 --> 00:19:46,020
When using SLAAC, hosts use the RS and RA
messages to learn the IPv6 prefix of the local

279
00:19:46,020 --> 00:19:51,310
link, for example 2001:db8::/64.

280
00:19:51,310 --> 00:19:56,160
Then they use that prefix to automatically
generate an IPv6 address.

281
00:19:56,160 --> 00:20:01,630
When using the IPv6 address eui-64 command,
you need to manually enter the prefix, we

282
00:20:01,630 --> 00:20:03,260
did that in the last lesson.

283
00:20:03,260 --> 00:20:09,840
However, the command for SLAAC, IPV6 ADDRESS
AUTOCONFIG, doesn’t need the prefix.

284
00:20:09,840 --> 00:20:10,840
Why is that?

285
00:20:10,840 --> 00:20:17,630
It’s because NDP is used to learn the prefix
used on the local link, via the RS and RA

286
00:20:17,630 --> 00:20:18,750
messages.

287
00:20:18,750 --> 00:20:24,740
Then the device will use EUI-64 to generate
the interface ID, or it can be randomly generated,

288
00:20:24,740 --> 00:20:26,820
depending on the device and maker.

289
00:20:26,820 --> 00:20:30,070
Let me show you that on a Cisco router.

290
00:20:30,070 --> 00:20:32,510
R1 is connected to R2.

291
00:20:32,510 --> 00:20:37,640
R1 is configured with an IPv6 address, but
R2 doesn’t have one yet.

292
00:20:37,640 --> 00:20:44,420
So, I use the command IPV6 ADDRESS AUTOCONFIG
on R2’s G0/0 interface, and you can see

293
00:20:44,420 --> 00:20:49,340
the global unicast address it generated, and
of course the link-local address, as always.

294
00:20:49,340 --> 00:20:54,700
Once again, keep in mind that although I’m
showing you how to do this on a Cisco router,

295
00:20:54,700 --> 00:20:56,510
this isn’t unique to Cisco.

296
00:20:56,510 --> 00:21:02,771
SLAAC is a standard function of IPv6, and
end hosts like PCs can do this too, although

297
00:21:02,771 --> 00:21:06,920
they don’t use Cisco IOS commands, of course.

298
00:21:06,920 --> 00:21:11,510
Okay, one final point about NDP before moving
on to static routing.

299
00:21:11,510 --> 00:21:15,410
This is a simple concept, and you should be
aware of it for the exam.

300
00:21:15,410 --> 00:21:21,400
Duplicate Address Detection, DAD, which is
another function of NDP, allows hosts to check

301
00:21:21,400 --> 00:21:26,420
if other devices on the local link are using
the same IPv6 address.

302
00:21:26,420 --> 00:21:32,300
Any time an IPv6-enabled interface initializes,
for example via the NO SHUTDOWN command, or

303
00:21:32,300 --> 00:21:38,870
an IPv6 address is configured on an interface,
for example a manual IPv6 address, or a SLAAC

304
00:21:38,870 --> 00:21:44,050
address, the device performs DAD to check
if another device is using that same IPv6

305
00:21:44,050 --> 00:21:45,050
address.

306
00:21:45,050 --> 00:21:50,440
DAD uses two messages that you already learned
earlier, neighbor solicitation and neighbor

307
00:21:50,440 --> 00:21:52,020
advertisement.

308
00:21:52,020 --> 00:21:56,200
So that’s good news, you don’t have to
learn any new message types!

309
00:21:56,200 --> 00:22:02,170
To perform DAD, the host will send an NS to
its own IPv6 address, its own solicited-node

310
00:22:02,170 --> 00:22:04,340
multicast address.

311
00:22:04,340 --> 00:22:07,640
If it doesn’t get a reply it knows the address
is unique.

312
00:22:07,640 --> 00:22:12,510
However, if it does get a reply, a neighbor
advertisement message, it means that another

313
00:22:12,510 --> 00:22:15,910
host on the network is already using the address.

314
00:22:15,910 --> 00:22:21,040
On a Cisco router, you’ll get a message
like this if a duplicate address is detected.

315
00:22:21,040 --> 00:22:25,570
Exactly what happens next depends on how the
IP address was configured, the device maker,

316
00:22:25,570 --> 00:22:32,540
etc, but we don’t have to go any deeper
into DAD for the CCNA.

317
00:22:32,540 --> 00:22:35,730
Finally, let’s get into IPv6 static routing.

318
00:22:35,730 --> 00:22:39,420
As a reminder, here’s what you need to know
for the CCNA.

319
00:22:39,420 --> 00:22:43,440
You should be able to configure and verify
the same kinds of static routes that you already

320
00:22:43,440 --> 00:22:46,200
learned for IPv4.

321
00:22:46,200 --> 00:22:49,890
But now that you’re a little more experienced,
I’ll explain a little more about static

322
00:22:49,890 --> 00:22:53,170
routes in general, not just for IPv6.

323
00:22:53,170 --> 00:22:56,950
IPv6 routing works the same as IPv4 routing.

324
00:22:56,950 --> 00:23:02,120
A packet arrives on one of the router’s
interfaces, it looks up the destination IP

325
00:23:02,120 --> 00:23:06,060
address in its routing table, and then forwards
the packet according to the most specific

326
00:23:06,060 --> 00:23:08,930
match in the routing table.

327
00:23:08,930 --> 00:23:13,890
Although IPv6 routing works the same, the
two processes are separate on the router,

328
00:23:13,890 --> 00:23:16,190
and the two routing tables are separate as
well.

329
00:23:16,190 --> 00:23:21,020
You’ve already seen how the router builds
a separate IPv6 routing table, you can view

330
00:23:21,020 --> 00:23:24,270
it with SHOW IPV6 ROUTE.

331
00:23:24,270 --> 00:23:27,730
IPv4 routing is enabled on Cisco routers by
default.

332
00:23:27,730 --> 00:23:34,560
However, IPv6 routing is disabled by default,
and must be enabled with the IPV6 UNICAST-ROUTING

333
00:23:34,560 --> 00:23:35,560
command.

334
00:23:35,560 --> 00:23:37,590
But you already know that.

335
00:23:37,590 --> 00:23:43,610
If IPv6 routing is disabled, the router will
be able to send and receive IPv6 traffic,

336
00:23:43,610 --> 00:23:49,770
but will not ‘route’ IPv6 traffic, meaning
it will not forward traffic between networks.

337
00:23:49,770 --> 00:23:53,610
Always make sure to use the IPV6 UNICAST-ROUTING
command.

338
00:23:53,610 --> 00:23:58,150
If everything about your IPv6 configuration
seems correct, but for some reason the network

339
00:23:58,150 --> 00:24:02,550
isn’t working, there’s a big chance that
you forgot that command.

340
00:24:02,550 --> 00:24:06,770
To demonstrate IPv6 routing, we’ll use this
network here.

341
00:24:06,770 --> 00:24:10,750
But before we actually configure static routes
in this network, let’s check out R1’s

342
00:24:10,750 --> 00:24:12,300
routing table as it is now.

343
00:24:12,300 --> 00:24:17,290
So, here’s R1’s IPv6 routing table.

344
00:24:17,290 --> 00:24:22,080
Just like in IPv4, a connected ‘network
route’ is automatically added for each connected

345
00:24:22,080 --> 00:24:23,080
network.

346
00:24:23,080 --> 00:24:28,260
A network route is a route to a network, a
subnet, as opposed to a route to a single

347
00:24:28,260 --> 00:24:29,790
specific host.

348
00:24:29,790 --> 00:24:35,760
Also, a local ‘host route’ is automatically
added for each address configured on the router.

349
00:24:35,760 --> 00:24:36,760
This is the same as in IPv4.

350
00:24:36,760 --> 00:24:45,530
A host route is a route to a single specific
host, using a /32 prefix length in IPv4 or

351
00:24:45,530 --> 00:24:48,860
a /128 prefix length in IPv6.

352
00:24:48,860 --> 00:24:53,140
For example, here you can see the connected
and local routes that were automatically configured

353
00:24:53,140 --> 00:24:55,780
for R1’s G0/1 interface.

354
00:24:55,780 --> 00:25:02,470
A /64 connected network route, and a /128
local host route.

355
00:25:02,470 --> 00:25:09,570
Some of you might have noticed this route
to FF00::/8, that’s the IPv6 multicast range.

356
00:25:09,570 --> 00:25:14,960
It says ‘via Null0’, which is an interface
that discards traffic matching that route,

357
00:25:14,960 --> 00:25:17,810
so this discards multicast traffic.

358
00:25:17,810 --> 00:25:21,920
This route was automatically configured, but
it’s beyond the scope of the CCNA.

359
00:25:21,920 --> 00:25:26,160
If you’re curious, try searching on google
for more information.

360
00:25:26,160 --> 00:25:30,770
Also one more thing I’d like to point out,
routes for link-local addresses are not added

361
00:25:30,770 --> 00:25:32,310
to the routing table.

362
00:25:32,310 --> 00:25:38,290
R1’s G0/0 and G0/1 both have link local
addresses on them, but those routes don’t

363
00:25:38,290 --> 00:25:40,390
appear in the routing table.

364
00:25:40,390 --> 00:25:43,570
Now let’s actually take a look at static
routes.

365
00:25:43,570 --> 00:25:50,930
Here’s the IPv6 static route command, written
in the format Cisco uses in documentation.

366
00:25:50,930 --> 00:25:55,710
If you haven’t seen a command written like
this before it might be difficult to understand.

367
00:25:55,710 --> 00:25:59,160
Although it’s not required knowledge for
the CCNA, you’ll want to understand how

368
00:25:59,160 --> 00:26:02,990
to read commands like this for your future
studies.

369
00:26:02,990 --> 00:26:05,360
This first part is easy enough to understand.

370
00:26:05,360 --> 00:26:10,810
The command begins IPV6 ROUTE, and then you
enter the destination, slash, and then the

371
00:26:10,810 --> 00:26:12,880
prefix length.

372
00:26:12,880 --> 00:26:15,700
Now let explain this next part in the curly
brackets.

373
00:26:15,700 --> 00:26:18,780
Curly brackets mean a required choice.

374
00:26:18,780 --> 00:26:24,660
So, you HAVE to either enter a next-hop address,
or an exit-interface, with an optional next

375
00:26:24,660 --> 00:26:25,660
hop.

376
00:26:25,660 --> 00:26:30,070
That’s what the square brackets mean, the
next-hop is optional if you enter an exit

377
00:26:30,070 --> 00:26:31,330
interface.

378
00:26:31,330 --> 00:26:36,520
Finally, you can see AD in square brackets,
meaning this is optional too.

379
00:26:36,520 --> 00:26:37,760
What’s AD?

380
00:26:37,760 --> 00:26:42,470
It’s administrative distance, which you’ll
need to enter to configure a floating static

381
00:26:42,470 --> 00:26:43,470
route.

382
00:26:43,470 --> 00:26:47,730
Now, there is actually a name for each of
these different kinds of static routes, depending

383
00:26:47,730 --> 00:26:52,940
on if you specify just the exit interface,
just the next hop, or both.

384
00:26:52,940 --> 00:26:58,330
This concept isn’t unique to IPv6, by the
way, it applies to IPv4 static routes too.

385
00:26:58,330 --> 00:27:01,350
Let’s check out those names.

386
00:27:01,350 --> 00:27:06,240
First up, a ‘directly attached’ static
route is a route where only the exit interface

387
00:27:06,240 --> 00:27:07,570
is specified.

388
00:27:07,570 --> 00:27:09,970
So, the command is like this.

389
00:27:09,970 --> 00:27:20,160
For example, on R1 you might use this command:
IPV6 ROUTE 2001:db8:0:3::/64 g0/0 to reach

390
00:27:20,160 --> 00:27:22,260
the network connected to R3.

391
00:27:22,260 --> 00:27:28,400
Okay, the next type is a recursive static
route, which specifies only the next hop address.

392
00:27:28,400 --> 00:27:30,730
So, the command is like this.

393
00:27:30,730 --> 00:27:39,770
On R1, you might use the command IPV6 ROUTE
2001:db8:0:3::/64, using R3’s LAN as the

394
00:27:39,770 --> 00:27:48,540
destination, and then 2001:db8:0:12::2, telling
R1 to send the packet to R2.

395
00:27:48,540 --> 00:27:50,240
Why is the name recursive?

396
00:27:50,240 --> 00:27:55,780
It’s because it requires a ‘recursive’
lookup in the routing table, R1 has to check

397
00:27:55,780 --> 00:27:57,970
its routing table multiple times.

398
00:27:57,970 --> 00:28:01,360
First, it has to look up the destination.

399
00:28:01,360 --> 00:28:06,510
Then it has to look up the next hop to know
which interface to send the traffic out of.

400
00:28:06,510 --> 00:28:11,580
Let me demonstrate, here’s R1’s routing
table after configuring that route.

401
00:28:11,580 --> 00:28:16,280
If it receives a packet destined for PC2’s
address, the only match is that route we just

402
00:28:16,280 --> 00:28:17,720
configured.

403
00:28:17,720 --> 00:28:22,660
It says the next hop is 2001:db8:0:12::2.

404
00:28:22,660 --> 00:28:25,570
So R1 has to look up that address now.

405
00:28:25,570 --> 00:28:29,250
It finds this matching entry, so it knows
that it should send the packet out of the

406
00:28:29,250 --> 00:28:30,250
G0/0 interface.

407
00:28:30,250 --> 00:28:33,640
That’s a recursive lookup.

408
00:28:33,640 --> 00:28:38,960
Okay, the next type of static route is the
fully specified static route, when both the

409
00:28:38,960 --> 00:28:41,990
exit interface and next hop are specified.

410
00:28:41,990 --> 00:28:44,660
So, the command is like this.

411
00:28:44,660 --> 00:28:49,640
For example, to reach that same network from
R1 we could enter the command like this.

412
00:28:49,640 --> 00:28:54,090
Okay, try to remember these three kinds of
static routes, and remember that these are

413
00:28:54,090 --> 00:28:57,100
the same for both IPv4 and IPv6.

414
00:28:57,100 --> 00:29:02,950
I didn’t specifically mention these types
in the IPv4 static routing video, but you

415
00:29:02,950 --> 00:29:09,520
can have directly attached, recursive, and
fully specified IPv4 static routes, too.

416
00:29:09,520 --> 00:29:13,580
Before moving on, I have to point one thing
out about directly attached static routes

417
00:29:13,580 --> 00:29:14,580
in IPv6.

418
00:29:14,580 --> 00:29:20,580
In IPv6, you can’t use directly attached
static routes if the interface is an Ethernet

419
00:29:20,580 --> 00:29:21,670
interface.

420
00:29:21,670 --> 00:29:25,980
So, this command I wrote here actually won’t
work.

421
00:29:25,980 --> 00:29:31,210
G0/0, which stands for gigabitETHERNET0/0,
won’t work with this command.

422
00:29:31,210 --> 00:29:35,890
Actually, the router will let you enter the
command, it will become part of the router’s

423
00:29:35,890 --> 00:29:38,560
configuration, but the route just won’t
work.

424
00:29:38,560 --> 00:29:41,100
R1 simply won’t send the packet.

425
00:29:41,100 --> 00:29:45,771
If it was a serial interface, for example,
it would work, but not on an Ethernet interface

426
00:29:45,771 --> 00:29:47,330
like this.

427
00:29:47,330 --> 00:29:49,110
Just be aware of that.

428
00:29:49,110 --> 00:29:53,530
Although directly attached static routes work
on Ethernet interfaces when using IPv4, they

429
00:29:53,530 --> 00:29:55,730
won’t work in IPv6.

430
00:29:55,730 --> 00:29:59,780
You have to use a recursive or fully specified
static route instead.

431
00:29:59,780 --> 00:30:07,750
Okay, let’s look at an example IPv6 route
from each type in the exam topics list.

432
00:30:07,750 --> 00:30:10,910
First up, a network route, a route to a specific
subnet.

433
00:30:10,910 --> 00:30:13,920
I configured this route on R1.

434
00:30:13,920 --> 00:30:21,950
IPv6 ROUTE 2001:db8:0:3::/64, which is the
network connected to R3.

435
00:30:21,950 --> 00:30:29,740
Then I specified the next hop, 2001:db8:0:12::2,
which is R2’s G0/0 interface.

436
00:30:29,740 --> 00:30:34,700
This tells R1: if you receive a packet with
a destination in this network, send the packet

437
00:30:34,700 --> 00:30:36,880
to R2.

438
00:30:36,880 --> 00:30:40,850
Next up, a host route, a route to single specific
host.

439
00:30:40,850 --> 00:30:46,540
For example, let’s configure host routes
on R2, one to PC1 and one to PC2.

440
00:30:46,540 --> 00:30:51,340
Here’s the route to PC1, and here’s the
route to PC2.

441
00:30:51,340 --> 00:30:54,750
Since there are probably plenty of other PCs
in these networks, we wouldn’t normally

442
00:30:54,750 --> 00:30:58,960
use host routes in a situation like this,
we’d just configure 2 network routes on

443
00:30:58,960 --> 00:31:00,150
R2.

444
00:31:00,150 --> 00:31:06,770
But I just wanted to demonstrate how to configure
host routes in IPv6, using a /128 prefix length.

445
00:31:06,770 --> 00:31:09,850
Okay, the next type is a default route.

446
00:31:09,850 --> 00:31:13,630
Let’s configure a default route on R3.

447
00:31:13,630 --> 00:31:20,600
Here it is, notice the ::/0 which is like
0.0.0.0/0 in IPv4.

448
00:31:20,600 --> 00:31:25,210
Okay, so here are four IPv6 static routes.

449
00:31:25,210 --> 00:31:28,890
Think about the different static route types
I showed you in the previous slide, directly

450
00:31:28,890 --> 00:31:32,360
attached, recursive, and fully specified.

451
00:31:32,360 --> 00:31:37,370
Of those previous types, what type are these
four routes I just configured?

452
00:31:37,370 --> 00:31:40,940
They are all recursive, they all specify only
the next hop.

453
00:31:40,940 --> 00:31:46,070
Okay, now I left out one type of static route
which is on the exam topics list.

454
00:31:46,070 --> 00:31:48,660
That type is floating static.

455
00:31:48,660 --> 00:31:52,450
Although this example network here doesn’t
need floating static routes, how could we

456
00:31:52,450 --> 00:31:55,140
configure a floating static route?

457
00:31:55,140 --> 00:31:56,760
The answer is here.

458
00:31:56,760 --> 00:32:02,260
By raising the AD, we can make static backup
routes, called floating static routes.

459
00:32:02,260 --> 00:32:06,760
If the main route to the destination was learned
via OSPF, for example, you’ll need to set

460
00:32:06,760 --> 00:32:13,160
the static route’s AD to higher than 110,
because OSPF’s AD is 110.

461
00:32:13,160 --> 00:32:17,240
If the main route to the destination was learned
via EIGRP, on the other hand, you’d need

462
00:32:17,240 --> 00:32:23,600
to set the static route’s AD to higher than
90, because EIGRP’s AD is 90.

463
00:32:23,600 --> 00:32:26,370
Always set the AD to higher than the main
route.

464
00:32:26,370 --> 00:32:31,390
Finally, I want to bring up a point that I
already mentioned in the Day 32 lab video,

465
00:32:31,390 --> 00:32:36,000
about using a link-local address as the next
hop of an IPv6 static route.

466
00:32:36,000 --> 00:32:41,650
Here on R1, I tried to configure a route to
R3’s network using R2’s link-local address

467
00:32:41,650 --> 00:32:42,650
as a next hop.

468
00:32:42,650 --> 00:32:46,810
However, I got an error message and the command
didn’t work.

469
00:32:46,810 --> 00:32:50,450
‘Interface has to be specified for a link-local
nexthop’.

470
00:32:50,450 --> 00:32:55,310
So, if you want to use a link-local address
as a next-hop, you have to specify both the

471
00:32:55,310 --> 00:32:57,970
next hop address and the exit interface.

472
00:32:57,970 --> 00:33:00,130
So, that’s what I did.

473
00:33:00,130 --> 00:33:05,090
What’s this kind of static route called,
when you specify both the exit interface and

474
00:33:05,090 --> 00:33:06,090
the next hop?

475
00:33:06,090 --> 00:33:09,030
It’s a fully specified static route.

476
00:33:09,030 --> 00:33:12,030
Here’s that route in the routing table.

477
00:33:12,030 --> 00:33:17,320
The reason you need to specify the exit interface
is because, with a link-local next-hop address,

478
00:33:17,320 --> 00:33:21,570
the router isn’t able to figure out, on
its own, which interface that next-hop address

479
00:33:21,570 --> 00:33:23,210
is connected to.

480
00:33:23,210 --> 00:33:28,370
Okay, let’s review before going on to the
quiz.

481
00:33:28,370 --> 00:33:33,340
First in this video, I showed you some basic
rules about how to properly write IPv6 addresses.

482
00:33:33,340 --> 00:33:37,780
Nothing important for the test, but still
something you should know.

483
00:33:37,780 --> 00:33:41,200
Then I briefly introduced each field of the
IPv6 header.

484
00:33:41,200 --> 00:33:44,920
It has a fixed size of 40 bytes and is much
simpler than the IPv4 header.

485
00:33:44,920 --> 00:33:49,710
I doubt there will be any specific questions
about the header on the exam, but I still

486
00:33:49,710 --> 00:33:53,020
consider it fundamental networking knowledge.

487
00:33:53,020 --> 00:33:56,980
Then I introduced neighbor discovery protocol,
NDP.

488
00:33:56,980 --> 00:34:02,440
NDP is a very important part of IPv6 which
serves multiple functions.

489
00:34:02,440 --> 00:34:07,300
One of those functions is to replace ARP by
using Neighbor Solicitation and Neighbor Advertisement

490
00:34:07,300 --> 00:34:09,230
messages.

491
00:34:09,230 --> 00:34:13,539
Another is for automatic discovery of routers
on the network with Router Solicitation and

492
00:34:13,539 --> 00:34:16,190
Router Advertisement messages.

493
00:34:16,190 --> 00:34:20,929
Those Router Solicitation and Router Advertisement
messages allow hosts on the network to use

494
00:34:20,929 --> 00:34:25,619
SLAAC, Stateless Address Auto-configuration,
to learn the network prefix and automatically

495
00:34:25,619 --> 00:34:28,429
configure an IPv6 address.

496
00:34:28,429 --> 00:34:32,079
Finally, we covered IPv6 static routes.

497
00:34:32,079 --> 00:34:36,909
Remember those three types, directly attached,
recursive, and fully specified.

498
00:34:36,909 --> 00:34:41,129
Also network, host, default and floating routes.

499
00:34:41,129 --> 00:34:46,299
All of those types apply to both IPv4 and
IPv6, so some of the information here was

500
00:34:46,299 --> 00:34:49,389
review, but some of it was new.

501
00:34:49,389 --> 00:34:53,429
Remember to watch until the end of the quiz
for a bonus question from Boson ExSim, the

502
00:34:53,429 --> 00:34:55,960
best practice exams for the CCNA.

503
00:34:55,960 --> 00:35:00,210
Okay, let’s get started with quiz question
1.

504
00:35:00,210 --> 00:35:07,940
R2 sends a message to R1, to tell R1 about
the MAC address on R2’s G0/0 interface.

505
00:35:07,940 --> 00:35:11,390
What kind of message does R2 send to R1?

506
00:35:11,390 --> 00:35:12,910
A, RA.

507
00:35:12,910 --> 00:35:14,430
B, NA.

508
00:35:14,430 --> 00:35:15,950
C, RS.

509
00:35:15,950 --> 00:35:17,869
Or D, NS.

510
00:35:17,869 --> 00:35:22,300
Pause the video to think about the answer.

511
00:35:22,300 --> 00:35:24,770
The answer is B, NA, neighbor advertisement.

512
00:35:24,770 --> 00:35:32,540
R1 would have sent an NS, neighbor solicitation
message to R2 to learn R2’s MAC address.

513
00:35:32,540 --> 00:35:39,349
In response, R2 sends an NA to R1, telling
R1 about the MAC address on its interface.

514
00:35:39,349 --> 00:35:42,260
This is like the ARP function of IPv4.

515
00:35:42,260 --> 00:35:49,519
RS, router solicitation, and RA, router advertisement,
are also part of NDP, but have a different

516
00:35:49,519 --> 00:35:50,519
function.

517
00:35:50,519 --> 00:35:53,990
Okay, let’s go to question 2.

518
00:35:53,990 --> 00:35:58,829
You configure an IPv6 address on R1’s G0/0
interface.

519
00:35:58,829 --> 00:36:01,890
What kind of message will it send to perform
DAD?

520
00:36:01,890 --> 00:36:03,580
A, RA.

521
00:36:03,580 --> 00:36:05,270
B, NA.

522
00:36:05,270 --> 00:36:06,970
C, RS.

523
00:36:06,970 --> 00:36:08,869
Or D, NS.

524
00:36:08,869 --> 00:36:13,890
Pause the video to think about the answer.

525
00:36:13,890 --> 00:36:17,730
The answer is D, NS, neighbor solicitation.

526
00:36:17,730 --> 00:36:22,769
When an IPv6 address is configured on an interface,
the router will send an NS message to the

527
00:36:22,769 --> 00:36:28,450
interface’s own solicited-node multicast
address to perform DAD, duplicate address

528
00:36:28,450 --> 00:36:29,450
detection.

529
00:36:29,450 --> 00:36:33,460
If no reply comes, it knows that the address
is unique.

530
00:36:33,460 --> 00:36:38,170
If it receives a reply, it means that another
device on the local network is already using

531
00:36:38,170 --> 00:36:39,599
that IPv6 address.

532
00:36:39,599 --> 00:36:43,059
Okay, let’s go to question 3.

533
00:36:43,059 --> 00:36:49,390
R1 sends an RA message to devices on the local
link to inform them about R1’s presence,

534
00:36:49,390 --> 00:36:52,140
the prefix of the network, etc.

535
00:36:52,140 --> 00:36:56,140
What IPv6 address does R1 send the message
to?

536
00:36:56,140 --> 00:36:59,200
A, FF01::1.

537
00:36:59,200 --> 00:37:02,270
B, FF01::2.

538
00:37:02,270 --> 00:37:05,339
C, FF02::1.

539
00:37:05,339 --> 00:37:08,490
Or D, FF02::2.

540
00:37:08,490 --> 00:37:13,999
Pause the video to think about your answer.

541
00:37:13,999 --> 00:37:17,480
The answer is C, FF02::1.

542
00:37:17,480 --> 00:37:23,980
IPv6 routers send RA, router advertisement,
messages to inform all devices on the local

543
00:37:23,980 --> 00:37:28,930
link about the router’s presence, as well
as other information about the local network.

544
00:37:28,930 --> 00:37:35,400
To do this, the all-nodes link-local multicast
address FF02::1 is used as the message’s

545
00:37:35,400 --> 00:37:36,869
destination IP address.

546
00:37:36,869 --> 00:37:40,990
Okay, let’s go to question 4.

547
00:37:40,990 --> 00:37:46,220
You configure the following IPv6 static route,
what kind of static route is this?

548
00:37:46,220 --> 00:37:47,220
Select two.

549
00:37:47,220 --> 00:37:50,590
So, two of the following static route types
apply to this route.

550
00:37:50,590 --> 00:37:52,519
A, fully specified.

551
00:37:52,519 --> 00:37:54,270
B, network.

552
00:37:54,270 --> 00:37:56,029
C, host.

553
00:37:56,029 --> 00:37:57,900
D, directly attached.

554
00:37:57,900 --> 00:37:59,670
E, recursive.

555
00:37:59,670 --> 00:38:01,569
Or F, default.

556
00:38:01,569 --> 00:38:05,839
Pause the video to think about your answer,
select two.

557
00:38:05,839 --> 00:38:11,809
Okay, the answers are A, fully specified,
and B, network.

558
00:38:11,809 --> 00:38:16,800
It’s a fully specified static route because
it specifies both an exit interface and a

559
00:38:16,800 --> 00:38:18,069
next hop address.

560
00:38:18,069 --> 00:38:22,859
It’s a network route because its destination
is a network, not a specific host like in

561
00:38:22,859 --> 00:38:23,940
a host route.

562
00:38:23,940 --> 00:38:28,700
Okay, let’s go to question 5.

563
00:38:28,700 --> 00:38:32,259
Which of the following commands configures
a recursive host route?

564
00:38:32,259 --> 00:38:33,940
Here are the options.

565
00:38:33,940 --> 00:38:37,769
Pause the video to think about your answer.

566
00:38:37,769 --> 00:38:45,710
Okay, the answer is C. A recursive static
route specifies only a next-hop address.

567
00:38:45,710 --> 00:38:51,109
A is a directly attached static route and
B is a fully specified static route.

568
00:38:51,109 --> 00:38:52,910
C and D are recursive.

569
00:38:52,910 --> 00:39:00,109
A host route is a route to a single host,
using a /128 prefix length in IPv6 or a /32

570
00:39:00,109 --> 00:39:02,670
prefix length in IPv4.

571
00:39:02,670 --> 00:39:07,330
A and D are network routes, and B and C are
host routes.

572
00:39:07,330 --> 00:39:11,600
So C is the only one that is both a recursive
route and a host route.

573
00:39:11,600 --> 00:39:13,839
Okay, that’s all for the quiz.

574
00:39:13,839 --> 00:39:19,910
Now let’s take a look at a bonus question
from Boson ExSim for CCNA.

575
00:39:19,910 --> 00:39:25,460
Okay, here's today's Boson ExSim practice
question.

576
00:39:25,460 --> 00:39:36,500
You issue the ipv6 route 2001:db8:2::/64 2001:db8:1::2
command on RouterA so that traffic can be

577
00:39:36,500 --> 00:39:38,420
routed to RouterC.

578
00:39:38,420 --> 00:39:45,079
When you attempt to ping the GigabitEthernet0/1
interface of RouterC by issuing the ping ipv6

579
00:39:45,079 --> 00:39:49,940
2001:db8:2::2 command on RouterA, the ping
fails.

580
00:39:49,940 --> 00:39:52,390
Which of the following is most likely the
problem?

581
00:39:52,390 --> 00:39:53,530
Select the best answer.

582
00:39:53,530 --> 00:39:56,420
Okay, so here are the four options.

583
00:39:56,420 --> 00:39:59,910
Please pause the video and find the correct
answer.

584
00:39:59,910 --> 00:40:04,619
Okay, let's check the answer.

585
00:40:04,619 --> 00:40:13,700
A, RouterB does not have a route to the 2001:db8:1::/64
network.

586
00:40:13,700 --> 00:40:17,869
That is probably not the problem, that is
a connected network for RouterB, so most likely

587
00:40:17,869 --> 00:40:19,390
it does have a route.

588
00:40:19,390 --> 00:40:22,930
RouterA does not have a default gateway.

589
00:40:22,930 --> 00:40:25,920
So, RouterA does not have a default route.

590
00:40:25,920 --> 00:40:31,760
Well, we just configured a route to this network,
so there's no need for a default route to

591
00:40:31,760 --> 00:40:33,730
be able to reach RouterC.

592
00:40:33,730 --> 00:40:36,560
So B is probably not the answer.

593
00:40:36,560 --> 00:40:43,289
RouterC does not have a route to the 2001:db8:1::/64
network.

594
00:40:43,289 --> 00:40:47,869
So, that could be a problem.

595
00:40:47,869 --> 00:40:53,319
For RouterA to successfully ping RouterC,
RouterA must be able to reach RouterC, and

596
00:40:53,319 --> 00:40:55,050
RouterC must be able to reach RouterA.

597
00:40:55,050 --> 00:40:57,980
So RouterC does need a route to this network.

598
00:40:57,980 --> 00:40:59,890
So C might be the correct answer.

599
00:40:59,890 --> 00:41:01,349
How about D?

600
00:41:01,349 --> 00:41:06,390
RouterB does not have a route to the 2001:db8:2::/64
network.

601
00:41:06,390 --> 00:41:12,880
Again, that is a connected network on RouterB,
so D is probably not one of the correct answers...or

602
00:41:12,880 --> 00:41:14,650
not the correct answer.

603
00:41:14,650 --> 00:41:18,890
So, that leaves us with C. I believe C is
the correct answer.

604
00:41:18,890 --> 00:41:22,230
I'll click on Show Answer down here to check.

605
00:41:22,230 --> 00:41:23,680
And that is correct.

606
00:41:23,680 --> 00:41:26,180
Okay, here's Boson's explanation.

607
00:41:26,180 --> 00:41:28,470
You can pause the video now to check it out.

608
00:41:28,470 --> 00:41:31,930
And also notice some references to Cisco documentation.

609
00:41:31,930 --> 00:41:32,930
These are really helpful.

610
00:41:32,930 --> 00:41:37,789
I highly recommend using the Cisco documentation
in your studies to really go in depth on each

611
00:41:37,789 --> 00:41:39,279
topic.

612
00:41:39,279 --> 00:41:43,269
Okay, so that's Boson ExSim for the CCNA.

613
00:41:43,269 --> 00:41:44,809
I highly recommend these practice exams.

614
00:41:44,809 --> 00:41:49,650
I used them myself, they're great, and if
you want to get a copy please follow the link

615
00:41:49,650 --> 00:41:54,069
in the video description.

616
00:41:54,069 --> 00:41:57,390
There are supplementary materials for this
video.

617
00:41:57,390 --> 00:42:00,579
There is a flashcard deck to use with the
software ‘Anki’.

618
00:42:00,579 --> 00:42:04,970
Note that I have added the tag ‘ipv6’
to all flashcards for this video and the previous

619
00:42:04,970 --> 00:42:12,170
two videos, so you can use Anki to specifically
review the IPv6 cards if you feel it is necessary.

620
00:42:12,170 --> 00:42:17,550
There was a lot to memorize in these videos,
so I think the flashcards will be very helpful.

621
00:42:17,550 --> 00:42:21,380
There will also be a packet tracer practice
lab so you can get some hands-on practice.

622
00:42:21,380 --> 00:42:24,369
That will be in the next video.

623
00:42:24,369 --> 00:42:27,920
Sign up for my mailing list via the link in
the description, and I’ll send you all of

624
00:42:27,920 --> 00:42:33,420
the flashcards and packet tracer lab files
for the course.

625
00:42:33,420 --> 00:42:37,779
Before finishing today’s video I want to
thank my JCNP-level channel members.

626
00:42:37,779 --> 00:42:40,670
To join, please click the ‘Join’ button
under the video.

627
00:42:40,670 --> 00:42:47,796
Thank you to TheGunguy, l33america, Brandon,
Magrathea, Njabulo, Tshepiso, Justin, Nil,

628
00:42:47,796 --> 00:42:53,976
Prakaash, Nasir, Erlison, Apogee, Wasseem,
Marko, Flodo, Daming, Joshua, Jhilmar, Samil,

629
00:42:53,976 --> 00:42:58,531
Ed, Value, John, Funnyydart, Scott, Hassan,
Marek, Velvijaykum, C Mohd, Mark, Yousif,

630
00:42:58,531 --> 00:43:04,996
Sidi, Boson Software, Charlesetta, Devin,
Lito, Yonatan, and Vance.

631
00:43:04,996 --> 00:43:09,779
Sorry if I pronounced your name incorrectly,
but thank you so much for your support.

632
00:43:09,779 --> 00:43:13,769
One of you is still displaying as Channel
failed to load, if this is you please let

633
00:43:13,769 --> 00:43:16,890
me know and I’ll see if YouTube can fix
it.

634
00:43:16,890 --> 00:43:21,270
This is the list of JCNP-level members at
the time of recording by the way, November

635
00:43:21,270 --> 00:43:22,829
1st 2020.

636
00:43:22,829 --> 00:43:26,750
If you signed up recently and your name isn’t
on here don’t worry, you’ll be in future

637
00:43:26,750 --> 00:43:29,079
videos.

638
00:43:29,079 --> 00:43:30,660
Thank you for watching.

639
00:43:30,660 --> 00:43:34,559
Please subscribe to the channel, like the
video, leave a comment, and share the video

640
00:43:34,559 --> 00:43:37,900
with anyone else studying for the CCNA.

641
00:43:37,900 --> 00:43:40,559
If you want to leave a tip, check the links
in the description.

642
00:43:40,559 --> 00:43:47,230
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

643
00:43:47,230 --> 00:43:48,230
Brave browser.

644
00:43:48,230 --> 00:43:48,730
That's all for now.