1
00:00:01,280 --> 00:00:07,760
Welcome to Jeremy’s IT Lab. This is a free,&nbsp;
complete course for the CCNA. If you like these&nbsp;&nbsp;

2
00:00:07,760 --> 00:00:13,600
videos, please subscribe to follow along with the&nbsp;
series. Also, please like and leave a comment,&nbsp;&nbsp;

3
00:00:13,600 --> 00:00:17,520
and share the video to help spread this&nbsp;
free series of videos. Thanks for your help.

4
00:00:18,800 --> 00:00:25,600
In this video we will cover extended ACLs, access&nbsp;
control lists. Everything we covered in Day 34&nbsp;&nbsp;

5
00:00:25,600 --> 00:00:31,280
about the purpose of ACLs, how they work, how&nbsp;
to apply them to interfaces, etc. is the same&nbsp;&nbsp;

6
00:00:31,280 --> 00:00:37,360
for extended ACLs. The only difference is that&nbsp;
extended ACLs can do more specific matching&nbsp;&nbsp;

7
00:00:37,360 --> 00:00:42,000
than standard ACLs, which can only match&nbsp;
based on the source IP address of the packet.&nbsp;&nbsp;

8
00:00:43,280 --> 00:00:48,080
As a reminder, ACLs are topic&nbsp;
5.6 of the exam topics list,&nbsp;&nbsp;

9
00:00:48,080 --> 00:00:54,240
which states that you must be able to configure&nbsp;
and verify access control lists. After this video,&nbsp;&nbsp;

10
00:00:54,240 --> 00:00:59,120
you’ll know everything you need to know to&nbsp;
answer questions about ACLs on the CCNA exam.

11
00:01:00,800 --> 00:01:05,200
Here’s what we’ll cover in today’s video.&nbsp;
First up, I’ll show you another way to&nbsp;&nbsp;

12
00:01:05,200 --> 00:01:10,080
configure numbered ACLs. This applies&nbsp;
to both standard and extended ACLs.&nbsp;&nbsp;

13
00:01:11,040 --> 00:01:15,360
Then I’ll show you how to edit ACLs, in&nbsp;
case you want to add or remove specific&nbsp;&nbsp;

14
00:01:15,360 --> 00:01:21,280
entries in a specific order. Finally I’ll&nbsp;
introduce extended numbered and named ACLs.&nbsp;&nbsp;

15
00:01:22,240 --> 00:01:26,560
Although the commands are a little longer&nbsp;
because they can match based on more variables,&nbsp;&nbsp;

16
00:01:26,560 --> 00:01:30,480
the configuration method in general&nbsp;
is the same as for standard ACLs.&nbsp;&nbsp;

17
00:01:31,680 --> 00:01:37,280
As always, watch until the end of the quiz for&nbsp;
a bonus question from ExSim for CCNA by Boson&nbsp;&nbsp;

18
00:01:37,280 --> 00:01:44,240
Software. Boson ExSim simulates the difficulty&nbsp;
and style of the real CCNA exam better than any&nbsp;&nbsp;

19
00:01:44,240 --> 00:01:49,840
other practice exams. If you want to get Boson&nbsp;
ExSim, follow the link in the video description.

20
00:01:51,760 --> 00:01:56,800
Let’s get started. In day 34 you learned that&nbsp;
numbered ACLs are configured in global config&nbsp;&nbsp;

21
00:01:56,800 --> 00:02:03,760
mode. For example, here’s a simple ACL denying&nbsp;
192.168.1.1 but permitting all other traffic.&nbsp;&nbsp;

22
00:02:04,640 --> 00:02:09,840
The entries of ACL 1 are configured directly from&nbsp;
global config mode with the ACCESS-LIST command.&nbsp;&nbsp;

23
00:02:10,960 --> 00:02:15,280
You also learned that named ACLs are configured&nbsp;
with subcommands in a different config mode.&nbsp;&nbsp;

24
00:02:16,080 --> 00:02:18,960
Here’s the same ACL, configured as a named ACL.&nbsp;&nbsp;

25
00:02:19,920 --> 00:02:25,600
The IP ACCESS-LIST STANDARD command is used&nbsp;
to enter standard named ACL config mode,&nbsp;&nbsp;

26
00:02:25,600 --> 00:02:30,243
and then subcommands within that mode&nbsp;
are used to configure each entry of the&nbsp;&nbsp;ACL.

27
00:02:31,680 --> 00:02:37,520
However, in modern Cisco IOS you can also&nbsp;
configure numbered ACLs in the exact same way as&nbsp;&nbsp;

28
00:02:37,520 --> 00:02:43,280
named ACLs. Here’s a numbered ACL, configured&nbsp;
in the same way as the named ACL above.&nbsp;&nbsp;

29
00:02:44,160 --> 00:02:48,080
Be aware that this is just a different&nbsp;
way of configuring numbered ACLs,&nbsp;&nbsp;

30
00:02:48,080 --> 00:02:52,000
but if you check the ACL in the running&nbsp;
config it will be displayed as if it&nbsp;&nbsp;

31
00:02:52,000 --> 00:02:56,000
was configured using the traditional&nbsp;
method, directly from global config mode.

32
00:02:57,520 --> 00:03:03,200
Let me demonstrate. From global config&nbsp;
mode I entered IP ACCESS-LIST STANDARD and&nbsp;&nbsp;

33
00:03:03,200 --> 00:03:08,800
then checked the options. Notice that both&nbsp;
numbered and named ACLs are valid options.&nbsp;&nbsp;

34
00:03:10,000 --> 00:03:15,920
So, I configured ACL 1 using the named ACL&nbsp;
configuration method, IP ACCESS-LIST STANDARD&nbsp;&nbsp;

35
00:03:15,920 --> 00:03:22,400
1 and then the two separate entries. However,&nbsp;
after checking the running config it displays&nbsp;&nbsp;

36
00:03:22,400 --> 00:03:26,880
as if I configured it using the traditional&nbsp;
numbered ACL method, configuring the entries&nbsp;&nbsp;

37
00:03:26,880 --> 00:03:32,800
from global config mode. If it ends up being&nbsp;
just like a regular numbered ACL, why configure&nbsp;&nbsp;

38
00:03:32,800 --> 00:03:38,080
it in named ACL config mode? Well, there are&nbsp;
a few advantages to using this config mode.

39
00:03:39,440 --> 00:03:44,880
Let me show you those advantages. First, you&nbsp;
can easily delete individual ACL entries with&nbsp;&nbsp;

40
00:03:44,880 --> 00:03:51,760
the command NO, followed by the entry number.&nbsp;
Let’s see how that works. First, I used DO SHOW&nbsp;&nbsp;

41
00:03:51,760 --> 00:03:57,600
ACCESS-LISTS, and you can see an ACL that I have&nbsp;
configured. It has four entries, with sequence&nbsp;&nbsp;

42
00:03:57,600 --> 00:04:03,600
numbers 10, 20, 30, and 40. These are the default&nbsp;
sequence numbers, starting at 10 and increasing&nbsp;&nbsp;

43
00:04:03,600 --> 00:04:09,440
by 10, but remember that in named ACL config mode&nbsp;
you can also specify the sequence number manually.&nbsp;&nbsp;

44
00:04:10,880 --> 00:04:15,840
Okay, then I used the command NO 30&nbsp;
from named ACL config mode for ACL 1.&nbsp;&nbsp;

45
00:04:16,880 --> 00:04:21,360
Then I checked the ACL again, and now you&nbsp;
can see that entry 30 has been deleted.&nbsp;&nbsp;

46
00:04:21,920 --> 00:04:27,120
This is very convenient for editing&nbsp;
ACLs. How about when configuring ACLs&nbsp;&nbsp;

47
00:04:27,120 --> 00:04:30,560
using the traditional numbered ACL&nbsp;
method, from global config mode?

48
00:04:31,760 --> 00:04:38,000
Let’s see how it works. Here’s the same ACL,&nbsp;
with the same four entries. I also checked it&nbsp;&nbsp;

49
00:04:38,000 --> 00:04:44,080
out in the running-config. Then I tried to delete&nbsp;
the same entry as before, sequence number 30,&nbsp;&nbsp;

50
00:04:44,080 --> 00:04:54,880
by using NO in front of the command. NO&nbsp;
ACCESS-LIST 1 DENY 192.168.3.0 0.0.0.255. So,&nbsp;&nbsp;

51
00:04:54,880 --> 00:05:01,360
did that delete that entry? I checked with SHOW&nbsp;
ACCESS-LISTS, but nothing appears. Just to make&nbsp;&nbsp;

52
00:05:01,360 --> 00:05:07,200
sure I checked the running-config, but again&nbsp;
nothing was displayed. I deleted that entry,&nbsp;&nbsp;

53
00:05:07,200 --> 00:05:12,960
but I didn’t just delete that entry. I deleted&nbsp;
the whole ACL! When configuring or editing&nbsp;&nbsp;

54
00:05:12,960 --> 00:05:18,320
numbered ACLs from global config mode, you can’t&nbsp;
delete individual entries, you can only delete&nbsp;&nbsp;

55
00:05:18,320 --> 00:05:24,480
the entire ACL. So, if you want to edit it you&nbsp;
have to delete it and then remake it from zero.&nbsp;&nbsp;

56
00:05:25,360 --> 00:05:32,160
If an ACL has many entries, this is obviously not&nbsp;
a fun task. So, if you want to edit an ACL you&nbsp;&nbsp;

57
00:05:32,160 --> 00:05:38,160
definitely should use named ACL config mode. Note&nbsp;
that, if you prefer, you can configure a numbered&nbsp;&nbsp;

58
00:05:38,160 --> 00:05:44,480
ACL in global config mode, and then just use named&nbsp;
ACL config mode when you need to edit the ACL.

59
00:05:45,840 --> 00:05:49,680
Okay, so that’s the first advantage&nbsp;
of using named ACL config mode,&nbsp;&nbsp;

60
00:05:49,680 --> 00:05:54,640
even if you’re configuring numbered ACLs.&nbsp;
You can delete individual entries with NO,&nbsp;&nbsp;

61
00:05:54,640 --> 00:06:00,560
followed by the entry number. Here’s another&nbsp;
advantage. You can insert new entries in between&nbsp;&nbsp;

62
00:06:00,560 --> 00:06:06,880
other entries by specifying the sequence number.&nbsp;
When configuring an ACL from global config mode,&nbsp;&nbsp;

63
00:06:06,880 --> 00:06:12,080
you can’t specify the sequence number. The&nbsp;
entry is simply added to the end of the ACL,&nbsp;&nbsp;

64
00:06:12,080 --> 00:06:16,800
and the sequence number is automatically set to 10&nbsp;
higher than the current highest sequence number.&nbsp;&nbsp;

65
00:06:18,000 --> 00:06:22,960
However from named ACL config mode you can&nbsp;
set the sequence number, so you can insert&nbsp;&nbsp;

66
00:06:22,960 --> 00:06:29,520
new entries in the middle of an ACL. Let’s&nbsp;
take a look. Here’s that same ACL from before,&nbsp;&nbsp;

67
00:06:29,520 --> 00:06:34,720
after deleting entry 30. Let’s configure&nbsp;
a new entry with sequence number 30.&nbsp;&nbsp;

68
00:06:35,680 --> 00:06:45,120
So, I used 30 DENY 192.168.2.0 0.0.0.255 to create&nbsp;
a new entry, specifying the sequence number of 30.&nbsp;&nbsp;

69
00:06:45,840 --> 00:06:51,520
Then I checked the ACL, and you can see the new&nbsp;
entry was inserted between entries 20 and 40,&nbsp;&nbsp;

70
00:06:51,520 --> 00:06:57,120
and it has the sequence number of 30 that I&nbsp;
specified. I also checked the running config,&nbsp;&nbsp;

71
00:06:57,120 --> 00:07:01,120
and notice as I showed you before that it&nbsp;
is displayed like the ACL was configured&nbsp;&nbsp;

72
00:07:01,120 --> 00:07:07,600
in global config mode, and the new entry was&nbsp;
inserted between the 2nd and 4th entries. Okay,&nbsp;&nbsp;

73
00:07:07,600 --> 00:07:13,360
those are a couple advantages of using named ACL&nbsp;
config mode even when configuring numbered ACLs.

74
00:07:15,360 --> 00:07:18,320
Let me show you one more&nbsp;
powerful method of editing ACLs.&nbsp;&nbsp;

75
00:07:19,120 --> 00:07:22,400
There is a resequencing&nbsp;
function that helps edit ACLs.&nbsp;&nbsp;

76
00:07:23,440 --> 00:07:30,320
The command is IP ACCESS-LIST RESEQUENCE, followed&nbsp;
by the ACL ID, whether that’s a number or a name,&nbsp;&nbsp;

77
00:07:30,320 --> 00:07:34,880
and then the starting sequence number and the&nbsp;
increment that you want to use to increase the&nbsp;&nbsp;

78
00:07:34,880 --> 00:07:39,840
sequence numbers. Okay, that might be hard to&nbsp;
understand, so let me show you how it works.&nbsp;&nbsp;

79
00:07:41,120 --> 00:07:46,880
Here’s an ACL, but notice the sequence numbers. It&nbsp;
seems someone made the bad decision of sequencing&nbsp;&nbsp;

80
00:07:46,880 --> 00:07:55,120
the entries 1, 2, 3, 4, and 5. Note that the&nbsp;
displayed order is 1, 3, 2, 4, 5, but that’s&nbsp;&nbsp;

81
00:07:55,120 --> 00:08:01,760
just because of what I explained in the previous&nbsp;
video, IOS sometimes reorders the /32 ACL entries.&nbsp;&nbsp;

82
00:08:02,880 --> 00:08:08,080
So, what’s bad about these entry numbers? Well,&nbsp;
now it’s impossible to insert an entry in between&nbsp;&nbsp;

83
00:08:08,080 --> 00:08:13,440
the other entries. For example, maybe you want to&nbsp;
insert another deny entry somewhere in the middle.&nbsp;&nbsp;

84
00:08:14,240 --> 00:08:17,760
However, it’s impossible because there&nbsp;
are no free sequence numbers in between.&nbsp;&nbsp;

85
00:08:18,960 --> 00:08:26,320
Let’s use the resequence command to fix this.&nbsp;
I used the command IP ACCESS-LIST RESEQUENCE 1&nbsp;&nbsp;

86
00:08:26,320 --> 00:08:32,640
10 10. 1 is the ACL number, what&nbsp;
about those two 10s? The first one&nbsp;&nbsp;

87
00:08:32,640 --> 00:08:38,080
is the starting sequence number. It means, change&nbsp;
the sequence number of the first entry to 10.&nbsp;&nbsp;

88
00:08:39,120 --> 00:08:44,560
How about the second 10 of the command?&nbsp;
It’s the increment. It means, add 10 for&nbsp;&nbsp;

89
00:08:44,560 --> 00:08:50,320
every entry after that, after the first&nbsp;
entry. So, I used SHOW ACCESS-LISTS again,&nbsp;&nbsp;

90
00:08:50,960 --> 00:08:58,400
and the ACL has been resequenced. Note that the&nbsp;
same order is kept, DENY 192.168.1.1 at the top,&nbsp;&nbsp;

91
00:08:59,120 --> 00:09:07,280
then DENY 3.1, then DENY 2.1, then DENY 4.1, and&nbsp;
finally PERMIT ANY. However, the sequence numbers&nbsp;&nbsp;

92
00:09:07,280 --> 00:09:12,400
have been changed, starting at 10 for the top&nbsp;
entry and adding 10 for each entry after that.&nbsp;&nbsp;

93
00:09:13,200 --> 00:09:18,800
That’s how ACL resequencing works. Now it’s simple&nbsp;
to add new entries in between the current entries.&nbsp;&nbsp;

94
00:09:19,920 --> 00:09:25,200
Note that this command is done from global config&nbsp;
mode. It works for numbered and named ACLs,&nbsp;&nbsp;

95
00:09:25,200 --> 00:09:28,320
standard and extended ACLs, so all ACLs.

96
00:09:30,720 --> 00:09:37,120
Okay, let’s get to the main part of this&nbsp;
lecture, extended ACLs. Extended ACLs function&nbsp;&nbsp;

97
00:09:37,120 --> 00:09:42,640
mostly the same as standard ACLs. They can be&nbsp;
numbered or named, just like standard ACLs.&nbsp;&nbsp;

98
00:09:43,920 --> 00:09:47,840
If you configure an extended numbered&nbsp;
ACL, you can use the following ranges.&nbsp;&nbsp;

99
00:09:48,560 --> 00:09:56,080
100 to 199, and 2000 to 2699. You definitely&nbsp;
should memorize these ranges for the exam.&nbsp;&nbsp;

100
00:09:56,880 --> 00:10:04,160
Make sure you know the standard ACL ranges&nbsp;
from last video too, 1 to 99 and 1300 to 1999.&nbsp;&nbsp;

101
00:10:05,600 --> 00:10:09,600
Extended ACLs are processed from top&nbsp;
to bottom, just like standard ACLs.&nbsp;&nbsp;

102
00:10:10,400 --> 00:10:15,200
However, here’s the big difference. They&nbsp;
can match traffic based on more parameters,&nbsp;&nbsp;

103
00:10:15,200 --> 00:10:19,120
so they are more precise, and&nbsp;
more complex, than standard ACLs.&nbsp;&nbsp;

104
00:10:20,400 --> 00:10:24,880
You can really specify exactly what traffic&nbsp;
you want to deny and what traffic you want&nbsp;&nbsp;

105
00:10:24,880 --> 00:10:30,480
to permit, specific kinds of traffic from&nbsp;
specific hosts to specific destinations.&nbsp;&nbsp;

106
00:10:31,600 --> 00:10:35,680
For the purpose of this video, we will&nbsp;
focus on matching based on these parameters.&nbsp;&nbsp;

107
00:10:36,400 --> 00:10:43,360
Layer 4 protocol and port number, source IP&nbsp;
address, and destination IP address. To configure&nbsp;&nbsp;

108
00:10:43,360 --> 00:10:49,520
an extended numbered ACL entry from global config&nbsp;
mode, the command is ACCESS-LIST, then the number.&nbsp;&nbsp;

109
00:10:50,560 --> 00:10:57,840
Make sure this number is in one of the ranges&nbsp;
above, 100 to 199 or 2000 to 2699. Then&nbsp;&nbsp;

110
00:10:57,840 --> 00:11:04,880
PERMIT or DENY. After that you can specify the&nbsp;
protocol, such as TCP or UDP, then the source&nbsp;&nbsp;

111
00:11:04,880 --> 00:11:11,280
IP address and the destination IP address.&nbsp;
How about configuring an extended named ACL?&nbsp;&nbsp;

112
00:11:12,000 --> 00:11:18,880
It starts with IP ACCESS-LIST EXTENDED, and then&nbsp;
the name or number. Just like in standard ACLs,&nbsp;&nbsp;

113
00:11:18,880 --> 00:11:23,040
extended numbered ACLs can also be&nbsp;
configured in named ACL config mode.&nbsp;&nbsp;

114
00:11:24,000 --> 00:11:29,280
Once you’re in extended named ACL config mode,&nbsp;
you can specify the permit or deny statements,&nbsp;&nbsp;

115
00:11:29,280 --> 00:11:35,360
the protocol, source and destination, etc. Because&nbsp;
you already know the differences between numbered&nbsp;&nbsp;

116
00:11:35,360 --> 00:11:41,920
and named ACL configuration, I will just focus on&nbsp;
configuring extended ACLs using the named method.&nbsp;&nbsp;

117
00:11:41,920 --> 00:11:46,160
Just don’t forget that you can configure extended&nbsp;
numbered ACLs from global config mode, too.&nbsp;&nbsp;

118
00:11:47,360 --> 00:11:52,240
Now, as I wrote above, extended ACLs are&nbsp;
much more complex than standard ACLs.&nbsp;&nbsp;

119
00:11:52,880 --> 00:11:56,880
There are lots of different variations and&nbsp;
options that can be used when configuring&nbsp;&nbsp;

120
00:11:56,880 --> 00:12:02,720
the access list entries. I’ll just show you some&nbsp;
basic options that you need to know for the CCNA,&nbsp;&nbsp;

121
00:12:02,720 --> 00:12:08,720
but I won’t explore every possible option that can&nbsp;
be used. If you want to explore the commands more,&nbsp;&nbsp;

122
00:12:08,720 --> 00:12:12,560
try it out in a lab and use the question&nbsp;
mark to see what options there are.

123
00:12:14,560 --> 00:12:20,880
First I’ll explain how extended ACLs can match&nbsp;
based on protocol. From extended named ACL&nbsp;&nbsp;

124
00:12:20,880 --> 00:12:26,960
config mode, I entered DENY and used the question&nbsp;
mark to see the options. Let me point out a few.&nbsp;&nbsp;

125
00:12:28,000 --> 00:12:32,160
First up, you can use an IP protocol&nbsp;
number. What’s an IP protocol number?&nbsp;&nbsp;

126
00:12:32,720 --> 00:12:38,720
Think back to Day 10 of this course, about the&nbsp;
IPv4 header. There is a protocol field which&nbsp;&nbsp;

127
00:12:38,720 --> 00:12:44,880
identifies the protocol that is encapsulated&nbsp;
inside of the IP header, such as TCP or UDP.&nbsp;&nbsp;

128
00:12:45,840 --> 00:12:49,920
So, you can identify the protocol by&nbsp;
the number in the IPv4 protocol field.&nbsp;&nbsp;

129
00:12:50,880 --> 00:12:56,960
Or, you can use the name of the protocol, options&nbsp;
are listed here. Most people prefer the name,&nbsp;&nbsp;

130
00:12:56,960 --> 00:13:01,680
since it’s easier to remember, but if you want to&nbsp;
use the protocol number here are some examples.&nbsp;&nbsp;

131
00:13:02,800 --> 00:13:11,520
IP protocol number 1 is ICMP, 6 is TCP,&nbsp;
17 is UDP, 88 is EIGRP, and 89 is OSPF.&nbsp;&nbsp;

132
00:13:12,240 --> 00:13:17,040
I briefly mentioned some of these earlier in&nbsp;
the course. I recommend remembering these five,&nbsp;&nbsp;

133
00:13:17,040 --> 00:13:22,160
they might come up somewhere on the exam. But&nbsp;
as I said, usually you’ll use the protocol&nbsp;&nbsp;

134
00:13:22,160 --> 00:13:30,960
name in ACLs. Here you can see EIGRP, ICMP,&nbsp;
and OSPF. So, you can use an extended ACL&nbsp;&nbsp;

135
00:13:30,960 --> 00:13:37,200
to block OSPF messages on an interface, for&nbsp;
example. Or deny ICMP packets to deny pings.&nbsp;&nbsp;

136
00:13:38,320 --> 00:13:44,240
However, for this lesson we are going to focus&nbsp;
on these two, TCP and UDP, as well as one more.&nbsp;&nbsp;

137
00:13:44,880 --> 00:13:52,800
That is IP itself. If you use the IP option,&nbsp;
it matches all IP packets. We use this option&nbsp;&nbsp;

138
00:13:52,800 --> 00:13:58,800
when we don’t care about the protocol, we just&nbsp;
want to deny or permit all packets. For example,&nbsp;&nbsp;

139
00:13:58,800 --> 00:14:04,480
if you want to put a ‘permit any’ statement at the&nbsp;
end of an ACL, you would use the IP option here.

140
00:14:06,320 --> 00:14:11,920
Now let’s see how to add the source and&nbsp;
destination IP addresses to this ACL entry. So,&nbsp;&nbsp;

141
00:14:11,920 --> 00:14:18,800
I selected TCP as the protocol. So, any IP packets&nbsp;
with a TCP segment inside will match this part of&nbsp;&nbsp;

142
00:14:18,800 --> 00:14:24,560
the entry. However, we still have to specify the&nbsp;
source and destination IP addresses to match.&nbsp;&nbsp;

143
00:14:25,680 --> 00:14:32,400
Note that, in extended ACLs to specify a /32&nbsp;
source or destination you have to use the HOST&nbsp;&nbsp;

144
00:14:32,400 --> 00:14:37,760
option or specify the wildcard mask. You can’t&nbsp;
just write the address without either of those.&nbsp;&nbsp;

145
00:14:38,720 --> 00:14:41,840
In standard ACLs that is&nbsp;
possible, but not extended.&nbsp;&nbsp;

146
00:14:43,440 --> 00:14:48,480
Okay, so I decided to use ANY to match all&nbsp;
source IP addresses. Now we can specify&nbsp;&nbsp;

147
00:14:48,480 --> 00:14:54,000
the destination IP address. There are many more&nbsp;
options here related to the Layer 4 port number,&nbsp;&nbsp;

148
00:14:54,000 --> 00:14:58,880
but I’ll cover that later. So, for the&nbsp;
destination address these are the options,&nbsp;&nbsp;

149
00:14:59,520 --> 00:15:06,800
the destination address, ANY, or HOST to specify&nbsp;
a single destination. I decided to specify the&nbsp;&nbsp;

150
00:15:06,800 --> 00:15:15,360
destination 10.0.0.0, and now I have to enter the&nbsp;
wildcard mask. I specified a /24 wildcard mask,&nbsp;&nbsp;

151
00:15:15,360 --> 00:15:21,520
and now this entry is complete. So, what is the&nbsp;
function of this entry? It will deny all packets&nbsp;&nbsp;

152
00:15:21,520 --> 00:15:29,360
that encapsulate a TCP segment, from any source&nbsp;
IP address to destination network 10.0.0.0/24.&nbsp;&nbsp;

153
00:15:30,560 --> 00:15:35,440
This is just a single entry, of course, to&nbsp;
write a complete ACL we would probably add&nbsp;&nbsp;

154
00:15:35,440 --> 00:15:40,960
more entries after this, but now I want you to&nbsp;
practice writing a few extended ACL entries.

155
00:15:42,800 --> 00:15:47,200
Here are a few practice questions.&nbsp;
These aren’t entries in the same ACL,&nbsp;&nbsp;

156
00:15:47,200 --> 00:15:51,360
just individual entries so you can&nbsp;
practice writing entries for extended ACLs.&nbsp;&nbsp;

157
00:15:52,400 --> 00:15:57,360
If you can, pause the video and try to write out&nbsp;
each entry on your own before I show the answers.&nbsp;&nbsp;

158
00:15:59,040 --> 00:16:04,320
Okay, let’s check each one, number 1 first.&nbsp;
How can you write an extended ACL entry that&nbsp;&nbsp;

159
00:16:04,320 --> 00:16:12,400
permits all traffic? The answer is PERMIT IP&nbsp;
ANY ANY. We use IP to match all protocols,&nbsp;&nbsp;

160
00:16:12,400 --> 00:16:17,280
and then we can use ANY for both the source&nbsp;
and destination to match all IP addresses.&nbsp;&nbsp;

161
00:16:18,080 --> 00:16:25,760
This is like PERMIT ANY in a standard ACL.&nbsp;
Okay, how about number 2? Prevent 10.0.0.0/16&nbsp;&nbsp;

162
00:16:26,960 --> 00:16:39,040
from sending UDP traffic to 192.168.1.1/32.&nbsp;
Here’s the answer, DENY UDP 10.0.0.0 0.0.255.255&nbsp;&nbsp;

163
00:16:39,600 --> 00:16:46,400
HOST 192.168.1.1. Instead of HOST, another&nbsp;
option is to write out the wildcard mask at&nbsp;&nbsp;

164
00:16:46,400 --> 00:16:54,720
the end instead, 0.0.0.0. Next let’s&nbsp;
check number 3. Prevent 172.16.1.1/32&nbsp;&nbsp;

165
00:16:55,920 --> 00:17:03,840
from pinging hosts in 192.168.0.0/24. What&nbsp;
protocol does ping use? Let’s check the answer.&nbsp;&nbsp;

166
00:17:04,880 --> 00:17:12,640
DENY ICMP, that’s the protocol for ping. I&nbsp;
said we’ll focus on the TCP, UDP, and IP options,&nbsp;&nbsp;

167
00:17:12,640 --> 00:17:20,480
but still make sure you’re aware that ICMP&nbsp;
is used for ping. Then HOST 172.16.1.1&nbsp;&nbsp;

168
00:17:20,480 --> 00:17:29,120
192.168.0.0 0.0.0.255. Again, instead of&nbsp;
HOST you could use the wildcard mask 0.0.0.0.&nbsp;&nbsp;

169
00:17:30,800 --> 00:17:34,640
Okay, we’ll do some more practice later&nbsp;
but for now let’s go a little deeper.

170
00:17:36,800 --> 00:17:43,520
So let’s talk about matching TCP and UDP port&nbsp;
numbers. When you specify TCP or UDP as the&nbsp;&nbsp;

171
00:17:43,520 --> 00:17:49,680
protocol to match, you can optionally specify the&nbsp;
source and/or destination port numbers to match.&nbsp;&nbsp;

172
00:17:50,560 --> 00:17:55,280
This is optional, if you just specify&nbsp;
TCP or UDP without the port numbers,&nbsp;&nbsp;

173
00:17:55,280 --> 00:18:00,000
all port numbers will be matched. So, here’s&nbsp;
the command without specifying the port&nbsp;&nbsp;

174
00:18:00,000 --> 00:18:06,640
numbers. I chose ‘DENY TCP’, but of course this&nbsp;
works with PERMIT statements and with UDP as well.&nbsp;&nbsp;

175
00:18:08,000 --> 00:18:13,200
If you want to specify the source TCP or&nbsp;
UDP port, you specify it after the source&nbsp;&nbsp;

176
00:18:13,200 --> 00:18:19,280
IP address and wildcard mask like this. EQ,&nbsp;
followed by the source port is just one option.&nbsp;&nbsp;

177
00:18:20,080 --> 00:18:26,080
For example, EQ 80 means equal to port&nbsp;
80, so it matches TCP source port 80.&nbsp;&nbsp;

178
00:18:27,040 --> 00:18:33,680
Another option is GT, greater than. For example&nbsp;
GT 80 matches all ports greater than 80,&nbsp;&nbsp;

179
00:18:33,680 --> 00:18:41,680
so 81 and up. There is also LT, less than.&nbsp;
LT 80 matches all port numbers less than 80,&nbsp;&nbsp;

180
00:18:41,680 --> 00:18:49,840
so 79 and below. NEQ is not equal, so for&nbsp;
example NEQ 80 matches all ports except 80.&nbsp;&nbsp;

181
00:18:50,720 --> 00:18:57,920
The final option is RANGE, for example RANGE&nbsp;
80 100 matches all port numbers from 80 to 100.&nbsp;&nbsp;

182
00:18:58,800 --> 00:19:03,200
After the destination IP address, the same&nbsp;
options are available to match the destination&nbsp;&nbsp;

183
00:19:03,200 --> 00:19:10,400
port number. Although you should know these&nbsp;
different options, EQ, GT, LT, NEQ, and RANGE, the&nbsp;&nbsp;

184
00:19:10,400 --> 00:19:16,560
most common choice is EQ, to match traffic for a&nbsp;
specific port number. Hopefully you remember these&nbsp;&nbsp;

185
00:19:16,560 --> 00:19:23,840
port numbers from Day 30 of the course. If not, I&nbsp;
recommend taking the time now to learn them again.

186
00:19:23,840 --> 00:19:29,600
So, in this example I didn’t specify the host&nbsp;
port, I just entered DENY TCP ANY, and then went&nbsp;&nbsp;

187
00:19:29,600 --> 00:19:37,840
straight to the destination IP, HOST 1.1.1.1. Then&nbsp;
I entered EQ to match a specific port, and you can&nbsp;&nbsp;

188
00:19:37,840 --> 00:19:44,320
see the options below. You can enter the specific&nbsp;
port number, or you can enter the keyword instead,&nbsp;&nbsp;

189
00:19:44,320 --> 00:19:51,680
such as WWW to match HTTP, which is port 80. Lots&nbsp;
of common port numbers don’t have a keyword here&nbsp;&nbsp;

190
00:19:51,680 --> 00:19:58,240
you can use, though, so make sure you learn the&nbsp;
actual numbers. So, I entered port 80, for HTTP.&nbsp;&nbsp;

191
00:19:59,440 --> 00:20:05,840
What is the effect of this ACL entry? It denies&nbsp;
all packets destined for IP address 1.1.1.1/32,&nbsp;&nbsp;

192
00:20:07,200 --> 00:20:13,120
TCP port 80. Okay, in the next I’ll have&nbsp;
you practice writing some more ACL entries,&nbsp;&nbsp;

193
00:20:13,120 --> 00:20:18,480
but let me say one more point. After the&nbsp;
destination IP address and/or destination&nbsp;&nbsp;

194
00:20:18,480 --> 00:20:22,960
port numbers, there are many more options&nbsp;
you can use to match in an extended ACL.&nbsp;&nbsp;

195
00:20:23,760 --> 00:20:29,920
These aren’t necessary to learn for the CCNA, but&nbsp;
some options are ACK, to match the TCP ACK flag.&nbsp;&nbsp;

196
00:20:30,880 --> 00:20:35,760
FIN, to match the TCP FIN flag.&nbsp;
SYN, to match the TCP SYN flag.&nbsp;&nbsp;

197
00:20:36,800 --> 00:20:45,600
TTL, to match packets with a specific TTL, time to&nbsp;
live, value in the IPv4 header. And DSCP, to match&nbsp;&nbsp;

198
00:20:45,600 --> 00:20:51,680
packets with a specific DSCP, differentiated&nbsp;
services code point, value in the IPv4 header.&nbsp;&nbsp;

199
00:20:53,040 --> 00:20:58,880
Finally, note that if you specify the protocol,&nbsp;
source IP, source port, destination IP,&nbsp;&nbsp;

200
00:20:58,880 --> 00:21:05,760
destination port, etc, a packet must match ALL&nbsp;
of those values to match the ACL entry. Even if&nbsp;&nbsp;

201
00:21:05,760 --> 00:21:10,880
it matches all except one of the parameters,&nbsp;
the packet won’t match that entry of the ACL.&nbsp;&nbsp;

202
00:21:11,840 --> 00:21:16,320
So, extended ACLs let you be very specific&nbsp;
about what traffic you want to match.

203
00:21:18,320 --> 00:21:23,120
Okay, here’s some more practice for writing&nbsp;
individual extended ACL entries. I recommend&nbsp;&nbsp;

204
00:21:23,120 --> 00:21:29,600
pausing the video to try to solve these yourself,&nbsp;
but now let’s check the answers. Number 1, allow&nbsp;&nbsp;

205
00:21:29,600 --> 00:21:39,840
traffic from 10.0.0.0/16 to access the server at&nbsp;
2.2.2.2/32 using HTTPS. And here’s the answer.&nbsp;&nbsp;

206
00:21:40,400 --> 00:21:47,840
PERMIT TCP, because we need to match HTTPS,&nbsp;
which uses TCP. Then the source IP address is&nbsp;&nbsp;

207
00:21:47,840 --> 00:21:56,240
10.0.0.0/16, and we don’t need to specify a source&nbsp;
port number. The destination IP is 2.2.2.2/32.&nbsp;&nbsp;

208
00:21:58,000 --> 00:22:03,600
I used a /32 wildcard mask, but you can&nbsp;
use HOST 2.2.2.2 instead, of course.&nbsp;&nbsp;

209
00:22:04,560 --> 00:22:13,920
Finally, I used EQ 443 to match only HTTPS, which&nbsp;
uses TCP port 443. Okay, that’s number one. Next,&nbsp;&nbsp;

210
00:22:13,920 --> 00:22:19,680
number 2. Prevent all hosts from using&nbsp;
source UDP port numbers from 20000 to 30000&nbsp;&nbsp;

211
00:22:20,720 --> 00:22:30,080
from accessing the server at 3.3.3.3/32. And&nbsp;
here’s the answer. DENY UDP ANY RANGE 20000&nbsp;&nbsp;

212
00:22:30,080 --> 00:22:38,720
30000 HOST 3.3.3.3. So, this matches all packets&nbsp;
using a UDP source port from 20000 to 30000,&nbsp;&nbsp;

213
00:22:39,600 --> 00:22:50,000
with a destination of 3.3.3.3. Okay, finally&nbsp;
number 3. Allow hosts in 172.16.1.0/24 using a&nbsp;&nbsp;

214
00:22:50,000 --> 00:23:00,240
TCP source port greater than 9999 to access all&nbsp;
TCP ports on server 4.4.4.4/32 except port 23.&nbsp;&nbsp;

215
00:23:01,520 --> 00:23:07,840
Here’s the answer. The protocol is&nbsp;
TCP, the source IP is 172.16.1.0/24,&nbsp;&nbsp;

216
00:23:09,120 --> 00:23:18,880
the source port is anything greater than 9999, the&nbsp;
destination IP is 4.4.4.4/32, and the destination&nbsp;&nbsp;

217
00:23:18,880 --> 00:23:25,440
port is anything except 23. Quite a specific&nbsp;
entry, but that’s the power of extended ACLs.

218
00:23:27,600 --> 00:23:32,640
Okay, let’s return to our network from Day 34&nbsp;
to configure and apply a few extended ACLs.&nbsp;&nbsp;

219
00:23:33,680 --> 00:23:41,920
Here are the requirements. Hosts in&nbsp;
192.168.1.0/24 can’t use HTTPS to access SRV1.&nbsp;&nbsp;

220
00:23:43,200 --> 00:23:53,120
Host in 192.168.2.0/24 can’t access 10.0.2.0/24.&nbsp;
And none of the hosts in 192.168.1.0/24&nbsp;&nbsp;

221
00:23:54,160 --> 00:24:04,480
or 2.0/24 can ping 10.0.1.0/24 or 2.0/24.&nbsp;
So, we’ll use one ACL each to fulfill these&nbsp;&nbsp;

222
00:24:04,480 --> 00:24:10,480
requirements, and in this case they will all&nbsp;
be on R1, I’ll explain why soon. First I’ll&nbsp;&nbsp;

223
00:24:10,480 --> 00:24:19,040
configure an ACL for this requirement, hosts in&nbsp;
192.168.1.0/24 can’t use HTTPS to access SRV 1.&nbsp;&nbsp;

224
00:24:20,000 --> 00:24:26,160
Here’s the ACL. After entering extended named&nbsp;
ACL config mode, I made a deny statement that&nbsp;&nbsp;

225
00:24:26,160 --> 00:24:35,120
matches TCP traffic coming from 192.168.1.0/24.&nbsp;
The destination IP address is 10.0.1.100/32,&nbsp;&nbsp;

226
00:24:36,080 --> 00:24:43,120
SRV1, and the destination port is 443, which&nbsp;
is HTTPS. That fulfills the requirement.&nbsp;&nbsp;

227
00:24:44,160 --> 00:24:51,280
Then I used PERMIT IP ANY ANY to allow all other&nbsp;
traffic. Okay, that’s the ACL, but now we have&nbsp;&nbsp;

228
00:24:51,280 --> 00:24:57,040
to apply it to an interface. Which interface&nbsp;
should we apply it to, and in which direction?&nbsp;&nbsp;

229
00:24:58,320 --> 00:25:03,040
For standard ACLs, the rule is to apply them&nbsp;
as close to the destination as possible.&nbsp;&nbsp;

230
00:25:03,760 --> 00:25:07,840
Why is that? It’s because standard&nbsp;
ACLs aren’t very specific,&nbsp;&nbsp;

231
00:25:07,840 --> 00:25:14,080
they only match the source IP address. So, if you&nbsp;
apply them close to that source, you’ll probably&nbsp;&nbsp;

232
00:25:14,080 --> 00:25:19,440
block more traffic than intended. Because&nbsp;
extended ACLs are much more specific,&nbsp;&nbsp;

233
00:25:19,440 --> 00:25:25,760
the rule is the opposite. Extended ACLs should&nbsp;
be applied as close to the source as possible,&nbsp;&nbsp;

234
00:25:25,760 --> 00:25:31,120
to limit how far the packets travel in the network&nbsp;
before being denied. Because they can be very&nbsp;&nbsp;

235
00:25:31,120 --> 00:25:36,160
specific, if configured correctly there isn’t much&nbsp;
risk of blocking more traffic than you intended.&nbsp;&nbsp;

236
00:25:36,960 --> 00:25:40,800
So, you should apply them close to the&nbsp;
source, so routers don’t waste resources&nbsp;&nbsp;

237
00:25:40,800 --> 00:25:47,200
processing packets that will just be dropped.&nbsp;
So, which interface should we apply this ACL to,&nbsp;&nbsp;

238
00:25:47,200 --> 00:25:55,440
where is the source? We should apply it inbound on&nbsp;
R1’s G0/1 interface. So, if a PC in this network&nbsp;&nbsp;

239
00:25:55,440 --> 00:26:00,800
tries to access SRV1 using HTTPS, the&nbsp;
packet will be dropped right away at R1.

240
00:26:03,280 --> 00:26:11,440
Next up, let’s fulfill that second requirement,&nbsp;
hosts in 192.168.2.0/24 can’t access 10.0.2.0/24.&nbsp;&nbsp;

241
00:26:13,200 --> 00:26:19,040
Again, I’ll create a new ACL on R1. Of course,&nbsp;
if you think you’re ready, pause the video&nbsp;&nbsp;

242
00:26:19,040 --> 00:26:24,800
and try to write out the ACL yourself. But&nbsp;
I’ll show you my solution now. Here it is.&nbsp;&nbsp;

243
00:26:25,600 --> 00:26:30,000
Specifying IP as the protocol basically&nbsp;
matches all packets, anything with an&nbsp;&nbsp;

244
00:26:30,000 --> 00:26:39,680
IP header. Then I simply specified the source,&nbsp;
192.168.2.0/24, and then destination, 10.0.2.0/24.&nbsp;&nbsp;

245
00:26:40,720 --> 00:26:44,480
Finally I added PERMIT IP ANY&nbsp;
ANY to allow all other traffic.&nbsp;&nbsp;

246
00:26:45,440 --> 00:26:51,200
So, which interface should this ACL be applied&nbsp;
to? Remember, extended ACLs should be applied as&nbsp;&nbsp;

247
00:26:51,200 --> 00:26:59,120
close to the source as possible. In this case,&nbsp;
the source is 192.168.2.0/24, so I applied the&nbsp;&nbsp;

248
00:26:59,120 --> 00:27:05,840
ACL inbound on R1’s G0/2 interface. Okay, now&nbsp;
the second requirement has been fulfilled.

249
00:27:07,120 --> 00:27:16,640
Finally, the third requirement. None of the hosts&nbsp;
in 192.168.1.0/24 or 2.0/24 can ping 10.0.1.0/24&nbsp;&nbsp;

250
00:27:16,640 --> 00:27:24,240
or 2.0/24. So, what protocol does ping use? We&nbsp;
should deny that protocol, and make a few entries&nbsp;&nbsp;

251
00:27:24,240 --> 00:27:29,760
to specify each source and destination. Pause the&nbsp;
video if you want to try it out, but here’s my&nbsp;&nbsp;

252
00:27:29,760 --> 00:27:38,160
solution. So, I created three deny entries that&nbsp;
match ICMP, two for source IP 192.168.1.0/24,&nbsp;&nbsp;

253
00:27:38,720 --> 00:27:47,440
but only one for 192.168.2.0/24. Why is that? It’s&nbsp;
because in the previous ACL we already blocked all&nbsp;&nbsp;

254
00:27:47,440 --> 00:27:55,520
traffic from 192.168.2.0/24 to 10.0.2.0/24,&nbsp;
so we don’t need to include it in this ACL.&nbsp;&nbsp;

255
00:27:56,480 --> 00:28:00,000
If you included it, it’s not a problem of&nbsp;
course, but I just wanted to show you that&nbsp;&nbsp;

256
00:28:00,000 --> 00:28:06,640
it’s not necessary. At the end of the ACL, I once&nbsp;
again included a PERMIT IP ANY ANY statement.&nbsp;&nbsp;

257
00:28:07,520 --> 00:28:13,120
Which interface should this ACL be applied to,&nbsp;
and in which direction? We should prevent hosts&nbsp;&nbsp;

258
00:28:13,120 --> 00:28:21,600
in both 192.168.1.0/24 and 2.0/24 from reaching&nbsp;
the servers’ networks. So, I think the best&nbsp;&nbsp;

259
00:28:21,600 --> 00:28:30,160
option is here, outbound on G0/0. This way the&nbsp;
ACL applies to both 192.168.1.0/24 and 2.0/24.

260
00:28:32,640 --> 00:28:34,880
So, here are the three ACLs I just configured.&nbsp;&nbsp;

261
00:28:35,760 --> 00:28:40,320
As I have said before, ACL configuration&nbsp;
can be quite flexible, so this isn’t the&nbsp;&nbsp;

262
00:28:40,320 --> 00:28:45,120
only solution that works. Actually, this is&nbsp;
definitely not the most efficient solution.&nbsp;&nbsp;

263
00:28:45,840 --> 00:28:50,720
If you want a challenge, try to make a more&nbsp;
efficient solution, that uses less ACLs or&nbsp;&nbsp;

264
00:28:50,720 --> 00:28:57,840
less entries, and fulfills the requirements. If&nbsp;
you can find one, post it in the comment section!

265
00:28:58,800 --> 00:29:02,160
Finally, here’s how to check which&nbsp;
ACLs are applied to an interface.&nbsp;&nbsp;

266
00:29:02,800 --> 00:29:09,280
The command is SHOW IP INTERFACE, then the&nbsp;
interface name. We often use SHOW IP INTERFACE&nbsp;&nbsp;

267
00:29:09,280 --> 00:29:14,800
BRIEF, but the regular version of the command&nbsp;
without BRIEF gives us more information. This&nbsp;&nbsp;

268
00:29:14,800 --> 00:29:20,320
is just part of the output, it’s quite long so I&nbsp;
cut it off. Here’s the part I wanted to show you.&nbsp;&nbsp;

269
00:29:20,960 --> 00:29:25,040
Here you can see which ACL is applied&nbsp;
outbound and which is applied inbound,&nbsp;&nbsp;

270
00:29:25,040 --> 00:29:29,440
or if there is no applied ACL it&nbsp;
just says ‘not set’. Of course,&nbsp;&nbsp;

271
00:29:29,440 --> 00:29:33,360
you can also check in the running config,&nbsp;
but it’s always good to know other commands,&nbsp;&nbsp;

272
00:29:33,360 --> 00:29:39,840
both for the exam and for ‘real-world’ purposes.&nbsp;
So, remember that command, SHOW IP INTERFACE.

273
00:29:42,240 --> 00:29:45,840
Before moving on to the quiz, let’s&nbsp;
review what we covered in today’s video.&nbsp;&nbsp;

274
00:29:46,800 --> 00:29:51,760
First I showed you another way to configure&nbsp;
numbered ACLs. Basically, you can configure&nbsp;&nbsp;

275
00:29:51,760 --> 00:29:57,920
numbered ACLs in named ACL config mode. What is&nbsp;
the big advantage of that? It’s editing ACLs.&nbsp;&nbsp;

276
00:29:58,800 --> 00:30:04,720
Named ACL config mode lets you delete individual&nbsp;
ACL entries, and specify the sequence number of&nbsp;&nbsp;

277
00:30:04,720 --> 00:30:10,800
new entries to insert them in the middle of an&nbsp;
ACL. Then I showed you extended numbered and named&nbsp;&nbsp;

278
00:30:10,800 --> 00:30:17,520
ACLs. Extended ACLs are much more powerful than&nbsp;
standard ACLs, as they can match traffic based on&nbsp;&nbsp;

279
00:30:17,520 --> 00:30:23,200
protocol, source and destination IP addresses,&nbsp;
source and destination port numbers, etc.&nbsp;&nbsp;

280
00:30:24,240 --> 00:30:28,480
This makes them more complex to configure, but&nbsp;
you just need some practice to get comfortable&nbsp;&nbsp;

281
00:30:28,480 --> 00:30:34,400
with them. Remember to watch until the end of&nbsp;
the quiz for a bonus question from ExSim for CCNA&nbsp;&nbsp;

282
00:30:34,400 --> 00:30:41,360
by Boson Software, the best practice exams for the&nbsp;
CCNA. Okay, let’s go to question 1 of the quiz.

283
00:30:43,360 --> 00:30:47,280
Which ACL, when applied outbound on R1’s G0/0,&nbsp;&nbsp;

284
00:30:47,280 --> 00:30:54,160
permits only PC1 to access the TFTP server&nbsp;
on SRV1? Below there are four extended ACLs,&nbsp;&nbsp;

285
00:30:54,160 --> 00:30:59,200
100, 101, 102, and 103. Pause the&nbsp;
video to think about your answer.

286
00:31:03,280 --> 00:31:10,880
Okay, the answer is 103. Entry 10 permits&nbsp;
UDP traffic from PC1 to access port 69,&nbsp;&nbsp;

287
00:31:10,880 --> 00:31:15,520
TFTP, on SRV1. Note that,&nbsp;
when entering this command,&nbsp;&nbsp;

288
00:31:15,520 --> 00:31:20,880
I actually entered the port number of 69,&nbsp;
but IOS automatically converted it to TFTP.&nbsp;&nbsp;

289
00:31:22,000 --> 00:31:29,760
Then, entry 20 denies all other hosts from sending&nbsp;
UDP traffic to port 69 on SRV1. Finally, entry 30&nbsp;&nbsp;

290
00:31:29,760 --> 00:31:36,480
permits all other traffic. ACL 102 is similar, but&nbsp;
instead of specifying the port on the destination,&nbsp;&nbsp;

291
00:31:36,480 --> 00:31:42,400
SRV1, it specifies the source port, which&nbsp;
is incorrect. Okay, let’s go to question 2.

292
00:31:44,320 --> 00:31:52,000
What effect will the following command have on&nbsp;
ACL1? Here is the command, NO ACCESS-LIST 1 DENY&nbsp;&nbsp;

293
00:31:52,000 --> 00:32:02,080
10.0.2.0 0.0.0.255. And here is ACL1. A,&nbsp;
traffic from 10.0.2.0/24 will be permitted.&nbsp;&nbsp;

294
00:32:02,880 --> 00:32:09,840
B, ACL 1 will be deleted. C, the command&nbsp;
will not work, it will be rejected. Or D,&nbsp;&nbsp;

295
00:32:09,840 --> 00:32:15,600
traffic to 10.0.2.0/24 will be permitted.&nbsp;
Pause the video to think about your answer.

296
00:32:19,280 --> 00:32:25,120
The answer is B, ACL 1 will be deleted.&nbsp;
Configuring numbered ACLs from global config&nbsp;&nbsp;

297
00:32:25,120 --> 00:32:30,640
mode does not allow you to delete individual&nbsp;
entries. Even if you specify a certain entry with&nbsp;&nbsp;

298
00:32:30,640 --> 00:32:36,880
the NO command, the entire ACL will be deleted.&nbsp;
If you want to delete an individual entry,&nbsp;&nbsp;

299
00:32:36,880 --> 00:32:41,440
you’ll need to use named ACL config&nbsp;
mode. Okay, let’s go to question 3.

300
00:32:43,600 --> 00:32:46,880
Which command was used to resequence ACL 199?&nbsp;&nbsp;

301
00:32:47,680 --> 00:32:54,000
Here’s ACL 199 before being resequenced.&nbsp;
And here it is after. Here are the commands,&nbsp;&nbsp;

302
00:32:54,000 --> 00:32:59,280
which one was used to resequence ACL 199?&nbsp;
Pause the video to think about the answer.

303
00:33:02,080 --> 00:33:11,040
The answer is C, IP ACCESS-LIST RESEQUENCE&nbsp;
199 5 10. After IP ACCESS-LIST RESEQUENCE,&nbsp;&nbsp;

304
00:33:11,040 --> 00:33:16,560
you must specify the name, the new sequence number&nbsp;
of the top entry, and then the increment used&nbsp;&nbsp;

305
00:33:16,560 --> 00:33:21,040
to increase the sequence number of the&nbsp;
following entries. This command tells&nbsp;&nbsp;

306
00:33:21,040 --> 00:33:26,000
the router to use 5 for the first entry, and&nbsp;
then increase it by 10 for entries after that,&nbsp;&nbsp;

307
00:33:26,720 --> 00:33:38,000
so from 1, 2, 3, 4, and 5 it became 5, 15,&nbsp;
25, 35, and 45. Let’s go to question 4.

308
00:33:38,000 --> 00:33:43,440
Which of the following ACLs would prevent&nbsp;
R1 from forwarding OSPF packets out of G0/2?&nbsp;&nbsp;

309
00:33:44,480 --> 00:33:51,840
Below are ACLs 110 to 113. Pause the&nbsp;
video to think about your answer.

310
00:33:52,960 --> 00:33:59,520
The answer is ACL 112. Its first entry&nbsp;
denies protocol number 89, which is OSPF.&nbsp;&nbsp;

311
00:34:00,320 --> 00:34:05,840
PERMIT IP ANY ANY is added to allow other&nbsp;
packets, and then it is applied outbound on G0/2,&nbsp;&nbsp;

312
00:34:06,480 --> 00:34:11,440
so R1 won’t forward OSPF packets&nbsp;
out of that interface. By the way,&nbsp;&nbsp;

313
00:34:11,440 --> 00:34:20,640
protocol number 88 from ACLs 111 and 113 is EIGRP,&nbsp;
not OSPF. Okay, let’s move on to question 5.

314
00:34:23,680 --> 00:34:28,960
ACL 150 isn’t having the intended&nbsp;
effect. How can it be fixed to deny&nbsp;&nbsp;

315
00:34:28,960 --> 00:34:38,080
HTTP and HTTPS traffic from 192.168.1.0/24&nbsp;
to 10.0.2.0/24, but allow other traffic?&nbsp;&nbsp;

316
00:34:38,720 --> 00:34:45,360
Select two. Okay, so you can see ACL 150 and the&nbsp;
network topology below. Here are the options.&nbsp;&nbsp;

317
00:34:46,560 --> 00:34:53,040
A, swap the source and destination IPs.&nbsp;
B, move the PERMIT IP ANY ANY statement&nbsp;&nbsp;

318
00:34:53,040 --> 00:34:59,040
to the beginning of the ACL. C, apply&nbsp;
the ACL inbound on G0/1, not outbound.&nbsp;&nbsp;

319
00:35:00,080 --> 00:35:07,920
D, apply the ACL inbound on G0/0, not G0/1.&nbsp;
E, the protocol should be TCP, not UDP.&nbsp;&nbsp;

320
00:35:08,960 --> 00:35:15,840
Or F, the port numbers should be 88 and 404. Pause&nbsp;
the video to think about your answers, select two.

321
00:35:19,120 --> 00:35:24,800
The answers are C and E. The ACL should be&nbsp;
applied inbound because we are trying to filter&nbsp;&nbsp;

322
00:35:24,800 --> 00:35:33,920
traffic entering the G0/1 interface from the&nbsp;
192.168.1.0/24 subnet. So, C is correct. Also,&nbsp;&nbsp;

323
00:35:33,920 --> 00:35:41,680
HTTP and HTTPS both use TCP as their Layer&nbsp;
4 protocol, not UDP. So E is also correct.&nbsp;&nbsp;

324
00:35:42,720 --> 00:35:48,080
Okay, that’s all for the quiz. Now let’s do&nbsp;
a bonus question from Boson ExSim for CCNA.

325
00:35:51,520 --> 00:35:56,320
Okay, here's today's Boson ExSim practice&nbsp;
question. We have a network here connected&nbsp;&nbsp;

326
00:35:56,320 --> 00:36:02,400
to the Internet. We have Router1, and three&nbsp;
servers. Music Server1, Music Server2,&nbsp;&nbsp;

327
00:36:02,400 --> 00:36:08,880
and a web server. Here's the question. You have&nbsp;
been hired as a consultant for Music World Corp.&nbsp;&nbsp;

328
00:36:09,600 --> 00:36:14,800
You need to limit access from the Internet&nbsp;
to the music download servers, Music Server1&nbsp;&nbsp;

329
00:36:14,800 --> 00:36:20,560
and Music Server2. These two servers should&nbsp;
only allow FTP connections from the Internet.&nbsp;&nbsp;

330
00:36:21,840 --> 00:36:27,600
The web server is not subject to this policy&nbsp;
and should not be restricted. Other servers&nbsp;&nbsp;

331
00:36:27,600 --> 00:36:31,920
on the 10.10.10.0/24 subnet should not&nbsp;
allow any connections from the Internet.&nbsp;&nbsp;

332
00:36:32,800 --> 00:36:39,680
You have already issued the access-list 101&nbsp;
permit tcp any host 10.10.10.20 command and&nbsp;&nbsp;

333
00:36:39,680 --> 00:36:47,280
applied the access list outbound on the F0/0&nbsp;
interface. Okay, so this ACL entry here,&nbsp;&nbsp;

334
00:36:48,800 --> 00:36:56,160
permit TCP any host 10.10.10.20, satisfies this&nbsp;
part of the requirements. The web server is not&nbsp;&nbsp;

335
00:36:56,160 --> 00:37:00,880
subject to this policy and should not be&nbsp;
restricted. So that requirement is already&nbsp;&nbsp;

336
00:37:00,880 --> 00:37:07,360
fulfilled. So, what requirement do we have&nbsp;
to fulfill? It's this one here. You need to&nbsp;&nbsp;

337
00:37:07,360 --> 00:37:12,080
limit access from the Internet to the music&nbsp;
download servers. These two servers should&nbsp;&nbsp;

338
00:37:12,080 --> 00:37:18,800
allow only FTP connections from the Internet.&nbsp;
Okay, so here are the options. We have A, B,&nbsp;&nbsp;

339
00:37:18,800 --> 00:37:25,280
C, and D. So, pause the video, look at these four&nbsp;
access list entries, and select the best answer.&nbsp;&nbsp;

340
00:37:29,840 --> 00:37:37,200
Okay, let's check. So, I think the correct answer&nbsp;
is A, and let me explain. So, we want to permit&nbsp;&nbsp;

341
00:37:37,200 --> 00:37:44,080
FTP connections to Music Server1 and Music&nbsp;
Server2. So we're permitting any source IP&nbsp;&nbsp;

342
00:37:44,080 --> 00:37:52,800
address, so anything from the Internet, so connect&nbsp;
to 10.10.10.0, this is /30. So that includes&nbsp;&nbsp;

343
00:37:52,800 --> 00:37:59,680
Music Server1 and Music Server2. But it&nbsp;
doesn't include Web Server, for example. And&nbsp;&nbsp;

344
00:38:00,480 --> 00:38:08,560
'equals FTP', so that allows FTP connections&nbsp;
to Music Server1 and Music Server2. And then&nbsp;&nbsp;

345
00:38:08,560 --> 00:38:14,720
after that on this access list there would be a&nbsp;
implicit deny, so that denies all other traffic.&nbsp;&nbsp;

346
00:38:14,720 --> 00:38:20,560
So I think that satisfies the requirements. We are&nbsp;
allowing all TCP connections to the web server,&nbsp;&nbsp;

347
00:38:21,200 --> 00:38:27,040
and we are allowing only FTP connections to Music&nbsp;
Server1 and Music Server2, and then the implicit&nbsp;&nbsp;

348
00:38:27,040 --> 00:38:33,280
deny blocks all other traffic. Okay, so let's&nbsp;
check the answer. I'll click on show answer.&nbsp;&nbsp;

349
00:38:34,720 --> 00:38:38,880
And that is correct. So,&nbsp;
here is Boson's explanation.&nbsp;&nbsp;

350
00:38:39,760 --> 00:38:43,600
You can pause the video here if you want to&nbsp;
read the explanation, and I recommend you do.&nbsp;&nbsp;

351
00:38:44,560 --> 00:38:47,840
As I have said before, this is one of&nbsp;
the great things about Boson ExSim.&nbsp;&nbsp;

352
00:38:54,400 --> 00:38:58,480
Okay, so that's the explanation. There&nbsp;
are also references to the chapter in&nbsp;&nbsp;

353
00:38:58,480 --> 00:39:02,560
Cisco's official cert guide and some&nbsp;
Cisco documentation which you can read.&nbsp;&nbsp;

354
00:39:06,560 --> 00:39:10,960
Okay, that's Boson ExSim for the&nbsp;
CCNA. If you want to get ExSim,&nbsp;&nbsp;

355
00:39:10,960 --> 00:39:16,400
follow the link in the video description. These&nbsp;
are by far the best practice exams for the CCNA.&nbsp;&nbsp;

356
00:39:16,400 --> 00:39:18,880
Once again, follow that link&nbsp;
in the video description.

357
00:39:21,520 --> 00:39:23,920
There are supplementary materials for this video.&nbsp;&nbsp;

358
00:39:24,560 --> 00:39:28,000
There is a flashcard deck to&nbsp;
use with the software ‘Anki’.&nbsp;&nbsp;

359
00:39:28,000 --> 00:39:31,920
There will also be a packet tracer practice&nbsp;
lab so you can get some hands-on practice.&nbsp;&nbsp;

360
00:39:32,640 --> 00:39:38,160
That will be in the next video. Sign up for my&nbsp;
mailing list via the link in the description,&nbsp;&nbsp;

361
00:39:38,160 --> 00:39:41,840
and I’ll send you all of the flashcards&nbsp;
and packet tracer lab files for the course.

362
00:39:43,840 --> 00:39:47,920
Before finishing today’s video I want&nbsp;
to thank my JCNP-level channel members.&nbsp;&nbsp;

363
00:39:48,560 --> 00:39:55,520
To join, please click the ‘Join’ button under the&nbsp;
video. Thank you to Aaron, Junhong, OJ, Magrathea,&nbsp;&nbsp;

364
00:39:55,520 --> 00:40:00,800
TheGunguy, Njabulo, Benjamin, Tshepiso,&nbsp;
Justin, Prakaash, Nasir, Erlison,&nbsp;&nbsp;

365
00:40:00,800 --> 00:40:07,120
Apogee, Marko, Flodo , Daming, Joshua,&nbsp;
Jhilmar, Ed, Value, John, Funnydart, Scott,&nbsp;&nbsp;

366
00:40:07,120 --> 00:40:13,600
Marek, Velvijaykum, C Mohd, Mark, Yousif, Sidi,&nbsp;
Boson Software, Devin, Lito, Yonatan, and Vance.&nbsp;&nbsp;

367
00:40:14,640 --> 00:40:18,480
Sorry if I pronounced your name incorrectly,&nbsp;
but thank you so much for your support.&nbsp;&nbsp;

368
00:40:19,280 --> 00:40:25,840
This is the list of JCNP-level members at the time&nbsp;
of recording by the way, November 29th 2020. If&nbsp;&nbsp;

369
00:40:25,840 --> 00:40:30,560
you signed up recently and your name isn’t on&nbsp;
here don’t worry, you’ll be in future videos.

370
00:40:33,040 --> 00:40:36,080
Thank you for watching. Please&nbsp;
subscribe to the channel,&nbsp;&nbsp;

371
00:40:36,080 --> 00:40:40,800
like the video, leave a comment, and share the&nbsp;
video with anyone else studying for the CCNA.&nbsp;&nbsp;

372
00:40:41,920 --> 00:40:47,520
If you want to leave a tip, check the links in the&nbsp;
description. I'm also a Brave verified publisher&nbsp;&nbsp;

373
00:40:47,520 --> 00:40:54,080
and accept BAT, or Basic Attention Token, tips&nbsp;
via the Brave browser. That's all for now.