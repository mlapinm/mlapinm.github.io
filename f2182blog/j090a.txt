1
00:00:00,640 --> 00:00:06,669
Welcome to Jeremy’s IT Lab. This is a free,
complete course for the CCNA. If you like

2
00:00:06,669 --> 00:00:11,720
these videos, please subscribe to follow along
with the series. Also, please like and leave

3
00:00:11,720 --> 00:00:16,139
a comment, and share the video to help spread
this free series of videos. Thanks for your

4
00:00:16,139 --> 00:00:17,660
help.

5
00:00:17,660 --> 00:00:23,400
In this video we will continue our study of
QoS. Quality of Service. In part 1 we covered

6
00:00:23,400 --> 00:00:28,289
voice VLANs and Power over Ethernet in the
first half, and then I briefly introduced

7
00:00:28,289 --> 00:00:34,329
QoS in the second half. Hopefully you understand
the purpose of QoS, which is to prioritize

8
00:00:34,329 --> 00:00:39,970
certain traffic such as voice and video traffic
to reduce the delay, jitter, and loss, and

9
00:00:39,970 --> 00:00:45,399
also to ensure it gets the required bandwidth.
This time we’ll go more in depth about the

10
00:00:45,399 --> 00:00:52,160
terms in exam topic 4.7, such as classification,
marking, queuing, congestion, policing, and

11
00:00:52,160 --> 00:00:58,310
shaping. Note that you don’t need to know
QoS design and configuration for the CCNA.

12
00:00:58,310 --> 00:01:02,670
As long as you understand the topics I introduce
in this video, you should be able to answer

13
00:01:02,670 --> 00:01:05,160
QoS questions on the CCNA exam.

14
00:01:05,160 --> 00:01:12,570
Here’s what we’ll cover in today’s video.
First, classification and marking. This is

15
00:01:12,570 --> 00:01:18,049
how routers and switches identify which traffic
should be given higher priority. Then we’ll

16
00:01:18,049 --> 00:01:23,340
cover queuing and congestion management. I
already introduced these in the previous video,

17
00:01:23,340 --> 00:01:28,590
but let’s go more in depth. Finally shaping
and policing, two ways of controlling the

18
00:01:28,590 --> 00:01:35,140
rate at which traffic enters or exits an interface.
Watch until the end of the video for a bonus

19
00:01:35,140 --> 00:01:40,520
practice question from Boson Software’s
ExSim for CCNA, the best practice exams for

20
00:01:40,520 --> 00:01:42,540
the CCNA.

21
00:01:42,540 --> 00:01:48,670
Let’s begin with classification. As you
know, the purpose of QoS is to give certain

22
00:01:48,670 --> 00:01:54,930
kinds of network traffic priority over others
during times of network congestion. Classification

23
00:01:54,930 --> 00:02:01,421
organizes network traffic, meaning packets,
into traffic classes or categories. So, why

24
00:02:01,421 --> 00:02:08,009
is that important for QoS? Classification
is fundamental to QoS. To give priority to

25
00:02:08,009 --> 00:02:13,430
certain types of traffic, you have to identify
which types of traffic to give priority to.

26
00:02:13,430 --> 00:02:19,520
So, how can we classify traffic? There are
many methods of classifying traffic. Here

27
00:02:19,520 --> 00:02:25,900
are some examples. You can use an ACL. Traffic
permitted by the ACL will be given certain

28
00:02:25,900 --> 00:02:30,569
treatment, for example it could be treated
as high-priority, and other traffic which

29
00:02:30,569 --> 00:02:36,180
is denied by the ACL will not be given that
treatment. This is like how we used ACLs for

30
00:02:36,180 --> 00:02:42,290
dynamic NAT. The ACL isn’t being used to
actually permit or deny traffic, it’s just

31
00:02:42,290 --> 00:02:50,370
being used to identify certain traffic. There
is also NBAR, Network Based Application Recognition.

32
00:02:50,370 --> 00:02:54,989
Sometimes just looking at the Lower-layer
information, such as the TCP or UDP port number

33
00:02:54,989 --> 00:03:02,010
and IP address, isn’t enough to identify
exactly what kind of traffic it is. NBAR performs

34
00:03:02,010 --> 00:03:07,220
what’s called a ‘deep packet inspection’
to look beyond the Layer 3 and 4 information

35
00:03:07,220 --> 00:03:12,840
all the way up to Layer 7 to identify the
specific kind of traffic. However, we won’t

36
00:03:12,840 --> 00:03:18,150
focus on methods like these in this video.
In the Layer 2 and Layer 3 headers there are

37
00:03:18,150 --> 00:03:23,739
specific fields used for this purpose, for
the purpose of classifying traffic. I mentioned

38
00:03:23,739 --> 00:03:29,890
them briefly in previous videos, but finally
let’s take a look at them. The PCP, priority

39
00:03:29,890 --> 00:03:36,340
code point, field of the 802.1Q tag can be
used to identify high or low priority traffic.

40
00:03:36,340 --> 00:03:41,790
Keep in mind that this field can only be used
when there is a dot1q tag, only when a VLAN

41
00:03:41,790 --> 00:03:47,909
tag is added to the Ethernet header. Then
there is the DSCP, Differentiated Services

42
00:03:47,909 --> 00:03:53,700
Code Point, field of the IP header. It can
also be used to identify high or lower priority

43
00:03:53,700 --> 00:03:58,209
traffic. Okay, let’s take a look at each
of these.

44
00:03:58,209 --> 00:04:05,439
First up, PCP. Here you can see an Ethernet
header with a dot1q tag, a VLAN tag. The PCP

45
00:04:05,439 --> 00:04:11,070
field is in this dot1q tag. Here are the fields
of the dot1q tag that I showed you earlier

46
00:04:11,070 --> 00:04:17,130
in the course, and the PCP field is this 3-bit
field here. Note that you might also hear

47
00:04:17,130 --> 00:04:22,700
this field referred to as CoS, class of service.
Don’t mix it up with the entire concept

48
00:04:22,700 --> 00:04:31,530
of QoS, CoS just refers to this part of the
dot1q tag. Its use is defined by IEEE 802.1p.

49
00:04:31,530 --> 00:04:38,410
So, let’s see how it has been defined. Well,
there are 3 bits which gives 8 possible values,

50
00:04:38,410 --> 00:04:44,830
0 to 7. This is how they are defined. You
probably don’t have to memorize all of these,

51
00:04:44,830 --> 00:04:50,700
but I recommend remembering 0 for best effort,
3 for critical applications, 4 for video,

52
00:04:50,700 --> 00:04:58,030
and 5 for voice. Regarding 0, best effort,
what does that mean? Best effort delivery

53
00:04:58,030 --> 00:05:03,260
means there is no guarantee that data is delivered
or that it meets any QoS standard. It’s

54
00:05:03,260 --> 00:05:08,790
regular traffic, not high-priority. This is
the default, by the way, regular traffic will

55
00:05:08,790 --> 00:05:13,990
have a value of ‘0’ in the PCP field.
Since we talked about voice traffic a lot

56
00:05:13,990 --> 00:05:20,590
in the previous video, let me point out something
about 3 and 5. IP phones mark their call signaling

57
00:05:20,590 --> 00:05:27,320
traffic as PCP3. Call signaling traffic is
used to establish phone calls. However, when

58
00:05:27,320 --> 00:05:32,340
the call is established, the actual voice
traffic itself, the audio packets, is marked

59
00:05:32,340 --> 00:05:39,611
as PCP5. I put the term mark in bold because
it’s another important QoS term. Basically

60
00:05:39,611 --> 00:05:46,490
to mark traffic is to set the value in the
PCP or DSCP fields. Then network devices look

61
00:05:46,490 --> 00:05:51,250
at those markings and use them to classify
the traffic as high-priority, low-priority,

62
00:05:51,250 --> 00:05:57,510
etc. So, when an IP phone marks its voice
traffic as PCP5, it’s because it wants the

63
00:05:57,510 --> 00:06:01,620
routers and switches to classify those packets
as high-priority.

64
00:06:01,620 --> 00:06:08,940
Here’s a simple network with a couple PCs
in VLAN10 and IP phones in VLAN20. I want

65
00:06:08,940 --> 00:06:14,320
to demonstrate a very important point about
using PCP to classify traffic. Because the

66
00:06:14,320 --> 00:06:19,520
PCP field is found in the dot1q header, it
can only be used over the following connection

67
00:06:19,520 --> 00:06:26,060
types. First, the obvious one is trunk links.
Traffic sent over a trunk link is tagged with

68
00:06:26,060 --> 00:06:30,680
dot1q, unless the traffic is in the native
VLAN, but let’s assume the native VLAN isn’t

69
00:06:30,680 --> 00:06:36,410
being used. However, as I explained in the
previous video, voice traffic is tagged as

70
00:06:36,410 --> 00:06:41,410
well even over access links. So, assuming
the network is configured so that all PCs

71
00:06:41,410 --> 00:06:46,040
and phones can communicate with each other
as well as over the external network, which

72
00:06:46,040 --> 00:06:52,210
of these links are either trunk links or access
links with a voice VLAN? Well, the connections

73
00:06:52,210 --> 00:06:57,500
between the phones and the switches are access
ports with a voice VLAN. Traffic to and from

74
00:06:57,500 --> 00:07:03,180
the phones will be tagged. And these two connections
will be trunk links, tagging traffic in VLAN

75
00:07:03,180 --> 00:07:10,300
10 or 20. So, over these connections devices
can mark traffic with a specific PCP value

76
00:07:10,300 --> 00:07:15,430
to tell other devices to treat the traffic
with a certain level of priority. And devices

77
00:07:15,430 --> 00:07:20,650
receiving that marked traffic can classify
the traffic as high, medium, low, or whatever

78
00:07:20,650 --> 00:07:26,860
priority based on the PCP marking. Let me
clarify that in this type of network design

79
00:07:26,860 --> 00:07:32,030
traffic from the PCs is not tagged with dot1q
here, so it can’t have a PCP marking over

80
00:07:32,030 --> 00:07:39,030
this link. In addition to that, all traffic
between R1 and R2, or between R2 and external

81
00:07:39,030 --> 00:07:44,940
destinations will not have a dot1q tag. So,
traffic over those links cannot be marked

82
00:07:44,940 --> 00:07:51,710
with a PCP value, PCP cannot be used to classify
traffic. So, that’s a major limitation of

83
00:07:51,710 --> 00:07:58,540
using PCP, a limitation which the Layer 3
classification methods don’t have.

84
00:07:58,540 --> 00:08:05,020
So now let’s look at how marking and classification
is done at Layer 3. In the IPv4 header there

85
00:08:05,020 --> 00:08:11,840
is a byte that is referred to as the ToS byte,
Type of Service. IPv6 also has a byte called

86
00:08:11,840 --> 00:08:18,910
the traffic class byte used for QoS, but let’s
focus on the IPv4 header. It’s this byte

87
00:08:18,910 --> 00:08:25,000
here, the second one in the header after the
version and IHL fields. The modern use of

88
00:08:25,000 --> 00:08:33,210
the ToS byte consists of two fields, DSCP,
differentiated services code point, and ECN,

89
00:08:33,210 --> 00:08:39,150
explicit congestion notification. However,
previously this byte was organized differently.

90
00:08:39,150 --> 00:08:46,050
Here’s the old use of the ToS byte. Three
bits were used for the IPP, IP Precedence,

91
00:08:46,050 --> 00:08:51,280
field. It was used to mark packets according
to their priority, like the PCP field in the

92
00:08:51,280 --> 00:08:58,130
dot1q header. The remaining 5 bits were mostly
defined for some other purpose, but my understanding

93
00:08:58,130 --> 00:09:04,130
is that they weren’t really used. So, 3
bits once again gives 8 possible values here,

94
00:09:04,130 --> 00:09:10,270
just like in the PCP field of the dot1q header.
However, the current use of the ToS byte,

95
00:09:10,270 --> 00:09:19,500
the one shown above, is this. 6 bits for DSCP
and 2 for ECN. 6 bits in DSCP allows for a

96
00:09:19,500 --> 00:09:25,420
total of 64 values, which gives a lot of flexibility
regarding how we can mark and classify traffic

97
00:09:25,420 --> 00:09:28,020
in the network.

98
00:09:28,020 --> 00:09:34,430
Before going in depth about DSCP, let’s
take a quick look at IPP. The standard IPP

99
00:09:34,430 --> 00:09:40,660
markings are similar to PCP. 6 and 7 are reserved
for what’s called ‘network control’

100
00:09:40,660 --> 00:09:46,700
traffic. That refers to traffic like OSPF
messages sent between routers. Interactive

101
00:09:46,700 --> 00:09:54,460
voice traffic is marked as IPP 5, interactive
video traffic is marked as IPP 4, IPP 3 is

102
00:09:54,460 --> 00:10:00,210
used for voice signaling traffic, for setting
up and tearing down phone calls. And IPP 0

103
00:10:00,210 --> 00:10:05,630
is used for best effort traffic, regular data
traffic without any special requirements.

104
00:10:05,630 --> 00:10:12,320
So, with 6 and 7 reserved, only 6 possible
values remain. Although 6 is sufficient for

105
00:10:12,320 --> 00:10:19,000
many networks, the QoS requirements of some
more complex networks demand more flexibility.

106
00:10:19,000 --> 00:10:24,940
And because IPP only used 3 bits of the ToS
byte and the other 5 largely weren’t used,

107
00:10:24,940 --> 00:10:30,991
it was decided that an extra 3 bits would
be added to IPP to make DSCP, differentiated

108
00:10:30,991 --> 00:10:34,000
services code point.

109
00:10:34,000 --> 00:10:42,120
Now let’s take a look at DSCP. RFC 2474,
which was published in 1998, defines the DSCP

110
00:10:42,120 --> 00:10:49,220
field, and then other ‘DiffServ’, differentiated
services, RFCs after it elaborate on the use

111
00:10:49,220 --> 00:10:57,030
of the field. With IPP updated to DSCP, new
standard markings had to be decided upon.

112
00:10:57,030 --> 00:11:02,790
Why is that? By having generally agreed upon
standard markings for different kinds of traffic,

113
00:11:02,790 --> 00:11:08,980
QoS design and implementation is simplified,
QoS works better between ISPs and enterprises

114
00:11:08,980 --> 00:11:13,130
because they agree upon the markings that
will be used, and there are other benefits

115
00:11:13,130 --> 00:11:19,561
too. So, a few sets of industry-standard markings
were developed. Before we get into it, let

116
00:11:19,561 --> 00:11:24,480
me say that it might feel a bit overwhelming
trying to remember all of these. I will include

117
00:11:24,480 --> 00:11:28,680
flashcards to help you memorize them, but
really the only ones you need to remember

118
00:11:28,680 --> 00:11:33,510
are some of the more common ones. I’ll point
those ones out after I’ve introduced all

119
00:11:33,510 --> 00:11:40,340
of the markings. So, you should be aware of
the following standard markings. First, default

120
00:11:40,340 --> 00:11:45,700
forwarding, DF. This is the marking for best
effort traffic, which doesn’t have any particular

121
00:11:45,700 --> 00:11:52,490
QoS requirements. Then there is EF, Expedited
Forwarding. It’s used for traffic that requires

122
00:11:52,490 --> 00:11:59,920
low loss, latency, and jitter, which is usually
voice traffic. Next is Assured Forwarding,

123
00:11:59,920 --> 00:12:06,060
AF. This isn’t one marking, but a set of
12 standard values. Finally there is class

124
00:12:06,060 --> 00:12:12,190
selector, CS, which is a set of 8 standard
values. CS provides backward compatibility

125
00:12:12,190 --> 00:12:13,310
with IPP.

126
00:12:13,310 --> 00:12:19,621
We won’t cover QoS configuration because
it’s not a CCNA exam topic, but let me show

127
00:12:19,621 --> 00:12:26,070
you this. I configured a ‘class-map’ called
TEST. When configuring QoS, class maps are

128
00:12:26,070 --> 00:12:31,680
used to identify which traffic you want to
match. I configured a MATCH statement, specifying

129
00:12:31,680 --> 00:12:36,820
that I want to match traffic based on the
DSCP value in the IP header. Let’s check

130
00:12:36,820 --> 00:12:42,210
out the options. At the top is the choice
to simply configure the DSCP value in decimal,

131
00:12:42,210 --> 00:12:50,170
from 0 to 63. Then below that are the 12 AF
values. Notice on the right it shows the binary,

132
00:12:50,170 --> 00:12:59,140
for example AF11 has a binary value of 001
010. Under that there are the CS values. Again,

133
00:12:59,140 --> 00:13:04,841
the binary values are displayed on the right.
I said there are 8 CS values, but only 7 are

134
00:13:04,841 --> 00:13:12,710
shown here. That’s because the other one,
CS0, is the same as DF, default forwarding,

135
00:13:12,710 --> 00:13:20,120
000 000. Finally at the bottom is EF, expedited
forwarding. Okay, let’s look at each of

136
00:13:20,120 --> 00:13:22,820
these in more detail.

137
00:13:22,820 --> 00:13:30,640
First up, DF and EF. DF is used for best-effort
traffic. The recommended DSCP marking is 0.

138
00:13:30,640 --> 00:13:36,920
So, all 6 of these bits will be set to 0.
To make things easier to understand as we

139
00:13:36,920 --> 00:13:41,870
continue, I’ll write the decimal value of
each binary bit above. So, standard network

140
00:13:41,870 --> 00:13:48,940
traffic like sending an email or downloading
a file will probably have 0 0 0 0 0 0 in the

141
00:13:48,940 --> 00:13:55,270
DSCP field of the IP header, indicating that
it doesn’t require any special treatment.

142
00:13:55,270 --> 00:14:01,460
Then there is EF, expedited forwarding. EF
is used for traffic that requires low loss,

143
00:14:01,460 --> 00:14:09,160
latency, and jitter. Typically, voice traffic
is marked as EF. The DSCP marking for EF is

144
00:14:09,160 --> 00:14:18,050
46. So, this is how it looks in binary, 1
0 1 1 1 0. Okay, so these two are pretty easy

145
00:14:18,050 --> 00:14:25,640
to remember. DF is used for best-effort traffic,
and the DSCP value is 0. EF is used for traffic

146
00:14:25,640 --> 00:14:31,690
requiring low-loss, low-latency, and low-jitter,
usually voice traffic, and the DSCP value

147
00:14:31,690 --> 00:14:36,920
is 46. Now things will get a bit more complicated.

148
00:14:36,920 --> 00:14:43,920
So we just looked at default, also called
DF, and EF. Now let’s look at AF, assured

149
00:14:43,920 --> 00:14:49,990
forwarding. AF can be a little tricky to understand,
but I’ll try to explain it clearly.

150
00:14:49,990 --> 00:14:55,420
AF defines four traffic classes. All packets
in a class have the same priority. A higher

151
00:14:55,420 --> 00:15:00,050
class number means higher priority, their
packets will be forwarded with better service

152
00:15:00,050 --> 00:15:05,600
than lower-priority packets. Then, within
each class there are three levels of drop

153
00:15:05,600 --> 00:15:11,420
precedence. A higher drop precedence means
the packet is more likely to drop during congestion

154
00:15:11,420 --> 00:15:19,279
due to WRED. Now, notice that I’ve set up
the 6 DSCP bits a little differently. First

155
00:15:19,279 --> 00:15:24,900
up, in AF this bit on the end is always set
to 0. I’m not exactly sure the reason for

156
00:15:24,900 --> 00:15:31,540
this, it might just be because the designers
of AF decided they didn’t need so many values.

157
00:15:31,540 --> 00:15:37,410
These two bits in red represent the drop precedence.
And these three bits represent the class.

158
00:15:37,410 --> 00:15:44,060
Now, when we write an AF value, it’s written
as AF X Y, with X being the decimal number

159
00:15:44,060 --> 00:15:49,589
of the class and Y being the decimal number
of the drop precedence. Let’s take a look

160
00:15:49,589 --> 00:15:51,850
at an example to see how to do it.

161
00:15:51,850 --> 00:16:01,029
So, we have a binary DSCP value of 001 010.
As I said, in the AF system we write it as

162
00:16:01,029 --> 00:16:06,500
AF X Y, with X being the decimal number of
the class and Y being the decimal number of

163
00:16:06,500 --> 00:16:13,170
the drop precedence. To do that, we split
it up into two parts. Three bits for the class,

164
00:16:13,170 --> 00:16:18,850
two bits for the drop precedence. So, the
decimal of the class is 1, and the decimal

165
00:16:18,850 --> 00:16:25,650
of the drop precedence is also 1. So, this
is AF1 1, or AF11, you can call it whichever

166
00:16:25,650 --> 00:16:33,070
you like. Now, really this is just a 6-bit
DSCP number. If I write the normal 6-bit decimal

167
00:16:33,070 --> 00:16:42,839
values up top, 1 2 4 8 16 and 32, we can calculate
that this is DSCP 10. So, AF11 is the same

168
00:16:42,839 --> 00:16:49,960
value as DSCP10. AF is just a set of standard
DSCP markings, which is easier to work with

169
00:16:49,960 --> 00:16:55,529
than simply having 64 DSCP values with no
system of standard values.

170
00:16:55,529 --> 00:17:04,621
Let’s do some more practice. Now we have
binary 001 100. What AF value is this? This

171
00:17:04,621 --> 00:17:12,300
time it’s class 1, drop precedence 2. So
it’s AF1 2, or AF12. How could you write

172
00:17:12,300 --> 00:17:18,620
this as a normal decimal DSCP value? Here
are the values of each bit again. In this

173
00:17:18,620 --> 00:17:26,590
case, the DSCP value is also written as 12.
So, AF12 is the same as DSCP 12.

174
00:17:26,590 --> 00:17:33,050
Here’s another one. Try to figure it out
on your own, what AF value is this? Also,

175
00:17:33,050 --> 00:17:37,890
how could we write it as a normal decimal
DSCP value? Try to figure it out without me

176
00:17:37,890 --> 00:17:43,340
showing you the value of each binary bit.
Okay, let’s check. Here are the values of

177
00:17:43,340 --> 00:17:52,940
each bit. This is AF2 3, or AF23. Written
as a normal DSCP value it is DSCP 22. Hopefully

178
00:17:52,940 --> 00:17:58,800
you were able to figure that out. If not that’s
fine, let’s practice a couple more times.

179
00:17:58,800 --> 00:18:06,210
This time we have a binary DSCP value of 011
100. What AF value is this, and how is it

180
00:18:06,210 --> 00:18:13,059
written as a normal DSCP value? Let’s check.
Here are the values of each bit. So, this

181
00:18:13,059 --> 00:18:22,700
is AF3 2, or AF32. Written as a normal DSCP
value, it is DSCP 28. So, AF32 is the same

182
00:18:22,700 --> 00:18:24,790
as DSCP 28.

183
00:18:24,790 --> 00:18:30,700
Okay, here’s one more for practice. Again,
what’s the AF value, and how can you write

184
00:18:30,700 --> 00:18:37,880
it as a normal DSCP value? Let’s check.
So, a class of 4 and a drop precedence of

185
00:18:37,880 --> 00:18:48,240
3, so this is AF4 3, or AF43. Written as a
normal DSCP value, it is DSCP 38. So, AF43

186
00:18:48,240 --> 00:18:56,190
is equivalent to DSCP 38. By the way, within
AF, 43 is the highest value. There is no class

187
00:18:56,190 --> 00:19:03,290
5, 6, or 7. Okay, so you should be able to
convert between these AF numbers and DSCP

188
00:19:03,290 --> 00:19:08,110
values. If you want a quick way to calculate
it without writing out the binary every time,

189
00:19:08,110 --> 00:19:16,600
here’s the formula. 8X plus 2Y, again the
class is X and the drop precedence is Y. The

190
00:19:16,600 --> 00:19:21,850
reason for this is that 8 is the lowest value
of the ‘X’ portion, and 2 is the lowest

191
00:19:21,850 --> 00:19:28,600
value of the ‘Y’ portion. So to calculate
it it’s 8X plus 2Y. It’s always best to

192
00:19:28,600 --> 00:19:34,230
understand the binary underneath it all, whether
you’re learning IPv4 addresses, subnetting,

193
00:19:34,230 --> 00:19:40,380
IPv6, matching with ACLs, QoS, whatever. But
after understanding the binary, it’s also

194
00:19:40,380 --> 00:19:44,720
nice to have some shortcuts like this, 8X
plus 2Y.

195
00:19:44,720 --> 00:19:51,880
So, here’s a summary of all of the AF values.
4 classes with 3 drop precedence values each.

196
00:19:51,880 --> 00:19:58,520
So, within these AF values traffic marked
as AF41 gets the best treatment. It’s in

197
00:19:58,520 --> 00:20:04,501
the highest priority class, but has the lowest
drop precedence. On the other hand, traffic

198
00:20:04,501 --> 00:20:10,150
marked as AF13 gets the worst treatment, being
in the lowest priority class with the highest

199
00:20:10,150 --> 00:20:15,450
drop precedence. I will include flashcards
for all of these to test that you can convert

200
00:20:15,450 --> 00:20:21,540
them from the AF values to the regular DSCP
values. I’m not expecting you to memorize

201
00:20:21,540 --> 00:20:26,850
them, but you should be able to calculate
the DSCP value of a given AF value.

202
00:20:26,850 --> 00:20:34,420
Okay, that’s all for AF. I hope my explanation
was clear. If not, feel free to ask questions.

203
00:20:34,420 --> 00:20:40,500
Finally, let’s look at CS. Fortunately,
CS is actually quite simple.

204
00:20:40,500 --> 00:20:48,400
CS, class selector, defines eight DSCP values
for backward compatibility with IPP. How does

205
00:20:48,400 --> 00:20:55,150
that backward compatibility work? The three
bits that were added for DSCP are set to 0,

206
00:20:55,150 --> 00:21:01,530
and the original IPP bits are used to make
8 possible values. So, here’s the DSCP field

207
00:21:01,530 --> 00:21:07,540
again. Notice that the three bits on the right
are set to 0, and the three bits on the left,

208
00:21:07,540 --> 00:21:14,300
the original IP precedence bits, can be either
0 or 1. Here are the decimal values of those

209
00:21:14,300 --> 00:21:22,590
three bits, 1 2 and 4. So, IPP gives us values
from 0 through 7. The equivalent values in

210
00:21:22,590 --> 00:21:31,650
CS are CS0, CS1, CS2, 3, 4, 5, 6, and 7. Very
simple. Now, you should also know the decimal

211
00:21:31,650 --> 00:21:37,400
DSCP value of these. Although CS is a way
of organizing the DSCP field into a set of

212
00:21:37,400 --> 00:21:44,280
8 values, they are still DSCP values. Fortunately
it is quite simple to convert them, it’s

213
00:21:44,280 --> 00:21:53,190
just 8 multiplied by the CS number. CS0 is
0, CS1 is 8, CS2 is 16, CS3 is 24, CS4 is

214
00:21:53,190 --> 00:22:03,660
32, CS5 is 40, CS6 is 48, and CS7 is 56. Okay,
that’s all for CS, quite simple.

215
00:22:03,660 --> 00:22:12,140
Okay, so we’ve got DF, EF, AF, and CS. How
are we supposed to take those values and actually

216
00:22:12,140 --> 00:22:18,640
use them? RFC 4954 was developed with the
help of Cisco to bring all of these values

217
00:22:18,640 --> 00:22:24,640
together and standardize their use. Many specific
recommendations are given in the RFC, but

218
00:22:24,640 --> 00:22:30,480
here are a few key ones. Voice traffic is
marked as EF, because it requires very low

219
00:22:30,480 --> 00:22:37,160
delay, jitter, and loss. Interactive video
should be marked as AF4x, meaning AF41, 2,

220
00:22:37,160 --> 00:22:45,570
or 3. Streaming video is marked as AF3x, high
priority data is AF2x, and best effort data

221
00:22:45,570 --> 00:22:51,780
is marked as DF, a DSCP value of 0. There
are many more recommendations given within

222
00:22:51,780 --> 00:22:57,501
the RFC, do a google search for it if you’re
interested. However, in the end it’s up

223
00:22:57,501 --> 00:23:03,179
to the engineer designing the QoS policy of
the network which traffic will get which markings.

224
00:23:03,179 --> 00:23:05,370
These are just standard recommendations.

225
00:23:05,370 --> 00:23:12,310
Okay, let’s move on to take a quick look
at the topic of trust boundaries. The trust

226
00:23:12,310 --> 00:23:16,830
boundary of a network defines where devices
trust and don’t trust the QoS markings of

227
00:23:16,830 --> 00:23:22,250
received messages. If the markings are trusted,
that means the device will forward the message

228
00:23:22,250 --> 00:23:26,920
without changing the markings. But if the
markings aren’t trusted, the device will

229
00:23:26,920 --> 00:23:32,420
change the markings according to the configured
policy. So, for example let’s say the trust

230
00:23:32,420 --> 00:23:40,820
boundary is here, at SW1. Phone1 sends a message
marked as EF and CoS5 to SW1. Note that CoS

231
00:23:40,820 --> 00:23:47,940
is referring to the PCP field in the dot1q
header. You may hear it called CoS5 or PCP5,

232
00:23:47,940 --> 00:23:54,120
you should be familiar with both terms. Anyway,
SW1 doesn’t trust the markings from phone1

233
00:23:54,120 --> 00:23:59,410
because it’s from outside of the trust boundary.
So perhaps it changes the DSCP marking to

234
00:23:59,410 --> 00:24:06,240
DF and the CoS marking to 0, before forwarding
it to R1, which forwards it on to R2, with

235
00:24:06,240 --> 00:24:12,530
just the DF marking because there is no dot1q
header. Now, this configuration isn’t ideal.

236
00:24:12,530 --> 00:24:16,549
Usually it’s best to trust the markings
from an IP phone because we want its traffic

237
00:24:16,549 --> 00:24:18,230
to be high priority anyway.

238
00:24:18,230 --> 00:24:23,260
If an IP phone is connected to the switchport,
it is recommended to move the trust boundary

239
00:24:23,260 --> 00:24:28,809
to the IP phone. This is done via configuration
on the switch port connected to the IP phone,

240
00:24:28,809 --> 00:24:35,929
by the way, not directly on the phone itself.
So, if a tech-savvy user is able to mark their

241
00:24:35,929 --> 00:24:40,299
PC’s traffic with a high-priority marking
to get faster service, the marking will be

242
00:24:40,299 --> 00:24:45,790
changed according to the configured policy.
But traffic sent from the phone itself will

243
00:24:45,790 --> 00:24:52,480
be trusted by the switch. In this case, if
phone1 sends an EF and CoS5-marked message

244
00:24:52,480 --> 00:24:59,240
SW1 will trust those markings and not change
them. On the other hand, if PC2 for example

245
00:24:59,240 --> 00:25:04,480
sends an EF-marked packet, the switch should
not trust that, and for example it might change

246
00:25:04,480 --> 00:25:13,010
the EF marking, DSCP 46, to DF, DSCP 0. We
don’t want data applications on the PC being

247
00:25:13,010 --> 00:25:17,540
treated with the same priority as the voice
traffic from the phones. Okay, that’s all

248
00:25:17,540 --> 00:25:22,121
for trust boundaries. You don’t need to
know how to configure them for the exam, but

249
00:25:22,121 --> 00:25:25,799
just be aware of the concept of trust boundaries
and how they work.

250
00:25:25,799 --> 00:25:30,780
Okay, that’s all for classification and
marking. Now let’s move on to queuing and

251
00:25:30,780 --> 00:25:35,800
congestion management. I already introduced
it in the previous video, but there’s a

252
00:25:35,800 --> 00:25:41,450
bit more to be covered for the CCNA. For review,
when a network device receives traffic at

253
00:25:41,450 --> 00:25:46,050
a faster rate than it can forward the traffic
out of the appropriate interface, packets

254
00:25:46,050 --> 00:25:50,540
are placed in that interface’s queue as
they wait to be forwarded. When the queue

255
00:25:50,540 --> 00:25:55,040
becomes full, packets that don’t fit in
the queue are dropped, and this is called

256
00:25:55,040 --> 00:26:03,809
tail drop. RED and WRED, which I already introduced,
drop packets early to avoid tail drop. Here’s

257
00:26:03,809 --> 00:26:09,550
the image I showed last video. The router
is forwarding packets in an FIFO manner, but

258
00:26:09,550 --> 00:26:15,760
the queue gets full and packets start getting
dropped. RED or WRED could help avoid this

259
00:26:15,760 --> 00:26:18,230
by dropping packets earlier.

260
00:26:18,230 --> 00:26:25,120
However, an essential part of QoS is the use
of multiple queues, not just a single queue.

261
00:26:25,120 --> 00:26:30,240
And this is where classification really plays
a role. The device can match traffic based

262
00:26:30,240 --> 00:26:35,559
on various factors, for the example the DSCP
marking in the IP header, but also many other

263
00:26:35,559 --> 00:26:40,820
things, and then place the traffic in the
appropriate queue. However, the device is

264
00:26:40,820 --> 00:26:46,040
only able to forward one frame out of an interface
at once, so a scheduler is used to decide

265
00:26:46,040 --> 00:26:52,179
which queue traffic is forwarded from next.
Prioritization allows the scheduler to give

266
00:26:52,179 --> 00:26:57,230
certain queues more priority than others.
So, this is where the power of QoS really

267
00:26:57,230 --> 00:27:03,490
becomes clear. Here’s that same example
as before, however this time let’s say the

268
00:27:03,490 --> 00:27:07,700
router’s interface forwarding the traffic
has been configured with multiple queues.

269
00:27:07,700 --> 00:27:13,990
Here’s how it works. Ingress traffic is
received by the router. Ingress just means

270
00:27:13,990 --> 00:27:19,630
incoming traffic, traffic entering the router.
Then it performs routing, meaning it decides

271
00:27:19,630 --> 00:27:25,280
which interface to send it out of, as well
as other things like NAT if necessary. Then

272
00:27:25,280 --> 00:27:30,530
it classifies the traffic and places it into
the appropriate queue. In this case there

273
00:27:30,530 --> 00:27:35,590
are four queues and traffic is classified
and placed in a queue depending on, for example,

274
00:27:35,590 --> 00:27:40,919
the DSCP marking. Then the scheduler decides
how much traffic to send from each queue,

275
00:27:40,919 --> 00:27:47,030
in which order, and the router forwards the
traffic, one packet at a time. This is an

276
00:27:47,030 --> 00:27:51,929
oversimplification, but its basically how
it works. After the router decides which interface

277
00:27:51,929 --> 00:27:58,640
to forward the packet out of, it is classified,
queued, scheduled, and then transmitted.

278
00:27:58,640 --> 00:28:04,289
A common scheduling method is weighted round-robin.
round robin means that packets are taken from

279
00:28:04,289 --> 00:28:09,580
each queue in order, cyclically. And weighted
means that more data is taken from high priority

280
00:28:09,580 --> 00:28:14,640
queues each time the scheduler reaches that
queue, so those queues get higher output.

281
00:28:14,640 --> 00:28:22,180
Next, here’s a term you definitely should
know. CBWFQ, class-based weighted fair queuing,

282
00:28:22,180 --> 00:28:27,260
is a popular method of scheduling, using a
weighted round-robin scheduler while guaranteeing

283
00:28:27,260 --> 00:28:32,700
each queue a certain percentage of the interface’s
bandwidth during times of congestion. So,

284
00:28:32,700 --> 00:28:40,169
let’s put these together. Here’s the process
again. Classify the traffic, place it in queues,

285
00:28:40,169 --> 00:28:45,500
schedule it, and transmit. The device is using
a weighted round robin scheduler, sending

286
00:28:45,500 --> 00:28:50,809
a certain amount of traffic from each queue
in cycles. On top of that, each queue gets

287
00:28:50,809 --> 00:28:56,140
a guaranteed minimum amount of bandwidth,
even when the queues are congested. So, this

288
00:28:56,140 --> 00:29:00,840
is getting a lot more advanced than just a
single output queue. But it’s still not

289
00:29:00,840 --> 00:29:07,430
ideal. Specifically it’s not ideal for voice
and video traffic. Even if the traffic receives

290
00:29:07,430 --> 00:29:12,220
a guaranteed minimum amount of bandwidth,
round-robin can add delay and jitter because

291
00:29:12,220 --> 00:29:18,340
even the high-priority voice and video queues
have to wait their turn in the scheduler.

292
00:29:18,340 --> 00:29:25,549
To solve that, we can configure LLQ, low latency
queuing. LLQ designates one, or more, queues

293
00:29:25,549 --> 00:29:31,220
as strict priority queues. Strict priority
means that if there is traffic in the queue,

294
00:29:31,220 --> 00:29:36,200
the scheduler will always take the next packet
from that queue, until it is empty. This is

295
00:29:36,200 --> 00:29:41,120
very effective for reducing the delay and
jitter of voice and video traffic. As soon

296
00:29:41,120 --> 00:29:46,740
as traffic enters the priority queue, the
scheduler will forward that traffic. So, here’s

297
00:29:46,740 --> 00:29:52,201
that same diagram, but this time the top queue
is a strict priority queue. Currently there

298
00:29:52,201 --> 00:29:56,760
is traffic in the queue, so the scheduler
will send all of that traffic before continuing

299
00:29:56,760 --> 00:30:01,590
the weighted round-robin scheduling of the
other queues. But there’s a potential problem

300
00:30:01,590 --> 00:30:07,270
here. LLQ has the downside of potentially
starving other queues if there is always traffic

301
00:30:07,270 --> 00:30:12,110
in the designated strict priority queue. The
other queues might never get a turn to send

302
00:30:12,110 --> 00:30:17,150
traffic. Policing, which I will cover in the
next slide, can control the amount of traffic

303
00:30:17,150 --> 00:30:22,240
allowed in the strict priority queue so that
it can’t take all of the link’s bandwidth.

304
00:30:22,240 --> 00:30:27,050
Okay, so in this section we expanded on the
idea of queuing introduced in the previous

305
00:30:27,050 --> 00:30:33,309
video and examined the use of multiple queues.
A router classifies traffic, for example by

306
00:30:33,309 --> 00:30:38,990
looking at the DSCP value, then places it
in the appropriate queue. The scheduler, for

307
00:30:38,990 --> 00:30:44,570
example using weighted round-robin logic,
forwards packets from each queue in a cycle.

308
00:30:44,570 --> 00:30:49,600
With the addition of LLQ, a strict priority
queue can be used to immediately forward high

309
00:30:49,600 --> 00:30:55,210
priority packets. And by the way, within each
of these queues congestion prevention tools

310
00:30:55,210 --> 00:31:01,450
like RED or WRED can be used to avoid tail
drop if that queue becomes full.

311
00:31:01,450 --> 00:31:08,411
Okay, here are the final topics for today,
shaping and policing. At the CCNA level you

312
00:31:08,411 --> 00:31:13,090
basically just have to understand what these
two QoS functions do, so I’ll summarize

313
00:31:13,090 --> 00:31:19,700
them in one slide. Traffic shaping and policing
are both used to control the rate of traffic.

314
00:31:19,700 --> 00:31:24,340
In the previous examples of queuing and scheduling
we assumed that the interfaces are operating

315
00:31:24,340 --> 00:31:30,481
at full capacity, or beyond full capacity
which is why packets need to be queued. However

316
00:31:30,481 --> 00:31:34,840
there are situations in which it is desirable
to limit the rate of traffic to below the

317
00:31:34,840 --> 00:31:40,900
actual maximum capacity of the link. Shaping
buffers traffic in a queue if the traffic

318
00:31:40,900 --> 00:31:46,461
rate goes over the configured rate. So, this
is the same concept I just demonstrated, however

319
00:31:46,461 --> 00:31:50,970
instead of the actual capacity of the link
being the limiting factor, it’s a maximum

320
00:31:50,970 --> 00:31:57,429
traffic rate configured on the link. Policing
isn’t as polite as shaping. It drops traffic

321
00:31:57,429 --> 00:32:03,820
if the traffic rate goes over the configured
rate. However there is some flexibility. Burst

322
00:32:03,820 --> 00:32:08,480
traffic over the configured rate is allowed
for a short period of time. This accommodates

323
00:32:08,480 --> 00:32:14,280
data applications which are ‘bursty’ in
nature. Instead of a constant stream of data,

324
00:32:14,280 --> 00:32:19,180
they tend to send data in bursts. Just like
the policed data rate, the amount of burst

325
00:32:19,180 --> 00:32:24,770
traffic allowed is also configurable. And
in both cases, classification can be used

326
00:32:24,770 --> 00:32:29,929
to allow for different rates for different
kinds of traffic. Now, why would you want

327
00:32:29,929 --> 00:32:35,270
to limit the rate traffic is sent or received?
To demonstrate one common case, here’s a

328
00:32:35,270 --> 00:32:42,040
sample network. A customer router is connected
to an ISP, Internet Service Provider, router.

329
00:32:42,040 --> 00:32:47,080
The customer configures shaping outbound on
the G0/0 interface of the router, and the

330
00:32:47,080 --> 00:32:53,289
ISP configures policing inbound on the G0/0
interface of the ISP router. Can you think

331
00:32:53,289 --> 00:32:58,860
of a reason why this might be done? Although
the physical interfaces are gigabit ethernet,

332
00:32:58,860 --> 00:33:05,750
1000 megabits per second, perhaps this customer
is paying for a 300 megabit per second connection.

333
00:33:05,750 --> 00:33:11,150
So the ISP says, you paid for a 300 megabit
per second connection, so I’m going to police

334
00:33:11,150 --> 00:33:17,070
incoming traffic to 300 megabits per second.
The customer then decides, if I send traffic

335
00:33:17,070 --> 00:33:22,640
faster than 300 megabits per second it will
be dropped by the ISP, so I will shape the

336
00:33:22,640 --> 00:33:28,390
outgoing traffic to 300 megabits per second.
There are various possible uses for shaping

337
00:33:28,390 --> 00:33:32,360
and policing, but this is a common use of
these tools.

338
00:33:32,360 --> 00:33:37,600
Okay, that was a lot of material to cover.
Let’s review what we covered before moving

339
00:33:37,600 --> 00:33:44,320
on to the quiz. First, we covered classification
and marking. Classification means identifying

340
00:33:44,320 --> 00:33:48,580
different kinds of traffic so that you can
then treat it with an appropriate level of

341
00:33:48,580 --> 00:33:53,539
priority. Marking refers to setting the values
of certain fields in the Layer 2 and Layer

342
00:33:53,539 --> 00:34:00,470
3 headers for use in classification. We covered
the CoS field in the dot1q tag, then the ToS

343
00:34:00,470 --> 00:34:06,910
byte in the IP header, including IP Precedence
and differentiated services code point. I

344
00:34:06,910 --> 00:34:12,609
also introduced the concept of trust boundaries.
I then expanded on queuing and congestion

345
00:34:12,609 --> 00:34:17,980
management, which I introduced in the last
video. I introduced the concept of multiples

346
00:34:17,980 --> 00:34:26,109
queues, weighted round-robin scheduling, CBWFQ,
and LLQ. Marking a packet as EF, for example,

347
00:34:26,109 --> 00:34:31,440
doesn’t actually do anything on its own.
You have to configure tools like CBWFQ and

348
00:34:31,440 --> 00:34:37,950
LLQ to make the devices treat those packets
as high priority. Finally I introduced shaping

349
00:34:37,950 --> 00:34:43,539
and policing, which are both tools to control
the rate traffic is sent or received. Watch

350
00:34:43,539 --> 00:34:48,240
until the end of the quiz for a bonus practice
question from Boson Software’s ExSim for

351
00:34:48,240 --> 00:34:52,569
CCNA. Okay, let’s go to quiz question 1.

352
00:34:52,569 --> 00:34:56,169
SLIDE30
Which of the following CoS markings are consistent

353
00:34:56,169 --> 00:35:01,349
with standard practice? Select three. Okay,
pause the video now to select the correct

354
00:35:01,349 --> 00:35:05,640
answers.

355
00:35:05,640 --> 00:35:13,749
The answers are B, CoS 0 for best effort.
D, CoS 5 for voice. And E, CoS 4 for video.

356
00:35:13,749 --> 00:35:18,950
Here’s that chart again showing the PCP
values, which is another name for the CoS

357
00:35:18,950 --> 00:35:23,999
values, and their traffic types. In your networks
you don’t have to follow this marking scheme,

358
00:35:23,999 --> 00:35:28,660
but this is standard practice. Okay, let’s
go to question 2.

359
00:35:28,660 --> 00:35:31,950
SLIDE31
What bit pattern would you find in the DSCP

360
00:35:31,950 --> 00:35:38,930
field of a packet marked as EF? Pause the
video now to think about the answer.

361
00:35:38,930 --> 00:35:49,410
Okay, the answer is D, 101 110. Here it is,
showing the decimal value of each bit. EF,

362
00:35:49,410 --> 00:35:54,540
which is used for traffic requiring low delay,
jitter, and loss, has a decimal DSCP value

363
00:35:54,540 --> 00:36:01,769
of 46, so the bit pattern is 101 110. Okay,
let’s go to question 3.

364
00:36:01,769 --> 00:36:04,809
SLIDE32
Which of the following AF markings provides

365
00:36:04,809 --> 00:36:12,299
the best service? Pause the video now to think
about the answer.

366
00:36:12,299 --> 00:36:19,650
The answer is B, AF41. Here is the table of
AF markings again. AF41 is in the highest

367
00:36:19,650 --> 00:36:26,290
priority class and it has the lowest drop
precedence. AF43 is also in the high priority

368
00:36:26,290 --> 00:36:34,069
queue, but it has a higher drop precedence.
AF51 and AF61 are not real AF markings, AF

369
00:36:34,069 --> 00:36:40,609
only uses classes 1, 2, 3, and 4. Okay, let’s
go to quiz question 4.

370
00:36:40,609 --> 00:36:43,479
SLIDE33
Which of the following statements represents

371
00:36:43,479 --> 00:36:50,520
general best practice regarding QoS? Pause
the video now to think about the answer.

372
00:36:50,520 --> 00:36:58,530
Okay, the answer is A, trust markings from
IP phones, don’t trust markings from PCs.

373
00:36:58,530 --> 00:37:04,660
IP phones will typically mark their voice
traffic as EF and CoS5, and those markings

374
00:37:04,660 --> 00:37:10,219
should be trusted because voice traffic requires
low delay, jitter, and loss. Markings from

375
00:37:10,219 --> 00:37:15,599
PCs should not be trusted, though. Traffic
from data applications on PCs should be marked

376
00:37:15,599 --> 00:37:20,019
as low priority so that it doesn’t fill
up the high priority queues reserved for voice

377
00:37:20,019 --> 00:37:27,410
traffic. Now, apps like Zoom or WebEx used
on a PC do need high priority service, but

378
00:37:27,410 --> 00:37:33,819
we can mark those packets at the switch or
router. Okay, let’s go to question 5.

379
00:37:33,819 --> 00:37:37,099
SLIDE34
Which of the following creates a strict priority

380
00:37:37,099 --> 00:37:42,489
queue for data that requires low delay, jitter,
and loss? Pause the video now to think about

381
00:37:42,489 --> 00:37:45,119
the answer.

382
00:37:53,910 --> 00:37:58,069
there are packets in that queue the scheduler
will always forward them next, before traffic

383
00:37:58,069 --> 00:38:03,220
in the other queues. Okay, that’s all for
the quiz. Now let’s take a look at a bonus

384
00:38:03,220 --> 00:38:08,314
question in Boson Software’s ExSim for CCNA.
0:39:58.325,1193:02:47,295
Okay, the answer is B, LLQ. Low latency queuing
creates a strict priority queue, meaning if

385
00:39:58,325 --> 00:40:01,160
There are supplementary materials for this

386
00:40:01,160 --> 00:40:06,790
video. There is a flashcard deck to use with
the software ‘Anki’. There will also be

387
00:40:06,790 --> 00:40:12,700
a packet tracer practice lab so you can get
some hands-on practice. Now, QoS configuration

388
00:40:12,700 --> 00:40:17,670
isn’t actually part of the CCNA exam and
we didn’t cover it in this video. But I

389
00:40:17,670 --> 00:40:22,539
think it will be beneficial to see how it’s
configured, so I’ll do a quick demo. That

390
00:40:22,539 --> 00:40:27,769
will be in the next video. Sign up for my
mailing list via the link in the description,

391
00:40:27,769 --> 00:40:32,640
and I’ll send you all of the flashcards
and packet tracer lab files for the course.

392
00:40:32,640 --> 00:40:35,849
SLIDE36
Before finishing today’s video I want to

393
00:40:35,849 --> 00:40:41,119
thank my JCNP-level channel members. To join,
please click the ‘Join’ button under the

394
00:40:41,119 --> 00:40:47,019
video. Thank you to Justin, Christopher, Sam,
Anton, Tebogo, Samil, Anand, Pavel, Abraham,

395
00:40:47,019 --> 00:40:52,410
Serge, Njoku, Viktor, Roger, Raj, Kenneth,
Seamus, Brandon, Marcel, Kone, Donald, C Mohd,

396
00:40:52,410 --> 00:40:56,969
Gustavo, Benjamin, Prakaash, Nasir, Erlison,
Marko, Daming, Ed, John, Funnydart, Velvijaykum,

397
00:40:56,969 --> 00:41:07,690
Mark, Yousif, Boson Software, Devin , Yonatan,
and Vance. Sorry if I pronounced your name

398
00:41:07,690 --> 00:41:13,609
incorrectly, but thank you so much for your
support. This is the list of JCNP-level members

399
00:41:13,609 --> 00:41:19,589
at the time of recording by the way, April
25th 2021. If you signed up recently and your

400
00:41:19,589 --> 00:41:24,809
name isn’t on here don’t worry, you’ll
be in future videos.

401
00:41:24,809 --> 00:41:29,690
Thank you for watching. Please subscribe to
the channel, like the video, leave a comment,

402
00:41:29,690 --> 00:41:34,630
and share the video with anyone else studying
for the CCNA. If you want to leave a tip,

403
00:41:34,630 --> 00:41:40,380
check the links in the description. I'm also
a Brave verified publisher and accept BAT,

404
00:41:40,380 --> 00:41:44,299
or Basic Attention Token, tips via the Brave
browser. That's all for now.