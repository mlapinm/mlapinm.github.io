1
00:00:01,140 --> 00:00:03,770
Welcome to Jeremy’s IT Lab.

2
00:00:03,770 --> 00:00:07,439
This is a free, complete course for the CCNA.

3
00:00:07,439 --> 00:00:11,760
If you like these videos, please subscribe
to follow along with the series.

4
00:00:11,760 --> 00:00:16,870
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:16,870 --> 00:00:18,280
of videos.

6
00:00:18,280 --> 00:00:21,099
Thanks for your help.

7
00:00:21,099 --> 00:00:25,640
This video, unlike the last one, is not going
to be practical, meaning that you won’t

8
00:00:25,640 --> 00:00:29,439
actually go on and configure a Cisco router
or switch.

9
00:00:29,439 --> 00:00:34,620
Also, most of the information in this video
won’t be new, we’ve already covered most

10
00:00:34,620 --> 00:00:36,260
of it in previous videos.

11
00:00:36,260 --> 00:00:41,870
However, I decided to make this video because
I think it’s very important to make sure

12
00:00:41,870 --> 00:00:46,780
you have a good understanding of the complete
process a packet goes through when being sent

13
00:00:46,780 --> 00:00:48,870
across networks.

14
00:00:48,870 --> 00:00:52,489
Hopefully this video will be a little shorter
than the usual ones.

15
00:00:52,489 --> 00:00:54,399
Let’s get started.

16
00:00:54,399 --> 00:00:57,629
So, what will we cover in this video?

17
00:00:57,629 --> 00:01:03,629
We’ll cover the entire process of sending
a packet to a remote destination.

18
00:01:03,629 --> 00:01:09,640
This will include things like ARP, encapsulation,
de-encapsulation, etc.

19
00:01:09,640 --> 00:01:14,940
Of course, there are different levels of depth
we can go into when talking about this process,

20
00:01:14,940 --> 00:01:21,060
and I won’t give unnecessary details that
would only be expected of a CCNP or CCIE,

21
00:01:21,060 --> 00:01:27,390
but in this video I hope to give you a solid
understanding to get you ready for your CCNA.

22
00:01:27,390 --> 00:01:31,400
My hope is that this video will help you put
all of the pieces together that we learned

23
00:01:31,400 --> 00:01:32,490
previously.

24
00:01:32,490 --> 00:01:38,520
So, this is the life of a packet, the process
a packet goes through when being sent to remote

25
00:01:38,520 --> 00:01:39,520
networks.

26
00:01:39,520 --> 00:01:44,439
Here’s the network topology we’ll use
for this video.

27
00:01:44,439 --> 00:01:49,310
If you watched day 11’s video, you should
recognize this topology, as it’s the same

28
00:01:49,310 --> 00:01:52,200
one we used to demonstrate static routing.

29
00:01:52,200 --> 00:02:01,509
We’ll follow a packet being sent from PC1
in the 192.168.1.0/24 network, to PC4 in the

30
00:02:01,509 --> 00:02:05,120
192.168.4.0/24 network.

31
00:02:05,120 --> 00:02:10,360
Let’s assume we have pre-configured static
routes on these devices, so that the packet

32
00:02:10,370 --> 00:02:17,370
will follow the same path as in the static
routing video, that is from PC1 to R1, R2,

33
00:02:17,370 --> 00:02:18,720
R4, and then PC4.

34
00:02:18,720 --> 00:02:25,069
This doesn’t have to be the path the packet
takes, the path that goes via R3 instead of

35
00:02:25,069 --> 00:02:30,190
R2 is valid too, but we’ll stick to the
same path as last time.

36
00:02:30,190 --> 00:02:35,519
Now, since we’re not just looking at Layer
3 in this video, let me add MAC addresses

37
00:02:35,519 --> 00:02:36,930
for these devices.

38
00:02:36,930 --> 00:02:40,400
I’ll use 1111 for PC1.

39
00:02:40,400 --> 00:02:46,319
Now, as you know a MAC address is actually
12 hexadecimal characters, but just to save

40
00:02:46,319 --> 00:02:49,300
space I’ll shorten them to 4.

41
00:02:49,300 --> 00:02:56,560
R1’s G0/2 interface has a mac address of
AAAA, and it’s G0/0 interface has a MAC

42
00:02:56,560 --> 00:02:58,500
address of BBBB.

43
00:02:58,500 --> 00:03:04,220
That’s something I didn’t mention before,
each interface on a network device has a unique

44
00:03:04,220 --> 00:03:06,549
MAC address.

45
00:03:06,549 --> 00:03:11,871
Note that SW1’s interfaces also have MAC
addresses, however for this video it’s not

46
00:03:11,871 --> 00:03:16,680
necessary to know the MAC addresses of the
switches so to avoid clutter, I’ll leave

47
00:03:16,680 --> 00:03:18,700
them out of this diagram.

48
00:03:18,700 --> 00:03:29,040
R2 has a MAC address of CCCC on its g0/0 interface,
and DDDD on its G0/1 interface.

49
00:03:29,040 --> 00:03:38,330
R4 has a MAC address of EEEE on its G0/1 interface
and FFFE on its G0/2 interface.

50
00:03:38,330 --> 00:03:48,920
I didn’t make it all Fs, because the MAC
address of FFFF.FFFF.FFFF, 12 Fs, is the broadcast

51
00:03:48,920 --> 00:03:54,640
MAC address, so just to avoid confusion I
added that E on the end.

52
00:03:54,640 --> 00:03:58,870
Finally, PC4 has a MAC address of 4444.

53
00:03:58,870 --> 00:04:07,579
Okay, so PC1 wants to send some data to PC4,
and its encapsulated in this IP header.

54
00:04:07,579 --> 00:04:16,459
The source is 192.168.1.1, PC1’s IP address,
and the destination is 192.168.4.1, PC4’s

55
00:04:16,459 --> 00:04:18,670
IP address.

56
00:04:18,670 --> 00:04:26,520
Now, because PC1’s IP address is in the
192.168.1.0/24 network, it notices that the

57
00:04:26,520 --> 00:04:33,570
address 192.168.4.1 is in a different network,
so it knows that it needs to send the packet

58
00:04:33,570 --> 00:04:38,770
to its default gateway, which is R1, something
we have already preconfigured.

59
00:04:38,770 --> 00:04:45,760
However, in this example PC1 has not sent
any traffic yet, so it needs to use ARP, the

60
00:04:45,760 --> 00:04:49,630
address resolution protocol, something we
covered in a previous video.

61
00:04:49,630 --> 00:04:54,060
Let’s look at the ARP process once more.

62
00:04:54,060 --> 00:04:57,730
So PC1 makes this ARP request packet.

63
00:04:57,730 --> 00:05:04,650
The source IP is its own IP address and then
destination is R1’s G0/2 interface, which

64
00:05:04,650 --> 00:05:08,630
is the default gateway configured on PC1.

65
00:05:08,630 --> 00:05:11,140
Next is the MAC addresses.

66
00:05:11,140 --> 00:05:16,770
This is a minor point, but note that I put
the source IP before the destination IP, but

67
00:05:16,770 --> 00:05:19,720
the destination MAC before the source MAC.

68
00:05:19,720 --> 00:05:26,480
That’s because, in the IPv4 header the source
IP address comes first, but in the ethernet

69
00:05:26,480 --> 00:05:29,690
header the destination MAC address comes first.

70
00:05:29,690 --> 00:05:32,760
Anyway, just a minor point.

71
00:05:32,760 --> 00:05:38,100
The destination MAC address is the broadcast
MAC address of all Fs, because it

72
00:05:38,100 --> 00:05:44,370
doesn’t know the MAC address of R1, so it
will send the frame to all hosts on the network.

73
00:05:44,370 --> 00:05:47,940
Finally the source MAC address is its own MAC address.

74
00:05:47,940 --> 00:05:54,680
So, it sends the frame, which SW1 receives
and broadcasts out of all its interfaces

75
00:05:54,680 --> 00:05:57,940
except the one it received the frame on.

76
00:05:57,940 --> 00:06:04,380
In this example, only PC1 and R1 are connected
to SW1, so that means that SW1 will forward

77
00:06:04,380 --> 00:06:07,970
the frame out of it’s G0/0 interface.

78
00:06:07,970 --> 00:06:14,940
To translate the meaning of this frame into
English, PC1 is saying ‘Hi 192.168.1.254.

79
00:06:14,940 --> 00:06:18,440
What’s your MAC address?’.

80
00:06:18,440 --> 00:06:22,570
Although I’m not going to really talk about
the switches much in this video, note that

81
00:06:22,570 --> 00:06:29,690
SW1 learns PC1’s MAC address on its G0/1
interface when the frame arrives on its G0/1

82
00:06:29,690 --> 00:06:31,120
interface.

83
00:06:31,120 --> 00:06:36,710
When this broadcast frame arrives on R1, it
notices that the destination IP is its own

84
00:06:36,710 --> 00:06:42,830
IP, so it creates this ARP reply frame to
send back to PC1.

85
00:06:42,830 --> 00:06:49,250
Although the ARP request message was broadcast,
because R1 learned PC1’s IP and MAC addresses

86
00:06:49,250 --> 00:06:55,470
from the ARP request message, the ARP reply
can be sent unicast directly to PC1.

87
00:06:55,470 --> 00:06:58,570
So, that’s what R1 does.

88
00:06:58,570 --> 00:07:09,690
To translate this ARP reply message into english,
basically it means Hi 192.168.1.1 This is 192.168.1.254.

89
00:07:09,690 --> 00:07:13,270
My MAC address is aaaa.

90
00:07:13,270 --> 00:07:17,680
Note that SW1 will learn R1’s MAC address
from this message, when the frame arrives

91
00:07:17,680 --> 00:07:20,080
on its G0/0 interface.

92
00:07:20,080 --> 00:07:27,050
So, now PC1 knows the MAC address of its default
gateway, so it encapsulates the packet with

93
00:07:27,050 --> 00:07:28,240
this ethernet header.

94
00:07:28,240 --> 00:07:35,270
Keep in mind, the original packet is not changed,
the destination address remains PC4’s IP

95
00:07:35,270 --> 00:07:38,830
address, NOT R1’s IP address.

96
00:07:38,830 --> 00:07:43,250
Only at Layer 2 is the destination set to
R1’s MAC address.

97
00:07:43,250 --> 00:07:46,470
So, it sends the frame to R1.

98
00:07:46,470 --> 00:07:51,220
R1 receives it, and removes the ethernet header.

99
00:07:51,220 --> 00:07:54,250
It looks up the destination in its routing
table.

100
00:07:54,250 --> 00:08:01,070
The most specific match is this entry for
the 192.168.4.0/24 network, which specifies

101
00:08:01,070 --> 00:08:05,360
a next hop of 192.168.12.2.

102
00:08:05,360 --> 00:08:11,240
So, R1 will have to encapsulate this packet
with an Ethernet frame with the appropriate

103
00:08:11,240 --> 00:08:15,700
MAC address for 192.168.12.2.

104
00:08:15,700 --> 00:08:20,310
However, R1 doesn’t know R2’s MAC address
yet.  So,

105
00:08:20,310 --> 00:08:23,870
how will it learn R2’s MAC address?

106
00:08:23,870 --> 00:08:26,200
It will use ARP, of course.

107
00:08:26,200 --> 00:08:31,230
The source IP address of this ARP request
will be R1’s, and the destination will be

108
00:08:31,230 --> 00:08:33,060
R2’s.

109
00:08:33,060 --> 00:08:38,970
The destination MAC address is  all Fs,
the broadcast MAC address, because R1 doesn’t

110
00:08:38,970 --> 00:08:46,360
know R2’s MAC address, and the source is
bbbb, which is the MAC address of R1’s G0/0

111
00:08:46,360 --> 00:08:47,410
interface.

112
00:08:47,410 --> 00:08:51,800
So, it sends the arp request, and R2 receives
it.

113
00:08:51,800 --> 00:08:59,830
Basically, what this ARP request says is Hi
192.168.12.2, what’s your MAC address?

114
00:08:59,830 --> 00:09:07,210
R2 receives the broadcast, and since the destination
IP address matches its own IP address, it

115
00:09:07,210 --> 00:09:11,050
makes this ARP reply to send to R1.

116
00:09:11,050 --> 00:09:16,210
Once again, because it learned the IP and
MAC addresses of R1 from the ARP request,

117
00:09:16,210 --> 00:09:18,440
it doesn’t have to broadcast the frame.

118
00:09:18,440 --> 00:09:29,250
So, it sends this ARP reply back, which basically
says hi 192.168.12.1, this is 192.168.12.2.

119
00:09:29,250 --> 00:09:32,200
My MAC address is cccc.

120
00:09:32,200 --> 00:09:38,500
Okay, now R1 knows R2’s MAC address, so
it can encapsulate the packet with an Ethernet

121
00:09:38,500 --> 00:09:44,000
header, inserting R2’s MAC address in the
destination field, and the MAC address of

122
00:09:44,000 --> 00:09:50,620
R1’s G0/0 interface in the source field,
and it sends it to R2.

123
00:09:50,620 --> 00:09:54,230
After receiving the frame, R2 removes the
Ethernet header.

124
00:09:54,230 --> 00:09:59,670
R2 then looks up the destination IP address
in its routing table, and the most specific

125
00:09:59,670 --> 00:10:10,080
match is this one for 192.168.4.0/24, with
a next hop of 192.168.24.4.

126
00:10:10,080 --> 00:10:17,610
Although 192.168.24.0/24 is a connected network
to R2, it doesn’t know the MAC address of

127
00:10:17,610 --> 00:10:18,680
R4.

128
00:10:18,680 --> 00:10:21,250
So, you know what’s next.

129
00:10:21,250 --> 00:10:25,670
R2 will use ARP to discover R4’s MAC address.

130
00:10:25,670 --> 00:10:31,920
R2 prepares this ARP request frame, using
its own IP and MAC addresses for the source,

131
00:10:31,920 --> 00:10:37,990
R4’s IP address as the destination, and
the broadcast MAC address, and it forwards

132
00:10:37,990 --> 00:10:41,420
it out of its G0/1 interface.

133
00:10:41,420 --> 00:10:47,140
With this ARP request, R2 is saying ‘Hi
192.168.24.4.

134
00:10:47,140 --> 00:10:49,520
What’s your MAC address?’

135
00:10:49,520 --> 00:10:56,630
R4 receives the broadcast, and since the destination
IP address is its own it creates this ARP

136
00:10:56,630 --> 00:11:02,940
reply frame to send back to R2, once again
it already knows R2’s IP and MAC addresses

137
00:11:02,940 --> 00:11:07,490
because they were used as the source addresses
for the ARP request.

138
00:11:07,490 --> 00:11:10,810
It sends the unicast frame back to R2.

139
00:11:10,810 --> 00:11:17,250
With this ARP reply, R4 is saying ‘Hi 192.168.24.2.

140
00:11:17,250 --> 00:11:20,240
This is 192.168.24.4.

141
00:11:20,240 --> 00:11:24,840
My MAC address is eeee.’

142
00:11:24,840 --> 00:11:31,620
Now that R2 knows R4’s MAC address, it encapsulates
PC1’s packet with an Ethernet header, with

143
00:11:31,620 --> 00:11:38,910
a destination MAC address of eeee, which is
R4’s g0/1 interface, and a source MAC address

144
00:11:38,910 --> 00:11:44,210
of dddd, which is R2’s g0/1 interface.

145
00:11:44,210 --> 00:11:48,880
R4 receives the frame and removes the Ethernet
header.

146
00:11:48,880 --> 00:11:55,440
It looks up 192.168.4.1 in its routing table,
and the most specific match is this entry

147
00:11:55,440 --> 00:12:02,950
for 192.168.4.0/24, which is directly connected
via the G0/2 interface.

148
00:12:02,950 --> 00:12:08,420
But, once again R4 doesn’t know PC4’s
MAC address yet, so you know what it has to

149
00:12:08,420 --> 00:12:10,300
do next.

150
00:12:10,300 --> 00:12:14,080
It will use ARP to learn PC4’s MAC address.

151
00:12:14,080 --> 00:12:20,220
It prepares this ARP request frame, again
the source IP and MAC addresses are its own,

152
00:12:20,220 --> 00:12:25,881
the destination IP address is PC4’s, and
the destination MAC is the broadcast MAC address

153
00:12:25,881 --> 00:12:28,340
of all F’s.

154
00:12:28,340 --> 00:12:37,500
It sends this message out of its G0/2 interface,
saying Hi 192.168.4.1, what’s your MAC address?

155
00:12:37,500 --> 00:12:43,310
Note that SW4 will learn R4’s MAC address
on its g0/0 interface from the source MAC

156
00:12:43,310 --> 00:12:46,570
address field of this ethernet frame.

157
00:12:46,570 --> 00:12:51,840
After PC4 receives the frame, it checks the
destination IP address.

158
00:12:51,840 --> 00:12:56,720
Since it is its own IP address, it will send
an ARP reply.

159
00:12:56,720 --> 00:13:02,790
The ARP reply will be unicast, using PC4’s
IP and MAC addresses for the source and R4’s

160
00:13:02,790 --> 00:13:06,390
IP and MAC addresses for the destination.

161
00:13:06,390 --> 00:13:13,080
It sends the frame out of its network interface,
saying ‘Hi 192.168.4.254.

162
00:13:13,080 --> 00:13:16,260
This is 192.168.4.1.

163
00:13:16,260 --> 00:13:20,110
My MAC address is 4444.’

164
00:13:20,110 --> 00:13:27,410
Note that SW4 learns PC4’s MAC address when
it arrives on its G0/1 interface.

165
00:13:27,410 --> 00:13:32,640
Now that R4 knows PC4’s MAC address, it
adds an ethernet header to the packet, using

166
00:13:32,640 --> 00:13:38,700
its own MAC address on the G0/2 interface
as the source address, and PC4’s MAC address

167
00:13:38,700 --> 00:13:40,450
as the destination.

168
00:13:40,450 --> 00:13:47,310
R4 sends the frame to PC4, and finally it
has reached its destination.

169
00:13:47,310 --> 00:13:50,920
Notice that the original packet hasn’t changed
throughout the process.

170
00:13:50,920 --> 00:13:59,000
It’s always used the same IP header with
a source IP address of 192.168.1.1 and a destination

171
00:13:59,000 --> 00:14:03,730
IP address of 192.168.4.1.

172
00:14:03,730 --> 00:14:08,630
Also notice that the switches didn’t actually
modify the frames at any point.

173
00:14:08,630 --> 00:14:13,680
The switches forwarded the frames and learned
the MAC addresses, but they don’t actually

174
00:14:13,680 --> 00:14:18,360
de-encapsulate and then re-encapsulate the
packet with a new ethernet header.

175
00:14:18,360 --> 00:14:24,610
Okay, now let’s say PC4 sends a reply back
to PC1, and we’ve configured static routes

176
00:14:24,610 --> 00:14:29,890
on the routers so that the traffic follows
the same path on the way back to PC1, going

177
00:14:29,890 --> 00:14:36,580
via SW4, R4, R2, R1, SW1, and then reaching
PC1.

178
00:14:36,580 --> 00:14:38,510
What will be different?

179
00:14:38,510 --> 00:14:42,090
First off, there will be one major difference.

180
00:14:42,090 --> 00:14:46,380
Since these devices have already gone through
the ARP process, there won’t be any need

181
00:14:46,380 --> 00:14:51,960
for ARP requests and replies, the packet will
simply be forwarded from device to device,

182
00:14:51,960 --> 00:14:57,040
being de-encapsulated and then re-enapsulated
as it is received by and then forwarded by

183
00:14:57,040 --> 00:14:58,150
each router.

184
00:14:58,150 --> 00:15:04,330
So, that’s it, just a basic walkthrough
of how a packet is forwarded between routers

185
00:15:04,330 --> 00:15:07,210
to pass it along to its final destination.

186
00:15:07,210 --> 00:15:13,170
Now, as for today’s quiz, I’ll do something
different than usual.

187
00:15:13,170 --> 00:15:17,770
Instead of having multiple choice questions
as usual, we’ll use this same diagram to

188
00:15:17,770 --> 00:15:19,150
test your understanding.

189
00:15:19,150 --> 00:15:22,279
Let’s get started with the quiz.

190
00:15:22,279 --> 00:15:24,839
Here’s question 1.

191
00:15:24,839 --> 00:15:28,440
PC4 sends a packet to PC1.

192
00:15:28,440 --> 00:15:34,150
What is the destination MAC address when it
is sent from PC4’s network interface?

193
00:15:34,150 --> 00:15:41,320
Pause the video to think about your answer.

194
00:15:41,320 --> 00:15:47,320
The answer is FFFE, which is the MAC address
of R4’s G0/2 interface.

195
00:15:47,320 --> 00:15:54,360
That’s because, to send the packet to PC1,
which is in a remote network, PC4 must send

196
00:15:54,360 --> 00:15:58,430
the packet to its default gateway, R4, first.

197
00:15:58,430 --> 00:16:03,020
To do that, it encapsulates the packet with
an ethernet header, with its default gateway’s

198
00:16:03,020 --> 00:16:04,740
MAC address as the destination.

199
00:16:04,740 --> 00:16:08,840
Okay, let’s go to question 2.

200
00:16:08,840 --> 00:16:13,250
PC4 sends a packet to PC1.

201
00:16:13,250 --> 00:16:19,330
What is the source MAC address when it is
received on R1’s Gi0/0 interface?

202
00:16:19,330 --> 00:16:26,400
Pause the video to think about your answer.

203
00:16:26,400 --> 00:16:33,820
The answer is CCCC, which is the MAC address
of R2’s G0/0 interface.

204
00:16:33,820 --> 00:16:39,330
When R2 sends the packet to R1 en route to
its destination, PC1, it encapsulates the

205
00:16:39,330 --> 00:16:44,399
packet with an Ethernet header using its own
MAC address as the source MAC address.

206
00:16:44,399 --> 00:16:48,220
Okay, let’s go to question 3.

207
00:16:48,220 --> 00:16:52,110
PC4 sends a packet to PC1.

208
00:16:52,110 --> 00:16:58,070
What is the source MAC address when it is
sent from SW1’s Gi0/1 interface?

209
00:16:58,070 --> 00:17:04,950
Pause the video to think about your answer.

210
00:17:04,950 --> 00:17:11,020
The answer is AAAA, which is the MAC address
of R1’s G0/2 interface.

211
00:17:11,020 --> 00:17:17,120
SW1 doesn’t alter the frame to use its own
MAC address, it simply forwards the frame

212
00:17:17,120 --> 00:17:21,699
out of the correct interface, or floods it
if it doesn’t know the destination.

213
00:17:21,699 --> 00:17:25,490
Let’s go to question 4.

214
00:17:25,490 --> 00:17:29,680
PC4 sends a packet to PC1.

215
00:17:29,680 --> 00:17:35,870
What is the destination IP address when it
is sent from R4’s Gi0/1 interface?

216
00:17:35,870 --> 00:17:42,800
Pause the video to think about your answer.

217
00:17:42,800 --> 00:17:49,270
The answer is 192.168.1.1, which is the IP
address of PC1.

218
00:17:49,270 --> 00:17:53,461
Although each router modifies the source and
destination MAC addresses in the Ethernet

219
00:17:53,461 --> 00:17:58,560
header as it forwards the packet, they don’t
modify the original packet itself, so the

220
00:17:58,560 --> 00:18:01,800
destination IP address won’t change.

221
00:18:01,800 --> 00:18:08,240
Since PC4 is sending the packet to PC1, that
means the destination will be PC1’s IP address,

222
00:18:08,240 --> 00:18:10,460
192.168.1.1.

223
00:18:10,470 --> 00:18:14,010
Let’s go to question 5.

224
00:18:14,010 --> 00:18:18,210
PC4 sends a packet to PC1.

225
00:18:18,210 --> 00:18:24,370
What is the source IP address when it is received
on R1’s Gi0/0 interface?

226
00:18:24,370 --> 00:18:30,490
Pause the video to think about your answer.

227
00:18:30,490 --> 00:18:37,130
The answer is 192.168.4.1, which is the IP
address of PC4.

228
00:18:37,130 --> 00:18:41,730
As I said in the last question, the original
packet is not modified as the routers forward

229
00:18:41,730 --> 00:18:48,450
it to its destination, so through the whole
route the source IP address remains PC4’s

230
00:18:48,450 --> 00:18:52,020
IP address, 192.168.4.1.

231
00:18:52,020 --> 00:18:56,910
Okay, for this video there will once again
be supplementary materials to help you practice

232
00:18:56,910 --> 00:18:58,800
what you’ve learned.

233
00:18:58,800 --> 00:19:03,150
There will be a packet tracer lab in which
you use packet tracer’s ‘simulation’

234
00:19:03,150 --> 00:19:08,760
mode to analyze a packet and test your knowledge
and understanding.  That will be the next video.

235
00:19:08,760 --> 00:19:14,280
And that’s it, there won’t be a flashcard
deck this video since there wasn’t actually

236
00:19:14,290 --> 00:19:16,840
any new information in this video.

237
00:19:16,840 --> 00:19:21,470
However, if there are some new points that
you picked up in this video, feel free to

238
00:19:21,470 --> 00:19:23,140
make your own flashcards.

239
00:19:23,140 --> 00:19:28,420
Actually, even though I make flashcard decks
for each video, I also think its a good idea

240
00:19:28,420 --> 00:19:33,790
to make your own flashcards too, if there
is anything else you want to remember.

241
00:19:33,790 --> 00:19:38,230
You can also edit the flashcards I provide,
or delete some flashcards if you think some

242
00:19:38,230 --> 00:19:40,560
of them are not necessary.

243
00:19:40,560 --> 00:19:44,850
The flashcards are just a tool to help you,
so feel free to use them however you think

244
00:19:44,850 --> 00:19:45,850
is best.

245
00:19:45,850 --> 00:19:48,320
Okay, that’s all for today’s video.

246
00:19:48,320 --> 00:19:51,880
Good luck with your studies.

247
00:19:51,880 --> 00:19:52,900
Thank you for watching.

248
00:19:52,900 --> 00:19:57,360
Please subscribe to the channel, like the
video, leave a comment, and share the video

249
00:19:57,360 --> 00:20:00,700
with anyone else studying for the CCNA.

250
00:20:00,700 --> 00:20:03,429
If you want to leave a tip, check the links
in the description.

251
00:20:03,429 --> 00:20:09,450
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

252
00:20:09,450 --> 00:20:10,799
Brave browser.

253
00:20:10,800 --> 00:20:12,380
That's all for now.