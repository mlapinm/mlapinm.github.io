1
00:00:01,780 --> 00:00:04,350
Welcome to Jeremy’s IT Lab.

2
00:00:04,350 --> 00:00:07,870
This is a free, complete course for the CCNA.

3
00:00:07,870 --> 00:00:12,030
If you like these videos, please subscribe
to follow along with the series.

4
00:00:12,030 --> 00:00:16,520
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:16,520 --> 00:00:17,680
of videos.

6
00:00:17,680 --> 00:00:19,970
Thanks for your help.

7
00:00:19,970 --> 00:00:24,650
In this video we will cover standard ACLs,
access control lists.

8
00:00:24,650 --> 00:00:30,880
I’ll be splitting up ACLs into two days,
this video and the next one, Day 35, which

9
00:00:30,880 --> 00:00:34,040
will cover another kind of ACL.

10
00:00:34,040 --> 00:00:38,829
ACLs are in the exam topics under section
5, security fundamentals.

11
00:00:38,829 --> 00:00:45,780
Specifically, topic 5.6, which says you must
be able to configure and verify access control

12
00:00:45,780 --> 00:00:47,149
lists.

13
00:00:47,149 --> 00:00:55,649
It doesn’t specify IPv4 or IPv6, but for
the CCNA you just have to learn IPv4 ACLs.

14
00:00:55,649 --> 00:01:01,260
Perhaps later I’ll make an extra video introducing
IPv6 ACLs, but currently it’s not necessary

15
00:01:01,260 --> 00:01:03,899
for the CCNA.

16
00:01:03,899 --> 00:01:07,540
Here’s what we’ll cover in today’s video.

17
00:01:07,540 --> 00:01:09,780
First, what are ACLs?

18
00:01:09,780 --> 00:01:12,060
I’ll introduce their basic purpose.

19
00:01:12,060 --> 00:01:17,860
I’ll talk about ACL logic, how they are
actually processed by the router.

20
00:01:17,860 --> 00:01:21,980
I’ll introduce the basic types of ACLs on
Cisco routers.

21
00:01:21,980 --> 00:01:28,229
After that I’ll show you how to configure
two kinds of ACLs, standard numbered ACLs

22
00:01:28,229 --> 00:01:31,570
and standard named ACLs.

23
00:01:31,570 --> 00:01:36,380
As always, watch until the end of the quiz
for a bonus question from Boson ExSim for

24
00:01:36,380 --> 00:01:42,409
CCNA, the best practice exams for the CCNA,
and in my opinion the best tool to get ready

25
00:01:42,409 --> 00:01:45,770
for the CCNA exam.

26
00:01:45,770 --> 00:01:48,780
So, what are ACLs?

27
00:01:48,780 --> 00:01:54,210
ACLs, Access Control Lists, actually have
multiple uses.

28
00:01:54,210 --> 00:01:59,610
The name ‘access control’ tells us that
they control access to the network.

29
00:01:59,610 --> 00:02:05,590
For example, Host A should be allowed to access
Server A, but Host B should not be allowed

30
00:02:05,590 --> 00:02:14,400
to access Server A. In Day 34, this video,
and Day 35 we will focus on ACLs from a security

31
00:02:14,400 --> 00:02:15,400
perspective.

32
00:02:15,400 --> 00:02:21,230
So, like I just said, controlling which devices
have access to which parts of the network.

33
00:02:21,230 --> 00:02:27,790
However, although that is the main purpose
of ACLs, that’s not the only purpose.

34
00:02:27,790 --> 00:02:31,500
Later in the course you’ll see some other
uses of ACLs.

35
00:02:31,500 --> 00:02:35,400
But for now, we’ll focus on ACLs from a
security perspective, controlling who has

36
00:02:35,400 --> 00:02:38,250
access to different parts of the network.

37
00:02:38,250 --> 00:02:44,920
So, when using ACLs in this way, ACLs function
as a packet filter, instructing the router

38
00:02:44,920 --> 00:02:49,129
to permit or discard specific traffic.

39
00:02:49,129 --> 00:02:54,010
As you know, if a router receives a packet
and it has a route to the packet’s destination,

40
00:02:54,010 --> 00:02:58,799
it will by default forward the packet according
to its routing table.

41
00:02:58,799 --> 00:03:02,189
However ACLs let us control that.

42
00:03:02,189 --> 00:03:07,489
Even if the router has a route to the destination,
the packet might be discarded if the ACL tells

43
00:03:07,489 --> 00:03:10,319
the router to do so.

44
00:03:10,319 --> 00:03:16,070
ACLs can filter traffic based on the source
and destination IP addresses, source and destination

45
00:03:16,070 --> 00:03:19,510
Layer 4 port numbers, etc.

46
00:03:19,510 --> 00:03:24,940
For the CCNA, we’ll just focus on those
two, IP addresses and port numbers, but you

47
00:03:24,940 --> 00:03:27,510
can get more advanced with ACLs also.

48
00:03:27,510 --> 00:03:32,500
Okay, I think showing you will make things
easier to understand than just explaining.

49
00:03:32,500 --> 00:03:38,849
So, we have two routers, R1 and R2, with a
point-to-point connection.

50
00:03:38,849 --> 00:03:46,099
The 192.168.1.0/24 network is connected to
R1, and I’ve shown a couple PCs in the network,

51
00:03:46,099 --> 00:03:48,890
PC1 and PC2.

52
00:03:48,890 --> 00:03:53,700
Notice that, instead of including a switch
in the diagram and showing the PCs connected

53
00:03:53,700 --> 00:03:57,909
to the switch, I represent the network segment
like this.

54
00:03:57,909 --> 00:04:00,400
This is common in network diagrams.

55
00:04:00,400 --> 00:04:07,670
In reality, all of the PCs in the 192.168.1.0/24
network are connected to a switch, and the

56
00:04:07,670 --> 00:04:11,980
switch is connected to R1, but we don’t
actually have to include the switch in this

57
00:04:11,980 --> 00:04:14,300
diagram.

58
00:04:14,300 --> 00:04:22,310
The 192.168.2.0/24 network, with PC3 and PC4,
is also connected to R1.

59
00:04:22,310 --> 00:04:31,650
The 10.0.1.0/24 network, with SRV1, is connected
to R2, and the 10.0.2.0/24 network, with SRV2,

60
00:04:31,650 --> 00:04:33,410
is also connected to R2.

61
00:04:33,410 --> 00:04:37,759
I’ll use this network to demonstrate how
ACLs work.

62
00:04:37,759 --> 00:04:43,919
So, without looking at the actual configurations
yet, let’s build an ACL so you can see how

63
00:04:43,919 --> 00:04:45,590
they work.

64
00:04:45,590 --> 00:04:51,639
We shouldn’t just configure ACLs randomly,
we must use them to achieve a certain requirement.

65
00:04:51,639 --> 00:04:58,919
For example, let’s say the network policy
is that hosts in 192.168.1.0/24 should be

66
00:04:58,919 --> 00:05:02,370
able to access the 10.0.1.0/24 network.

67
00:05:02,370 --> 00:05:07,030
They should be able to access files on SRV1,
for example.

68
00:05:07,030 --> 00:05:15,560
However, hosts in the 192.168.2.0/24 network
should not be able to access 10.0.1.0/24.

69
00:05:15,560 --> 00:05:23,090
PC3 and PC4, for example, should not be able
to access files on SRV1.

70
00:05:23,090 --> 00:05:26,750
How can we use ACLs to achieve this?

71
00:05:26,750 --> 00:05:32,180
First up, ACLs are configured globally on
the router, in global config mode.

72
00:05:32,180 --> 00:05:38,360
ACLs are made up of an ordered sequence of
ACEs, access control entries.

73
00:05:38,360 --> 00:05:44,870
For example, to fulfill our requirement, we
could configure ACL 1 like this on R1 or R2.

74
00:05:44,870 --> 00:05:53,440
ACE 1 says if source IP equals 192.168.1.0/24,
then permit the packet, let the router forward

75
00:05:53,440 --> 00:05:54,440
it.

76
00:05:54,440 --> 00:06:02,009
ACE 2 says if source IP equals 192.168.2.0/24,
deny the traffic.

77
00:06:02,009 --> 00:06:06,800
ACE 3 says that all other traffic should be
permitted.

78
00:06:06,800 --> 00:06:13,360
The order of these entries is very important,
but I’ll talk more about that later.

79
00:06:13,360 --> 00:06:18,819
Configuring an ACL in global config mode will
not make the ACL take effect.

80
00:06:18,819 --> 00:06:23,979
After being created, the ACL must be applied
to an interface.

81
00:06:23,979 --> 00:06:26,880
ACLs are applied either inbound or outbound.

82
00:06:26,880 --> 00:06:28,950
Let’s see how that works.

83
00:06:28,950 --> 00:06:31,750
Here’s that same ACL as before.

84
00:06:31,750 --> 00:06:34,930
Let’s say we configured it on R1.

85
00:06:34,930 --> 00:06:38,510
So it has been created, but it hasn’t been
applied yet.

86
00:06:38,510 --> 00:06:44,080
Let’s walk through some examples of applying
ACL 1 to different interfaces in different

87
00:06:44,080 --> 00:06:45,669
directions.

88
00:06:45,669 --> 00:06:48,180
Once again, here are the requirements.

89
00:06:48,180 --> 00:06:53,550
Depending on which interface we apply the
ACL to, and which direction we apply it in,

90
00:06:53,550 --> 00:06:58,009
we will either succeed in meeting the requirements
or fail.

91
00:06:58,009 --> 00:07:02,740
For example, what if we applied it outbound
on G0/2.

92
00:07:02,740 --> 00:07:06,690
That means it will only take effect on traffic
exiting G0/2.

93
00:07:06,690 --> 00:07:09,770
Does that fulfill the requirements?

94
00:07:09,770 --> 00:07:12,680
The answer is no, it doesn’t fulfill the
requirement.

95
00:07:12,680 --> 00:07:14,470
Why not?

96
00:07:14,470 --> 00:07:20,479
Because R1 will only use the ACL to filter
traffic exiting G0/2, not entering it.

97
00:07:20,479 --> 00:07:27,860
If PC3 tries to ping SRV1, when the ping reaches
R1 it won’t even check the ACL, because

98
00:07:27,860 --> 00:07:31,490
the traffic is entering G0/2, not exiting
it.

99
00:07:31,490 --> 00:07:37,010
So, R1 will forward the traffic to R2, which
will forward it to SRV1.

100
00:07:37,010 --> 00:07:43,350
Now, when SRV1 sends the reply to PC3, R1
will check the ACL to decide if the traffic

101
00:07:43,350 --> 00:07:47,009
should be forwarded out of G0/2 or not.

102
00:07:47,009 --> 00:07:50,129
It will check the entries of ACL1 in sequence.

103
00:07:50,129 --> 00:07:54,510
If source IP = 192.168.1.0/24.

104
00:07:54,510 --> 00:07:59,790
Well, the source is SRV1, so that doesn’t
apply.

105
00:07:59,790 --> 00:08:04,127
If source IP = 192.168.2.0/24.

106
00:08:04,127 --> 00:08:08,040
That doesn’t apply either, the source is
not in that subnet.

107
00:08:08,040 --> 00:08:14,659
So, R1 reaches the last entry which says permit
all other traffic, so it forwards the reply

108
00:08:14,659 --> 00:08:16,240
to PC3.

109
00:08:16,240 --> 00:08:25,430
PC3 was able to access SRV1, even though hosts
in 192.168.2.0/24 shouldn’t be able to.

110
00:08:25,430 --> 00:08:30,470
Clearly, we didn’t apply this ACL correctly.

111
00:08:30,470 --> 00:08:34,350
What if we applied the ACL inbound on G0/2?

112
00:08:34,350 --> 00:08:38,340
That means R1 will check the ACL for all traffic
entering G0/2.

113
00:08:38,340 --> 00:08:45,030
So, if PC3 tries to ping SRV1, R1 will check
the ACL.

114
00:08:45,030 --> 00:08:49,000
Once again, it will check the entries in order,
from top to bottom.

115
00:08:49,000 --> 00:08:51,160
If source IP = 192.168.1.0/24.

116
00:08:51,160 --> 00:08:58,250
The source isn’t in that subnet, so it checks
the next entry.

117
00:08:58,250 --> 00:09:03,100
If source IP = 192.168.2.0/24.

118
00:09:03,100 --> 00:09:11,670
The source is 192.168.2.1, which is in 192.168.2.0/24,
so there’s a match!

119
00:09:11,670 --> 00:09:15,170
That means that R1 will take the specified
action, which is deny.

120
00:09:15,170 --> 00:09:20,580
So, R1 drops the traffic, it doesn’t forward
the packet.

121
00:09:20,580 --> 00:09:25,330
Once a router finds a match and takes an action,
it stops checking the other entries in the

122
00:09:25,330 --> 00:09:29,450
ACL, so this ‘permit all other traffic’
is ignored.

123
00:09:29,450 --> 00:09:32,340
So, does this fulfill our requirements?

124
00:09:32,340 --> 00:09:36,120
Yes and no.

125
00:09:36,120 --> 00:09:43,700
192.168.1.0/24 will be able to access 10.0.1.0/24
no problem, there is no ACL stopping them

126
00:09:43,700 --> 00:09:45,470
from communicating.

127
00:09:45,470 --> 00:09:55,640
Also, hosts in 192.168.2.0/24 are prevented
from accessing 10.0.1.0/24, as you just saw

128
00:09:55,640 --> 00:09:58,440
R1 dropped the traffic from PC3.

129
00:09:58,440 --> 00:10:05,470
However, by applying the ACL inbound on G0/2
we are being too restrictive.

130
00:10:05,470 --> 00:10:13,360
This blocks hosts in 192.168.2.0/24 from communicating
with all other networks outside of their local

131
00:10:13,360 --> 00:10:14,360
LAN.

132
00:10:14,360 --> 00:10:19,400
PC3 and PC4 can communicate with each other,
but that’s it.

133
00:10:19,400 --> 00:10:23,310
So, this is not the best way to apply this
ACL.

134
00:10:23,310 --> 00:10:28,750
There are some other possibilities we could
try, such as applying it to R1’s G0/0 or

135
00:10:28,750 --> 00:10:34,560
R2’s G0/0, but let’s take a look at the
best option.

136
00:10:34,560 --> 00:10:40,180
The best location to place this ACL is outbound
on R2’s G0/1 interface.

137
00:10:40,180 --> 00:10:43,170
Let’s see how it works.

138
00:10:43,170 --> 00:10:49,460
If PC3 tries to ping SRV1, R2 will check the
ACL before forwarding the packet out of its

139
00:10:49,460 --> 00:10:52,300
G0/1 interface.

140
00:10:52,300 --> 00:11:00,250
The first entry says if source IP equals 192.168.1.0/24
then permit, but the source isn’t in that

141
00:11:00,250 --> 00:11:01,400
subnet.

142
00:11:01,400 --> 00:11:03,960
So R2 checks the next entry.

143
00:11:03,960 --> 00:11:09,210
If source IP is in 192.168.2.0/24, then deny.

144
00:11:09,210 --> 00:11:14,660
The source is in that subnet, so the packet
will be denied and R2 will not forward it.

145
00:11:14,660 --> 00:11:25,760
So, that satisfies the second requirement,
hosts in 192.168.2.0/24 can’t access 10.0.1.0/24.

146
00:11:25,760 --> 00:11:32,890
What if PC1, in 192.168.1.0/24, tried to ping
SRV1?

147
00:11:32,890 --> 00:11:38,940
Before forwarding the packet out of its G0/1
interface, R2 will check the ACL.

148
00:11:38,940 --> 00:11:44,890
If the source IP is in 192.168.1.0/24, then
permit.

149
00:11:44,890 --> 00:11:53,100
The source is 192.168.1.1, so the packet is
permitted and R2 forwards it to SRV1.

150
00:11:53,100 --> 00:11:57,790
Both requirements have been satisfied, and
there is no effect on other traffic.

151
00:11:57,790 --> 00:12:04,420
I hope that demonstration helped you understand
what an ACL is and how they work.

152
00:12:04,420 --> 00:12:07,410
If you’re still a little confused, don’t
worry.

153
00:12:07,410 --> 00:12:11,250
Let me explain a little more about some of
the things I just mentioned.

154
00:12:11,250 --> 00:12:17,920
So, ACLs are configured in global config mode,
but then you must apply it to an interface.

155
00:12:17,920 --> 00:12:21,870
When applying it to an interface, you specify
a direction.

156
00:12:21,870 --> 00:12:26,230
This tells the router to either check packets
that enter the interface, or check packets

157
00:12:26,230 --> 00:12:29,270
that exit the interface.

158
00:12:29,270 --> 00:12:35,500
ACLs are made up of one or more ACEs, access
control entries.

159
00:12:35,500 --> 00:12:40,550
When the router checks a packet against the
ACL, it processes the ACEs in order, from

160
00:12:40,550 --> 00:12:41,920
top to bottom.

161
00:12:41,920 --> 00:12:43,740
I just showed you this.

162
00:12:43,740 --> 00:12:51,830
For example here in ACL 1, the router will
check if the packet’s source is in 192.168.1.0/24,

163
00:12:51,830 --> 00:12:57,680
then it will check if the packet’s source
is in 192.168.2.0/24, and if it doesn’t

164
00:12:57,680 --> 00:13:01,270
match either of those it will permit it.

165
00:13:01,270 --> 00:13:05,890
Another point I briefly mentioned before,
if the packet matches one of the entries in

166
00:13:05,890 --> 00:13:11,500
the ACL, the router takes the action and stops
processing the ACL.

167
00:13:11,500 --> 00:13:15,190
All entries below the matching entry will
be ignored.

168
00:13:15,190 --> 00:13:17,450
Let me show you an example.

169
00:13:17,450 --> 00:13:20,680
Here we have a router and another ACL.

170
00:13:20,680 --> 00:13:29,330
The first entry in the ACL says if source
IP = 192.168.1.0/24, then permit.

171
00:13:29,330 --> 00:13:37,440
However the second entry says if source IP
= 192.168.0.0/16, then deny.

172
00:13:37,440 --> 00:13:43,920
What effect will this have if applied outbound
on the G0/0 interface of this router?

173
00:13:43,920 --> 00:13:50,460
If a packet with a source IP of 192.168.1.1
arrives on G0/1, before forwarding the packet

174
00:13:50,460 --> 00:13:55,010
out of G0/0 the router will check it against
the ACL.

175
00:13:55,010 --> 00:14:01,140
The source is 192.168.1.1, which matches the
first entry, so the router will forward the

176
00:14:01,140 --> 00:14:02,620
packet as normal.

177
00:14:02,620 --> 00:14:07,430
This second entry will simply be ignored.

178
00:14:07,430 --> 00:14:11,470
Now I’ve reversed entries 1 and 2 in ACL
2.

179
00:14:11,470 --> 00:14:15,940
What will the effect be if the same packet
is received by the router?

180
00:14:15,940 --> 00:14:20,330
It will once again check ACL 2 before forwarding
the packet.

181
00:14:20,330 --> 00:14:25,200
The first entry tells the router to deny the
packet, so it will be discarded, not forwarded

182
00:14:25,200 --> 00:14:27,700
out of the interface.

183
00:14:27,700 --> 00:14:31,210
Entry 2, which tells the router to permit
that packet, is ignored.

184
00:14:31,210 --> 00:14:36,520
So, I think you can see how important the
order of the entries in an ACL is.

185
00:14:36,520 --> 00:14:39,220
Now, here’s one more point about ACLs.

186
00:14:39,220 --> 00:14:45,190
A maximum of one ACL can be applied to a single
interface per direction.

187
00:14:45,190 --> 00:14:53,730
So, one inbound ACL is allowed and one outbound
ACL is allowed, for a maximum of two ACLs.

188
00:14:53,730 --> 00:14:58,300
If you apply a second ACL to an interface
in the same direction as another one, it will

189
00:14:58,300 --> 00:15:02,020
replace the previous one.

190
00:15:02,020 --> 00:15:06,630
Next up, another important part of ACLs, the
‘implicit deny’.

191
00:15:06,630 --> 00:15:09,010
Here’s a question.

192
00:15:09,010 --> 00:15:12,930
What happens if a packet doesn’t match any
of the entries in an ACL?

193
00:15:12,930 --> 00:15:17,860
So, here’s the same ACL, and the same router.

194
00:15:17,860 --> 00:15:23,190
This time the router receives a packet with
source IP 10.0.0.1.

195
00:15:23,190 --> 00:15:30,470
Before forwarding it out of G0/0, the router
checks it against the ACL. 10.0.0.1 doesn’t

196
00:15:30,470 --> 00:15:32,290
match the first entry.

197
00:15:32,290 --> 00:15:34,410
And it doesn’t match the second entry either.

198
00:15:34,410 --> 00:15:36,490
So, what happens?

199
00:15:36,490 --> 00:15:41,240
The answer is, the router will deny the packet,
it will not forward it.

200
00:15:41,240 --> 00:15:44,410
This is what we call the ‘implicit deny’.

201
00:15:44,410 --> 00:15:49,050
Even though there is no entry in the ACL telling
the router to deny the packet, it’s like

202
00:15:49,050 --> 00:15:55,220
there is an invisible entry at the end, if
source IP = any, then deny.

203
00:15:55,220 --> 00:15:58,170
This is true for all ACLs.

204
00:15:58,170 --> 00:16:03,760
To summarize this point, there is an implicit
deny at the end of all ACLs.

205
00:16:03,760 --> 00:16:07,630
This tells the router to deny all traffic
that doesn’t match any of the configured

206
00:16:07,630 --> 00:16:10,140
entries in the ACL.

207
00:16:10,140 --> 00:16:15,430
Always be aware of the implicit deny when
configuring ACLs, or you might deny traffic

208
00:16:15,430 --> 00:16:19,610
that you didn’t want to deny.

209
00:16:19,610 --> 00:16:24,760
Now that you have an idea of the basic operations
of ACLs, let me introduce the different types

210
00:16:24,760 --> 00:16:30,360
of ACLs you will learn about in today’s
video and in Day 35.

211
00:16:30,360 --> 00:16:35,780
There are two main types of ACLs, and those
two types have two sub-types.

212
00:16:35,780 --> 00:16:41,750
The first type are standard ACLs, these match
based on source IP address only, so they are

213
00:16:41,750 --> 00:16:43,630
quite simple.

214
00:16:43,630 --> 00:16:48,700
The two types of standard ACLs are standard
numbered ACLs, which are identified with a

215
00:16:48,700 --> 00:16:51,790
number like 1, 2, etc.

216
00:16:51,790 --> 00:16:56,740
And there are also standard named ACLs, which
are identified with a name.

217
00:16:56,740 --> 00:17:01,280
There are also differences in how you configure
numbered and named ACLs, but we’ll get to

218
00:17:01,280 --> 00:17:03,440
that later.

219
00:17:03,440 --> 00:17:08,220
In addition to standard ACLs, there are also
extended ACLs.

220
00:17:08,220 --> 00:17:14,080
These are more complex and can match based
on source and/or destination IP address, source

221
00:17:14,080 --> 00:17:19,320
and/or destination port numbers, as well as
some other things.

222
00:17:19,320 --> 00:17:25,480
Like standard ACLs, there are numbered and
named versions of extended ACLs, too.

223
00:17:25,480 --> 00:17:30,920
As I said in the beginning of the video, today
we’ll focus on standard ACLs.

224
00:17:30,920 --> 00:17:36,270
All of the examples so far have been standard
ACLs, filtering packets only based on their

225
00:17:36,270 --> 00:17:39,010
source IP address.

226
00:17:39,010 --> 00:17:44,470
In Day 35 I’ll tell you all about extended
ACLs, but now let’s learn some more about

227
00:17:44,470 --> 00:17:49,610
standard ACLs and then see how to actually
configure them.

228
00:17:49,610 --> 00:17:53,520
So let’s get into standard numbered ACLs.

229
00:17:53,520 --> 00:17:58,650
As I just mentioned, standard ACLs match traffic
based only on the source IP address of the

230
00:17:58,650 --> 00:17:59,650
packet.

231
00:17:59,650 --> 00:18:02,880
So, standard ACLs are quite simple.

232
00:18:02,880 --> 00:18:08,140
The router doesn’t check the destination
IP, the source Layer 4 port, the destination

233
00:18:08,140 --> 00:18:09,420
port, etc.

234
00:18:09,420 --> 00:18:14,400
It just looks at the source IP address of
the packet and decides to forward or block

235
00:18:14,400 --> 00:18:16,210
it.

236
00:18:16,210 --> 00:18:19,000
Numbered ACLs are identified with a number.

237
00:18:19,000 --> 00:18:24,030
You can, of course, configure multiple ACLs
on a single router, so you need to identify

238
00:18:24,030 --> 00:18:26,320
each ACL.

239
00:18:26,320 --> 00:18:31,660
Numbered ACLs use a number like ACL 1, ACL
2, etc.

240
00:18:31,660 --> 00:18:35,100
There are also named ACLs, which I’ll introduce
later.

241
00:18:35,100 --> 00:18:37,720
Here’s an important point.

242
00:18:37,720 --> 00:18:42,860
Different types of ACLs have a different range
of numbers that can be used.

243
00:18:42,860 --> 00:18:49,920
Standard ACLs can use 1 to 99 and 1300 to
1999.

244
00:18:49,920 --> 00:18:55,600
Originally, standard ACLs could only use 1
to 99, meaning you could have a maximum of

245
00:18:55,600 --> 00:18:59,450
99 standard ACLs on a single router.

246
00:18:59,450 --> 00:19:04,250
Later this was expanded to include 1300 to 1999.

247
00:19:04,250 --> 00:19:10,680
So, you can’t configure a standard ACL with
the number 100, for example.  The number has

248
00:19:10,680 --> 00:19:14,150
to be in one of these ranges.

249
00:19:14,150 --> 00:19:18,430
Here are a bunch of different ACL types, and
the different number ranges that identify

250
00:19:18,430 --> 00:19:19,890
them.

251
00:19:19,890 --> 00:19:22,670
You don’t have to memorize all of these,
of course.

252
00:19:22,670 --> 00:19:32,040
For now, just remember the standard ACL ranges,
1 to 99 and 1300 to 1999, listed as ‘Standard

253
00:19:32,040 --> 00:19:35,020
IP’ ACLs in this chart.

254
00:19:35,020 --> 00:19:39,890
‘IP ACL’ is the type of ACL you have to
learn for the CCNA.

255
00:19:39,890 --> 00:19:44,090
I just wanted to show you that there are lots
of different types of ACLs, and each have

256
00:19:44,090 --> 00:19:45,980
their own range of numbers.

257
00:19:45,980 --> 00:19:51,040
Here’s the basic command to configure a
standard numbered ACL.

258
00:19:51,040 --> 00:19:53,780
ACCESS-LIST, followed by the number.

259
00:19:53,780 --> 00:20:00,600
We’re configuring standard ACLs, so this
number must be in the range 1 to 99 or 1300

260
00:20:00,600 --> 00:20:03,500
to 1999.

261
00:20:03,500 --> 00:20:09,380
Then you specify either deny or permit, and
then the IP address and wildcard mask to match

262
00:20:09,380 --> 00:20:10,920
against.

263
00:20:10,920 --> 00:20:14,640
Hopefully you remember wildcard masks from
the EIGRP and OSPF videos.

264
00:20:14,640 --> 00:20:20,170
Don’t try to use a standard subnet mask
when configuring ACLs.

265
00:20:20,170 --> 00:20:25,530
So, this is how you configure a single entry
in access-list 1.

266
00:20:25,530 --> 00:20:26,680
Here are some examples.

267
00:20:26,680 --> 00:20:31,490
ACCESS-LIST 1 DENY 1.1.1.1 0.0.0.0.

268
00:20:31,490 --> 00:20:40,110
So, this denies 1.1.1.1/32, meaning only 1.1.1.1,
a single host.

269
00:20:40,110 --> 00:20:46,880
Now, when you specify a /32 mask in an ACL,
you don’t actually have to specify the wildcard

270
00:20:46,880 --> 00:20:48,090
mask.

271
00:20:48,090 --> 00:20:54,400
You can just specify 1.1.1.1, and the router
will understand that it’s /32.

272
00:20:54,400 --> 00:20:58,840
So, these are just two different ways of configuring
the exact same thing.

273
00:20:58,840 --> 00:21:03,320
Now, there is one more method of configuring
a /32 entry.

274
00:21:03,320 --> 00:21:08,560
It’s considered an old method, but it still
works on modern routers.

275
00:21:08,560 --> 00:21:14,110
To specify a single host, you can use the
HOST keyword before the IP address.

276
00:21:14,110 --> 00:21:19,120
Again, in effect this is exactly the same
as the previous two, it’s just a different

277
00:21:19,120 --> 00:21:21,070
way of configuring it.

278
00:21:21,070 --> 00:21:25,270
So, all three of these are the same in effect.

279
00:21:25,270 --> 00:21:31,190
Note that the 2nd and 3rd options here can
only be used for /32, to specify a single

280
00:21:31,190 --> 00:21:32,370
host.

281
00:21:32,370 --> 00:21:37,530
If you’re matching a /24 network, for example,
you’ll have to use the 1st option, you have

282
00:21:37,530 --> 00:21:41,580
to specify the wildcard mask of 0.0.0.255.

283
00:21:41,580 --> 00:21:47,731
Okay, so let’s say we used one of those
options to configure an entry in ACL 1 that

284
00:21:47,731 --> 00:21:51,630
blocks 1.1.1.1/32.

285
00:21:51,630 --> 00:21:56,800
If we leave the ACL as is, all other traffic
will be blocked, too, because of the implicit

286
00:21:56,800 --> 00:21:57,800
deny.

287
00:21:57,800 --> 00:22:02,340
So, let’s make another entry in this ACL
to permit traffic.

288
00:22:02,340 --> 00:22:03,350
Here it is.

289
00:22:03,350 --> 00:22:06,980
ACCESS-LIST 1 PERMIT ANY.

290
00:22:06,980 --> 00:22:10,640
This tells the router to permit all traffic,
with any source IP.

291
00:22:10,640 --> 00:22:13,340
Now, here’s a quiz.

292
00:22:13,340 --> 00:22:18,430
The ANY keyword is convenient, but how can
we specify an IP address and wildcard mask

293
00:22:18,430 --> 00:22:20,870
that has the same effect?

294
00:22:20,870 --> 00:22:27,180
Pause the video and think about it, what IP
address and wildcard mask matches all addresses?

295
00:22:27,180 --> 00:22:39,720
Okay, the answer is 0.0.0.0 255.255.255.255,
which is 0.0.0.0/0, and matches all addresses.

296
00:22:39,720 --> 00:22:43,460
So, these two options are exactly the same.

297
00:22:43,460 --> 00:22:47,960
As you can see, ACL configuration can be quite
flexible.

298
00:22:47,960 --> 00:22:53,250
In these examples I’ll use a variety of
methods so you can be aware of all of them,

299
00:22:53,250 --> 00:22:56,580
but feel free to pick your favorite and just
use that.

300
00:22:56,580 --> 00:23:03,310
‘ANY’, for example, is much quicker to
type than 0.0.0.0 255.255.255.255.

301
00:23:03,310 --> 00:23:10,910
Finally, here’s one more thing you can configure
for an ACL, a remark.

302
00:23:10,910 --> 00:23:13,280
This is like an interface description.

303
00:23:13,280 --> 00:23:17,740
It doesn’t have any effect on the ACL, it’s
just a description that helps you remember

304
00:23:17,740 --> 00:23:22,660
the purpose of the ACL when looking at it
in the configuration.

305
00:23:22,660 --> 00:23:27,280
Note that the command is ACCESS-LIST 1 REMARK,
followed by the remark.

306
00:23:27,280 --> 00:23:32,620
The hashtags, or pound symbols, whatever you
call them, aren’t a necessary part of the

307
00:23:32,620 --> 00:23:33,660
command.

308
00:23:33,660 --> 00:23:38,210
I just use them to make it easier to see when
looking at the config.

309
00:23:38,210 --> 00:23:43,680
Okay, so I tried actually configuring that
ACL, let’s check it out.

310
00:23:43,680 --> 00:23:48,490
For both the deny and permit entries I decided
to enter the whole IP address and wildcard

311
00:23:48,490 --> 00:23:49,860
mask.

312
00:23:49,860 --> 00:23:54,850
Then I used SHOW ACCESS-LISTS, which displays
all ACLs on the router.

313
00:23:54,850 --> 00:23:57,250
There are a few things to point out here.

314
00:23:57,250 --> 00:24:04,490
First up, notice that the router automatically
converted DENY 1.1.1.1 0.0.0.0 to just DENY

315
00:24:04,490 --> 00:24:06,620
1.1.1.1.

316
00:24:06,620 --> 00:24:10,260
The router does this when you use a /32 mask.

317
00:24:10,260 --> 00:24:19,450
Also, PERMIT 0.0.0.0 255.255.255.255 was automatically
converted to PERMIT ANY.

318
00:24:19,450 --> 00:24:22,870
You probably also noticed that the remark
isn’t displayed in this command, it’s

319
00:24:22,870 --> 00:24:25,070
only displayed in the config.

320
00:24:25,070 --> 00:24:30,050
Finally, notice that each entry is given a
number indicating the order.

321
00:24:30,050 --> 00:24:34,590
I configured the DENY statement first, and
it was assigned 10, then the PERMIT statement

322
00:24:34,590 --> 00:24:35,980
was assigned 20.

323
00:24:35,980 --> 00:24:39,680
Remember, the order of these entries is very
important.

324
00:24:39,680 --> 00:24:45,900
If the PERMIT ANY entry was first, all traffic
would be permitted and the DENY 1.1.1.1 entry

325
00:24:45,900 --> 00:24:47,990
would be useless.

326
00:24:47,990 --> 00:24:52,101
On modern devices, the router should prevent
you from doing configurations like that, but

327
00:24:52,101 --> 00:24:55,290
you should still be aware of how important
the order is.

328
00:24:55,290 --> 00:24:59,870
Okay, next I used the command SHOW IP ACCESS-LISTS.

329
00:24:59,870 --> 00:25:04,059
Notice that the output is exactly the same
as for SHOW ACCESS-LISTS.

330
00:25:04,059 --> 00:25:07,560
As you saw before, there are many kinds of
ACLs.

331
00:25:07,560 --> 00:25:14,470
SHOW ACCESS-LISTS displays all kinds, but
SHOW IP ACCESS-LISTS displays only IP ACLs,

332
00:25:14,470 --> 00:25:17,600
the kind we will be configuring in these videos.

333
00:25:17,600 --> 00:25:21,270
You can use either command to check your ACLs,
it doesn’t matter.

334
00:25:21,270 --> 00:25:27,130
Finally, I used SHOW RUNNING-CONFIG, followed
by the pipe, and then INCLUDE ACCESS-LIST

335
00:25:27,130 --> 00:25:31,620
to only show lines in the config that include
ACCESS-LIST.

336
00:25:31,620 --> 00:25:35,450
Notice once again that the deny and permit
entries were automatically changed by the

337
00:25:35,450 --> 00:25:36,450
router.

338
00:25:36,450 --> 00:25:39,110
Also, the remark is displayed this time.

339
00:25:39,110 --> 00:25:43,980
Now, remember I said you have to actually
apply the ACL to an interface?

340
00:25:43,980 --> 00:25:45,720
Here is the command.

341
00:25:45,720 --> 00:25:52,930
From interface config mode, use IP ACCESS-GROUP,
that’s right, it’s ACCESS-GROUP, not ACCESS-LIST,

342
00:25:52,930 --> 00:25:55,690
then the ACL number, then IN or OUT.

343
00:25:55,690 --> 00:25:59,740
Now let’s get into a real example of using
these configurations, that should help you

344
00:25:59,740 --> 00:26:01,150
understand.

345
00:26:01,150 --> 00:26:04,070
Here’s the same network as before.

346
00:26:04,070 --> 00:26:08,610
I’ll give some requirements, and we’ll
use ACLs to restrict the traffic to fulfill

347
00:26:08,610 --> 00:26:10,710
those requirements.

348
00:26:10,710 --> 00:26:15,521
On R1 I’ll configure standard numbered ACLs
as I just showed you, then I’ll introduce

349
00:26:15,521 --> 00:26:20,270
standard named ACLs and we’ll configure
them on R2, so you can see how to configure

350
00:26:20,270 --> 00:26:21,780
both types.

351
00:26:21,780 --> 00:26:27,570
Okay, first here are some requirements which
we can achieve by configuring an ACL on R1.

352
00:26:27,570 --> 00:26:37,210
PC1 should be able to access the 192.168.2.0/24
network, but other PCs in 192.168.1.0/24 shouldn’t

353
00:26:37,210 --> 00:26:39,670
be able to access 192.168.2.0/24.

354
00:26:39,670 --> 00:26:46,000
So, here’s how I configured and applied
an ACL to fulfill these requirements.

355
00:26:46,000 --> 00:26:52,520
First, I configured ACL 1 with an entry permitting
192.168.1.1/32.

356
00:26:52,520 --> 00:26:59,500
That will achieve the first requirement, allowing
PC1 to access 192.168.2.0/24.

357
00:26:59,500 --> 00:27:04,440
Then I configured an entry denying the 192.168.1.0/24
network.

358
00:27:04,440 --> 00:27:06,940
This will fulfill the second requirement.

359
00:27:06,940 --> 00:27:09,000
The order of these is very important.

360
00:27:09,000 --> 00:27:17,930
If I denied 192.168.1.0/24 first, PC1 would
not be able to access 192.168.2.0/24, even

361
00:27:17,930 --> 00:27:21,929
if I put an entry permitting PC1 after the
deny entry.

362
00:27:21,929 --> 00:27:25,040
Remember, ACLs are processed in order from
top to bottom.

363
00:27:25,040 --> 00:27:30,090
Once a match is found, the action is taken
and any remaining entries after the matching

364
00:27:30,090 --> 00:27:32,710
entry are not processed, they are ignored.

365
00:27:32,710 --> 00:27:36,210
Finally, I configured a permit any entry at
the end.

366
00:27:36,210 --> 00:27:40,320
Remember the implicit deny that is hidden
at the end of every ACL.

367
00:27:40,320 --> 00:27:45,350
If I don’t include this permit any at the
end, the ACL won’t only block PCs in the

368
00:27:45,350 --> 00:27:50,010
192.168.1.0/24 network, it will block all
other traffic.

369
00:27:50,010 --> 00:27:56,630
The only device that will be able to access
the 192.168.2.0/24 network would be 192.168.1.1,

370
00:27:56,630 --> 00:27:57,980
PC1.

371
00:27:57,980 --> 00:28:02,179
Every single other device would be blocked.

372
00:28:02,179 --> 00:28:06,000
Our requirements don’t tell us to block
all other traffic, so we should insert this

373
00:28:06,000 --> 00:28:08,190
permit any.

374
00:28:08,190 --> 00:28:14,130
Finally I applied the ACL to R1’s G0/2 interface
with IP ACCESS-GROUP 1 OUT.

375
00:28:14,130 --> 00:28:16,900
Why outbound on G0/2?

376
00:28:16,900 --> 00:28:20,330
I could have, for example, applied it inbound
on G0/1.

377
00:28:20,330 --> 00:28:26,520
Well, here’s a good rule-of-thumb for applying
standard ACLs to interfaces.

378
00:28:26,520 --> 00:28:30,960
Standard ACLs should be applied as close to
the destination as possible.

379
00:28:30,960 --> 00:28:36,130
You may be thinking, what do I mean by ‘destination’,
even though standard ACLs only filter by source

380
00:28:36,130 --> 00:28:37,130
IP?

381
00:28:37,130 --> 00:28:43,990
Well, in this case we are trying to control
access to the 192.168.2.0/24 network, so that

382
00:28:43,990 --> 00:28:46,290
is the ‘destination’.

383
00:28:46,290 --> 00:28:52,230
If I applied ACL 1 inbound on R1’s G0/1
interface, it would prevent all PCs in the

384
00:28:52,230 --> 00:28:56,870
subnet except R1 from accessing anything outside
of the local network.

385
00:28:56,870 --> 00:29:02,950
However, if I apply it correctly, outbound
on G0/2, the ACL only controls traffic that

386
00:29:02,950 --> 00:29:06,870
tries to access the 192.168.2.0/24 network.

387
00:29:06,870 --> 00:29:09,470
So, remember this rule-of-thumb.

388
00:29:09,470 --> 00:29:14,410
Standards ACLs should be applied as close
to the destination as possible.

389
00:29:14,410 --> 00:29:18,000
If you don’t do that, you might block more
traffic than you intended.

390
00:29:18,000 --> 00:29:21,830
Now let’s see how that ACL will work.

391
00:29:21,830 --> 00:29:24,660
PC1 tries to ping PC3.

392
00:29:24,660 --> 00:29:27,080
The ping is received by R1.

393
00:29:27,080 --> 00:29:32,309
It doesn’t check the ACL yet, because we
didn’t apply it to the G0/1 interface.

394
00:29:32,309 --> 00:29:37,590
R1 looks up the destination in its routing
table, and sees it’s connected to the G0/2

395
00:29:37,590 --> 00:29:38,590
interface.

396
00:29:38,590 --> 00:29:45,059
However, ACL 1 is applied outbound on G0/2,
so before forwarding the ping it checks ACL

397
00:29:45,059 --> 00:29:46,059
1.

398
00:29:46,059 --> 00:29:50,020
It starts at the top, with entry 10, permit
source IP 192.168.1.1.

399
00:29:50,020 --> 00:29:57,750
The ping’s source is PC1, 192.168.1.1, so
that’s a match.

400
00:29:57,750 --> 00:30:02,760
It will take the action, which is to permit
the packet, so it forwards it to PC3.

401
00:30:02,760 --> 00:30:08,271
PC3 will be able to reply, because there is
no ACL blocking the return path from PC3 to

402
00:30:08,271 --> 00:30:10,930
PC1.

403
00:30:10,930 --> 00:30:13,330
What if PC2 tries to ping PC3?

404
00:30:13,330 --> 00:30:18,880
R1 receives the ping on G0/1, but it doesn’t
check the ACL because it’s not applied to

405
00:30:18,880 --> 00:30:20,820
that interface.

406
00:30:20,820 --> 00:30:24,050
Once again it checks the routing table and
sees that it should forward the packet out

407
00:30:24,050 --> 00:30:30,980
of G0/2, but because ACL 1 is applied outbound
on G0/2 it checks ACL 1 first.

408
00:30:30,980 --> 00:30:36,447
It checks the top entry first, permit 192.168.1.1/32.

409
00:30:36,447 --> 00:30:41,520
The source of the ping is 192.168.1.2, so
it doesn’t match.

410
00:30:41,520 --> 00:30:46,897
Then it checks the next entry, deny 192.168.1.0/24.

411
00:30:46,897 --> 00:30:52,340
PC2’s IP is in this subnet, so it matches
this entry and R1 takes the action, which

412
00:30:52,340 --> 00:30:53,720
is to deny.

413
00:30:53,720 --> 00:30:55,580
It won’t forward the ping to PC3.

414
00:30:55,580 --> 00:31:01,270
Okay, now let’s move on to standard named
ACLs.

415
00:31:01,270 --> 00:31:05,960
Standard named ACLs are still standard ACLs,
so they match traffic based only on the source

416
00:31:05,960 --> 00:31:07,970
IP address of the packet.

417
00:31:07,970 --> 00:31:12,170
However, instead of a number they are identified
with a name.

418
00:31:12,170 --> 00:31:16,730
You could, for example, name the ACL ‘BLOCK_BOB’.

419
00:31:16,730 --> 00:31:21,700
Standard named ACLs are configured by entering
‘standard named ACL config mode’, and

420
00:31:21,700 --> 00:31:24,030
then configuring each entry within that mode.

421
00:31:24,030 --> 00:31:27,429
So, a little different than standard numbered
ACLs.

422
00:31:27,429 --> 00:31:34,260
Here’s how you enter that config mode, IP
ACCESS-LIST STANDARD, followed by the name.

423
00:31:34,260 --> 00:31:37,110
Remember to use IP in front of the command.

424
00:31:37,110 --> 00:31:44,100
For standard numbered ACLs the command is
ACCESS-LIST, but in this case it’s IP ACCESS-LIST.

425
00:31:44,100 --> 00:31:50,210
Then you enter standard named ACL config mode
and configure the deny and permit entries.

426
00:31:50,210 --> 00:31:53,880
Note that you can now specify an entry number
before each entry, although you don’t have

427
00:31:53,880 --> 00:31:54,880
to.

428
00:31:55,302 --> 00:32:00,470
If you don’t entries will be numbered 10,
then 20, then 30, etc, just like in the standard

429
00:32:00,470 --> 00:32:02,870
numbered ACLs we configured.

430
00:32:02,870 --> 00:32:06,360
Each entry’s number will be 10 more than
the previous one.

431
00:32:06,360 --> 00:32:10,290
But with this function, you can manually specify
the entry number to control the order of the

432
00:32:10,290 --> 00:32:11,290
entries.

433
00:32:11,290 --> 00:32:13,770
So, here’s an example.

434
00:32:13,770 --> 00:32:19,990
First I create the ACL BLOCK_BOB and enter
standard named ACL config mode.

435
00:32:19,990 --> 00:32:24,710
Then I configured a statement denying 1.1.1.1/32.

436
00:32:24,710 --> 00:32:29,990
Note that I manually configured the entry
number of 5, instead of the default of 10.

437
00:32:29,990 --> 00:32:33,250
Then I configured a permit any entry, with
an entry number of 10.

438
00:32:33,250 --> 00:32:36,040
I then configured a remark.

439
00:32:36,040 --> 00:32:40,290
This isn’t necessary, of course, but remarks
can be helpful when looking at the configuration

440
00:32:40,290 --> 00:32:41,680
later.

441
00:32:41,680 --> 00:32:46,809
Then I moved to interface configuration mode,
and applied the ACL in the same way as before,

442
00:32:46,809 --> 00:32:51,720
IP ACCESS-GROUP, ACL name, and then IN or
OUT.

443
00:32:51,720 --> 00:32:54,929
Let’s check with some show commands.

444
00:32:54,929 --> 00:32:57,850
Once again, I used SHOW ACCESS-LISTS.

445
00:32:57,850 --> 00:33:03,560
The ACL is shown, and you can see each entry
with the entry numbers I manually configured.

446
00:33:03,560 --> 00:33:05,650
Then I checked the running config.

447
00:33:05,650 --> 00:33:10,870
Notice I used a different method of filtering
the output, SECTION ACCESS-LIST.

448
00:33:10,870 --> 00:33:14,880
This displays just the ACL section of the
running config.

449
00:33:14,880 --> 00:33:20,210
If I used ‘INCLUDE ACCESS-LIST’ like before,
it would display the ACL’s name.

450
00:33:20,210 --> 00:33:24,799
However, it wouldn’t actually display any
of the entries, since those lines of the config

451
00:33:24,799 --> 00:33:30,040
don’t include ACCESS-LIST, even though they
are part of an access list.

452
00:33:30,040 --> 00:33:33,920
When I filter using SECTION, I can view the
whole ACL.

453
00:33:33,920 --> 00:33:38,450
You can see each entry including the remark,
although interestingly the entry numbers are

454
00:33:38,450 --> 00:33:40,300
not displayed in the config.

455
00:33:40,300 --> 00:33:45,260
Okay, let’s try configuring some standard
named ACLs on R2.

456
00:33:45,260 --> 00:33:48,010
So, here are the requirements.

457
00:33:48,010 --> 00:33:54,000
PCs in 192.168.1.0/24 can’t access 10.0.2.0/24.

458
00:33:54,000 --> 00:34:03,350
PC3 can’t access 10.0.1.0/24, but other
PCs in 192.168.2.0/24 can.

459
00:34:03,350 --> 00:34:11,090
PC1 can access 10.0.1.0/24, but other PCs
in 192.168.1.0/24 can’t.

460
00:34:11,090 --> 00:34:15,340
We’ll need two ACLs to do this properly.

461
00:34:15,340 --> 00:34:18,490
If you think you can, try to solve this yourself.

462
00:34:18,490 --> 00:34:20,020
But I’ll show you my solution.

463
00:34:20,020 --> 00:34:28,730
So, we’ll configure one ACL to control access
to 10.0.2.0/24 and apply it outbound on R2’s

464
00:34:28,730 --> 00:34:29,800
G0/2.

465
00:34:29,800 --> 00:34:35,980
Then we’ll configure another ACL to control
access to 10.0.1.0/24 and apply it outbound

466
00:34:35,980 --> 00:34:37,750
on R2’s G0/1.

467
00:34:37,750 --> 00:34:39,490
Here’s how I did that.

468
00:34:39,490 --> 00:34:46,130
Here’s the first ACL, I called it TO_10.0.2.0/24.

469
00:34:46,130 --> 00:34:52,480
First I denied the 192.168.1.0/24 network,
but permitted other traffic.

470
00:34:52,480 --> 00:34:54,540
Then I applied it outbound on G0/2.

471
00:34:54,540 --> 00:35:02,100
So, PC1 and PC2 will be blocked from accessing
SRV2, but PC3 and PC4 will be able to.

472
00:35:02,100 --> 00:35:04,940
Okay, that’s the first ACL.

473
00:35:04,940 --> 00:35:10,260
I called the second ACL TO_10.0.1.0/24.

474
00:35:10,260 --> 00:35:14,580
First I denied PC3, 192.168.2.1.

475
00:35:14,580 --> 00:35:17,830
Then I permitted the rest of the PCs in PC3’s
network.

476
00:35:17,830 --> 00:35:23,480
I then permitted PC1, but denied the other
PCs in PC1’s network.

477
00:35:23,480 --> 00:35:26,210
Then I permitted all other traffic.

478
00:35:26,210 --> 00:35:30,090
Finally I applied the ACL outbound on the
G0/1 interface.

479
00:35:30,090 --> 00:35:31,720
And that’s it.

480
00:35:31,720 --> 00:35:35,520
ACL configuration can be flexible sometimes,
so there are other ways to configure these

481
00:35:35,520 --> 00:35:37,340
ACLs that will work, too.

482
00:35:37,340 --> 00:35:39,200
But this is my solution.

483
00:35:39,200 --> 00:35:44,280
Let’s check those ACLs with SHOW IP ACCESS-LISTS.

484
00:35:44,280 --> 00:35:50,070
Do you notice something strange about the
TO_10.0.1.0/24 ACL?

485
00:35:50,070 --> 00:35:51,109
Look at the sequence numbers.

486
00:35:51,109 --> 00:35:55,869
30, then 10, then 20, then 40, then 50.

487
00:35:55,869 --> 00:35:58,490
And look at the order I configured them.

488
00:35:58,490 --> 00:36:02,930
The sequence numbers match the order I configured
the entries, but their actual order in the

489
00:36:02,930 --> 00:36:04,970
ACL is totally different.

490
00:36:04,970 --> 00:36:06,500
Why is that?

491
00:36:06,500 --> 00:36:11,790
This is a very advanced question about the
internal operations of Cisco IOS and how ACLs

492
00:36:11,790 --> 00:36:17,190
are processed, you definitely won’t find
this on the CCNA exam but let me briefly summarize

493
00:36:17,190 --> 00:36:18,330
it.

494
00:36:18,330 --> 00:36:23,220
The router may re-order the /32 entries, the
entries that match only a single specific

495
00:36:23,220 --> 00:36:24,410
host.

496
00:36:24,410 --> 00:36:27,570
This improves the efficiency of processing
the ACL.

497
00:36:27,570 --> 00:36:31,220
However, it does not change the overall effect
of the ACL.

498
00:36:31,220 --> 00:36:35,470
So, it makes sense for the router to change
the order if it helps the router process it

499
00:36:35,470 --> 00:36:39,100
more efficiently without affecting the outcome.

500
00:36:39,100 --> 00:36:43,770
Note that this is done for both standard named
and standard numbered ACLs, it just didn’t

501
00:36:43,770 --> 00:36:48,520
apply to the simpler examples I showed for
standard numbered ACLs.

502
00:36:48,520 --> 00:36:52,800
Also note that I checked in Packet Tracer,
and Packet Tracer does not do this.

503
00:36:52,800 --> 00:36:58,830
It will simply display the entries in order
of sequence number, as you would expect.

504
00:36:58,830 --> 00:37:03,720
Before finishing up, I’ll just walk through
one more example of an ACL being processed.

505
00:37:03,720 --> 00:37:08,820
PC2 wants to access server 1, so it pings
to test connectivity.

506
00:37:08,820 --> 00:37:14,030
The ping reaches R2, which is directly connected
to SRV1’s network.

507
00:37:14,030 --> 00:37:21,340
However, the TO_10.0.1.0/24 ACL is applied
outbound to G0/1 so R2 will check the packet

508
00:37:21,340 --> 00:37:24,190
against that ACL before forwarding it.

509
00:37:24,190 --> 00:37:29,320
The source is 192.168.1.2, so it doesn’t
match the top entry.

510
00:37:29,320 --> 00:37:32,430
It doesn’t match the next one either, or
the next one.

511
00:37:32,430 --> 00:37:38,860
However, it matches entry 40, because the
source is in the 192.168.1.0/24 network.

512
00:37:38,860 --> 00:37:43,119
So, it denies the packet, it does not forward
it to SRV1.

513
00:37:43,119 --> 00:37:47,560
Okay, let’s review and then move on to the
quiz.

514
00:37:47,560 --> 00:37:50,490
In this video I covered what ACLs are.

515
00:37:50,490 --> 00:37:54,550
They are used to identify and control traffic
in the network.

516
00:37:54,550 --> 00:37:58,369
I introduced ACL logic, how ACLs are processed.

517
00:37:58,369 --> 00:38:03,450
The entries in an ACL are processed from top
to bottom, and once a matching entry is found

518
00:38:03,450 --> 00:38:07,369
the action is taken and the remaining entries
are not processed.

519
00:38:07,369 --> 00:38:11,770
I introduced the ACL types you need to know
for the CCNA.

520
00:38:11,770 --> 00:38:17,440
They are standard ACLs and extended ACLs,
and each of those can be configured as numbered

521
00:38:17,440 --> 00:38:19,660
or named ACLs.

522
00:38:19,660 --> 00:38:24,090
In this video I covered standard ACLs, which
are simple and just match traffic based on

523
00:38:24,090 --> 00:38:26,230
the source IP address of the packet.

524
00:38:26,230 --> 00:38:32,510
I showed two main ways of configuring standard
ACLs, standard numbered ACLs and standard

525
00:38:32,510 --> 00:38:34,130
named ACLs.

526
00:38:34,130 --> 00:38:38,530
They are both just different ways of configuring
standard ACLs.

527
00:38:38,530 --> 00:38:42,580
Standard numbered ACLs are configured like
this, a series of entries configured in global

528
00:38:42,580 --> 00:38:46,270
config mode with the ACCESS-LIST command.

529
00:38:46,270 --> 00:38:52,131
For standard named ACLs, you use the IP ACCESS-LIST
command to enter standard named ACL config

530
00:38:52,131 --> 00:38:55,550
mode, and then configure the entries.

531
00:38:55,550 --> 00:39:00,190
Make sure to watch until the end of today’s
quiz for a bonus question from Boson ExSim,

532
00:39:00,190 --> 00:39:03,930
the best practice exams for the CCNA, CCNP,
and more.

533
00:39:03,930 --> 00:39:09,210
Okay, let’s go to question 1 of the quiz.

534
00:39:09,210 --> 00:39:18,650
Which ACL, when applied outbound on R2’s
G0/1, permits only PC1 and PC4 to access 10.0.1.0/24?

535
00:39:18,650 --> 00:39:22,740
Here are four ACLs, which one fulfills that
requirement?

536
00:39:22,740 --> 00:39:28,340
Pause the video to think about your answer.

537
00:39:28,340 --> 00:39:30,810
The answer is ACL 1.

538
00:39:30,810 --> 00:39:35,040
Entry 10 permits PC1 and entry 20 permits
PC4.

539
00:39:35,040 --> 00:39:37,710
The implicit deny will deny all other traffic.

540
00:39:37,710 --> 00:39:42,720
So, ACL 1 fulfills the requirements, and the
other ACLs do not.

541
00:39:42,720 --> 00:39:46,600
Let’s go to question 2.

542
00:39:46,600 --> 00:39:51,230
Which interface should the following ACL be
applied to, and in which direction, to fulfill

543
00:39:51,230 --> 00:39:52,290
the requirement?

544
00:39:52,290 --> 00:39:55,750
Here’s the ACL, and here’s the requirement.

545
00:39:55,750 --> 00:39:58,869
Pause the video to think about your answer.

546
00:39:58,869 --> 00:40:01,870
Here’s the answer.

547
00:40:01,870 --> 00:40:06,770
The interface should be R2’s G0/2 interface,
and the direction should be outbound.

548
00:40:06,770 --> 00:40:12,000
Remember that rule-of-thumb, standard ACLs
should be applied as close to the destination

549
00:40:12,000 --> 00:40:13,760
as possible.

550
00:40:13,760 --> 00:40:19,900
We are controlling access to 10.0.2.0/24,
so that is the destination.

551
00:40:19,900 --> 00:40:24,080
Therefore the ACL should be applied outbound
on R2’s G0/2.

552
00:40:24,080 --> 00:40:27,830
Let’s go to question 3.

553
00:40:27,830 --> 00:40:30,480
You issue the following commands on R2.

554
00:40:30,480 --> 00:40:34,260
Which statement about the effect of the configurations
is correct?

555
00:40:34,260 --> 00:40:36,570
Here are the configurations on R2.

556
00:40:36,570 --> 00:40:38,040
And here are the options.

557
00:40:38,040 --> 00:40:40,660
A, all traffic will be denied.

558
00:40:40,660 --> 00:40:45,550
B, traffic from the 10.0.0.0/24 network will
be denied.

559
00:40:45,550 --> 00:40:50,830
C, traffic from the 172.16.0.0/24 network
will be denied.

560
00:40:50,830 --> 00:40:57,120
Or D, traffic from the 192.168.0.0/24 network
will be denied.

561
00:40:57,120 --> 00:41:02,000
Pause the video to think about your answer.

562
00:41:02,000 --> 00:41:08,030
The answer is B, traffic from the 10.0.0.0/24
network will be denied.

563
00:41:08,030 --> 00:41:12,160
Each interface can only have one ACL applied
in each direction.

564
00:41:12,160 --> 00:41:16,950
If you apply another ACL to the same interface
in the same direction, it will replace the

565
00:41:16,950 --> 00:41:18,780
previous one.

566
00:41:18,780 --> 00:41:24,770
In this case, the last ACL you applied was
ACL 10, which denies traffic from 10.0.0.0/24,

567
00:41:24,770 --> 00:41:27,760
so B is the correct answer.

568
00:41:27,760 --> 00:41:31,760
Let’s go to question 4.

569
00:41:31,760 --> 00:41:38,170
If this ACL is applied inbound on R1 G0/0,
which PCs will be able to ping SRV2?

570
00:41:38,170 --> 00:41:40,849
A, PC1 and PC2.

571
00:41:40,849 --> 00:41:43,710
B, PC1, PC2, and PC4.

572
00:41:43,710 --> 00:41:46,110
C, PC1 only.

573
00:41:46,110 --> 00:41:47,760
D, all PCs.

574
00:41:47,760 --> 00:41:51,440
Or E, PC3 and PC4 only.

575
00:41:51,440 --> 00:41:57,520
Pause the video to think about your answer.

576
00:41:57,520 --> 00:42:00,020
The answer is D, all PCs.

577
00:42:00,020 --> 00:42:06,040
This is because of where the ACL was applied,
inbound on R1’s G0/0 interface.

578
00:42:06,040 --> 00:42:11,280
When the PCs try to ping SRV2, R1 won’t
check the ACL as it sends the pings out of

579
00:42:11,280 --> 00:42:12,930
G0/0.

580
00:42:12,930 --> 00:42:18,280
When the reply from SRV2 arrives on R1’s
G0/0 interface, it will check the ACL.

581
00:42:18,280 --> 00:42:24,710
However, the source of the reply will be SRV2’s
IP of 10.0.2.100, which will be permitted

582
00:42:24,710 --> 00:42:27,670
by the ‘permit any’ at the end of the
ACL.

583
00:42:27,670 --> 00:42:31,520
So, all PCs will be able to successfully ping
SRV2.

584
00:42:31,520 --> 00:42:36,190
Okay, let’s go to question 5.

585
00:42:36,190 --> 00:42:39,520
What happens if a packet doesn’t match any
entries of an ACL?

586
00:42:39,520 --> 00:42:43,109
A, the packet will be forwarded to the default
gateway.

587
00:42:43,109 --> 00:42:47,000
B, the packet will be checked using the next
available ACL.

588
00:42:47,000 --> 00:42:49,750
C, the packet will be dropped.

589
00:42:49,750 --> 00:42:53,700
Or D, the action of the most specific match
will be taken.

590
00:42:53,700 --> 00:42:58,359
Pause the video to think about your answer.

591
00:42:58,359 --> 00:43:01,180
The answer is C, the packet will be dropped.

592
00:43:01,180 --> 00:43:06,030
Every ACL includes an ‘implicit deny’
at the end which will deny all packets that

593
00:43:06,030 --> 00:43:08,300
don’t match any of the ACL’s entries.

594
00:43:08,300 --> 00:43:10,490
So, C is the correct answer.

595
00:43:10,490 --> 00:43:13,210
Okay, that’s all for the quiz.

596
00:43:13,210 --> 00:43:18,410
Now let’s take a look at a bonus question
from Boson ExSim for CCNA.

597
00:43:18,410 --> 00:43:23,510
Okay, here's today's Boson ExSim practice
question.

598
00:43:23,510 --> 00:43:26,920
Which of the following statements is true
regarding ACLs?

599
00:43:26,920 --> 00:43:28,400
Select the best answer.

600
00:43:28,400 --> 00:43:34,310
A, ACLs are processed from the least specific
entry to the most specific entry.

601
00:43:34,310 --> 00:43:39,369
B, ACLs are processed from the first entry
in the list to the last entry.

602
00:43:39,369 --> 00:43:44,540
C, ACLs are processed from the last entry
in the list to the first entry.

603
00:43:44,540 --> 00:43:50,090
Or D, ACLs are processed from the most specific
entry in the list to the least specific entry.

604
00:43:50,090 --> 00:43:54,410
Okay, if you just watched the video you should
be able to answer this question.

605
00:43:54,410 --> 00:43:58,620
So, pause the video now to think about the
answer.

606
00:43:58,620 --> 00:44:02,280
Okay, so let's check.

607
00:44:02,280 --> 00:44:07,510
As I mentioned in the video, ACLs are processed
from top to bottom, and what that means is

608
00:44:07,510 --> 00:44:09,370
from first to last.

609
00:44:09,370 --> 00:44:12,500
So, B should be the correct answer.

610
00:44:12,500 --> 00:44:16,540
I'll select B and then click on show answer.

611
00:44:16,540 --> 00:44:18,680
And indeed it is correct.

612
00:44:18,680 --> 00:44:24,650
So, here's Boson's explanation, quite detailed.

613
00:44:24,650 --> 00:44:28,010
You can pause the video now if you want to
read Boson's explanations, and I recommend

614
00:44:28,010 --> 00:44:29,010
you do.

615
00:44:29,010 --> 00:44:33,869
These explanations are one of the great things
about Boson ExSim.

616
00:44:33,869 --> 00:44:40,900
Okay, and there's also a reference to both
the chapter in the official cert guide by

617
00:44:40,900 --> 00:44:47,080
Cisco Press and a link to some Cisco documentation
which is available free online.

618
00:44:47,080 --> 00:44:49,920
Configuring IP Access Lists: Process ACLs.

619
00:44:49,920 --> 00:44:53,090
So, this is another great resource.

620
00:44:53,090 --> 00:44:57,240
Okay, so that's Boson ExSim for the CCNA.

621
00:44:57,240 --> 00:45:02,700
These are the practice exams I used to study
for my CCNA and CCNP, and I really highly

622
00:45:02,700 --> 00:45:04,080
recommend them.

623
00:45:04,080 --> 00:45:10,980
So if you want to get a copy of Boson ExSim,
please follow the link in the video description.

624
00:45:10,980 --> 00:45:13,840
There are supplementary materials for this
video.

625
00:45:13,840 --> 00:45:17,270
There is a flashcard deck to use with the
software ‘Anki’.

626
00:45:17,270 --> 00:45:21,740
There will also be a packet tracer practice
lab so you can get some hands-on practice.

627
00:45:21,740 --> 00:45:23,130
That will be in the next video.

628
00:45:23,130 --> 00:45:27,630
Sign up for my mailing list via the link in
the description, and I’ll send you all of

629
00:45:27,630 --> 00:45:32,500
the flashcards and packet tracer lab files
for the course.

630
00:45:32,500 --> 00:45:36,849
Before finishing today’s video I want to
thank my JCNP-level channel members.

631
00:45:36,849 --> 00:45:39,470
To join, please click the ‘Join’ button
under the video.

632
00:45:39,470 --> 00:45:47,221
Thank you to Junhong, OJ, Magrathea, TheGunguy,
l33america, Njabulo, Benjamin, Tshepiso, Justin,

633
00:45:47,221 --> 00:45:53,529
Prakaash, Nasir, Erlison, Apogee, Marko, Flodo,
Daming, Joshua, Jhilmar, Ed, Value, John,

634
00:45:53,529 --> 00:46:00,540
Funnydart, Scott, Hassan, Marek, Velvijaykum,
C Mohd, Mark, Yousif, Sidi, Boson Software,

635
00:46:00,540 --> 00:46:03,339
Devin, Lito, Yonatan, and Vance.

636
00:46:03,339 --> 00:46:08,280
Sorry if I pronounced your name incorrectly,
but thank you so much for your support.

637
00:46:08,280 --> 00:46:12,340
One of you is still displaying as Channel
failed to load, if this is you please let

638
00:46:12,340 --> 00:46:15,480
me know and I’ll see if YouTube can fix
it.

639
00:46:15,480 --> 00:46:19,980
This is the list of JCNP-level members at
the time of recording by the way, November

640
00:46:19,980 --> 00:46:21,840
21st 2020.

641
00:46:21,840 --> 00:46:25,950
If you signed up recently and your name isn’t
on here don’t worry, you’ll be in future

642
00:46:25,950 --> 00:46:29,180
videos.

643
00:46:29,180 --> 00:46:30,760
Thank you for watching.

644
00:46:30,760 --> 00:46:34,730
Please subscribe to the channel, like the
video, leave a comment, and share the video

645
00:46:34,730 --> 00:46:38,000
with anyone else studying for the CCNA.

646
00:46:38,000 --> 00:46:40,790
If you want to leave a tip, check the links
in the description.

647
00:46:40,790 --> 00:46:46,500
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

648
00:46:46,500 --> 00:46:48,160
Brave browser.

649
00:46:48,160 --> 00:46:49,902
That's all for now.