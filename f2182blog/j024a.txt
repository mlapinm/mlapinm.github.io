1
00:00:01,140 --> 00:00:07,230
Welcome to Jeremy’s IT Lab. This is a free,
complete course for the CCNA. If you like

2
00:00:07,230 --> 00:00:12,670
these videos, please subscribe to follow along
with the series. Also, please like and leave

3
00:00:12,670 --> 00:00:16,930
a comment, and share the video to help spread
this free series of videos. Thanks for your

4
00:00:16,930 --> 00:00:18,770
help.

5
00:00:18,770 --> 00:00:24,749
In this we will be talking about ‘subnetting’.
This is a very big topic for the CCNA, but

6
00:00:24,749 --> 00:00:29,900
not just for the test, it’s an essential
skill for a network engineer. Many people

7
00:00:29,900 --> 00:00:35,591
have trouble understanding subnetting, but
let me assure you, it is NOT difficult. Subnetting

8
00:00:35,591 --> 00:00:41,809
is very simple if you take it step-by-step.
So, I’m going to split subnetting into 2

9
00:00:41,809 --> 00:00:46,879
, or maybe even 3 videos so we can take our
time to really understand subnetting without

10
00:00:46,879 --> 00:00:52,610
getting lost. Now, because subnetting is such
an important topic and many people have trouble

11
00:00:52,610 --> 00:00:58,260
with it, there are already plenty of subnetting
videos on youtube. Of course feel free to

12
00:00:58,260 --> 00:01:02,920
check out those videos too, there are some
different tricks and techniques people teach

13
00:01:02,920 --> 00:01:08,210
that can speed up the subnetting process.
I, however, will simply outline the basic

14
00:01:08,210 --> 00:01:14,310
steps involved in subnetting, I will avoid over-complicating the topic.  My end

15
00:01:14,310 --> 00:01:20,430
goal for these videos is that you understand
and can do subnetting. So let’s get started.

16
00:01:20,430 --> 00:01:28,020
So, what will we cover in this video? Only
a couple things. First is C I D R, pronounced

17
00:01:28,020 --> 00:01:35,420
CIDR, which stands for classless inter-domain
routing. What exactly is that? Well, remember

18
00:01:35,420 --> 00:01:42,610
I introduced the IPv4 address classes, such
as class A, B, and C? Well, CIDR throws all

19
00:01:42,610 --> 00:01:48,750
that away and lets us be more flexible with
our IPv4 networks. Then, of course, we’ll

20
00:01:48,750 --> 00:01:54,369
cover the process of subnetting, taking it
step-by-step so you don’t get lost.

21
00:01:54,369 --> 00:02:00,009
Now, before I get into CIDR, let’s review
these IPv4 address classes, so we can then

22
00:02:00,009 --> 00:02:06,909
understand the need for classLESS IPv4 addressing.
There are five classes of IPv4 addresses,

23
00:02:06,909 --> 00:02:14,800
A, B, C, D, and E. Class A addresses have
a first octet beginning with 0, and the rest

24
00:02:14,800 --> 00:02:20,480
of the bits can either be 0 or 1. This leads
to a decimal range for the first octet of

25
00:02:20,480 --> 00:02:29,250
0 to 127. Remember, an IPv4 address is 32
bits, so there are 4 octets, 4 groups of 8

26
00:02:29,250 --> 00:02:42,180
bits, in an IPv4 address. This makes the class
A address range from 0.0.0.0 through 127.255.255.255.

27
00:02:42,180 --> 00:02:46,960
Now, remember there are some special and reserved
addresses in these ranges that can’t be

28
00:02:46,960 --> 00:02:52,060
used for normal IP addresses on a device,
but for this video we’ll just include all

29
00:02:52,060 --> 00:02:59,510
of them in Class A. Class B addresses have
a first octet beginning with 1 0 , and the

30
00:02:59,510 --> 00:03:06,560
other 6 bits can be either 0 or 1. This gives
a range for the first octet of 128 through

31
00:03:06,560 --> 00:03:18,750
191. The address range for class B is 128.0.0.0
through 191.255.255.255. Class C addresses

32
00:03:18,750 --> 00:03:25,019
have the first three bits set to 1 1 0, and
the others can be either 0 or 1. If you write

33
00:03:25,019 --> 00:03:33,530
that range in decimal that is 192 through
223. The address range is therefore 192.0.0.0

34
00:03:33,530 --> 00:03:42,750
through 223.255.255.255. Class D addresses
begin with 1 1 1 0 in binary, which gives

35
00:03:42,750 --> 00:03:49,709
a range of 224 through 239 for the first octet
of the address. This means that the address range

36
00:03:49,709 --> 00:04:02,000
for class D is 224.0.0.0 through 239.255.255.255.
Finally, class E address begin with 1 1 1 1

37
00:04:02,000 --> 00:04:11,470
in binary, so the first octet range is 240
through 255, and therefore the address range is 240.0.0.0

38
00:04:11,470 --> 00:04:14,090
through 255.255.255.255.

39
00:04:14,090 --> 00:04:21,970
However, only the class A, B and C addresses
can be assigned to a device as an IP address,

40
00:04:21,970 --> 00:04:28,680
as classes D and E have special purposes I
mentioned in the IPv4 addressing videos. Class

41
00:04:28,680 --> 00:04:34,550
A addresses have a /8 prefix length, meaning
the first octet identifies the network and

42
00:04:34,550 --> 00:04:40,200
the other three octets are used for individual
hosts within the network. Class B addresses

43
00:04:40,200 --> 00:04:45,530
have a /16 prefix length, so the first two
octets identify the network, and the last

44
00:04:45,530 --> 00:04:51,610
two octets identify individual hosts within
that network. Class C addresses have a prefix

45
00:04:51,610 --> 00:04:57,600
length of /24, so the first three octets are
used to identify the network, and only the

46
00:04:57,600 --> 00:05:03,340
last octet is used to identify individual
hosts within that network.

47
00:05:03,340 --> 00:05:08,280
The different prefix lengths give different
characteristics to these classes. As you can

48
00:05:08,280 --> 00:05:14,130
see, there are few class A networks available,
only 128, actually less than that because

49
00:05:14,130 --> 00:05:21,280
some are reserved, like the 127.0.0.0/8 range,
which you may remember is used for loopback

50
00:05:21,280 --> 00:05:26,350
addresses. Because only the first octet of
a class A address is used for the network

51
00:05:26,350 --> 00:05:32,040
ID, there are three whole octets available
for addresses within each class A network,

52
00:05:32,040 --> 00:05:40,410
so there are 16 million, 777 thousand, 216
addresses in each class A network. That is

53
00:05:40,410 --> 00:05:48,220
2 to the power of 24, because there are 3
octets, 3 times 8 equals 24 bits. Class B

54
00:05:48,220 --> 00:05:55,270
addresses are different, there more class
B networks, 16,384, but fewer addresses per

55
00:05:55,270 --> 00:06:03,250
network, 65,536, which is still very many
addresses of course. Finally, there are very

56
00:06:03,250 --> 00:06:12,850
many class C networks, 2 million 97 thousand
152 networks, but only 256 addresses per network.

57
00:06:12,850 --> 00:06:19,850
So, how does a company get their own network
to use? Well, IP addresses are assigned to

58
00:06:19,850 --> 00:06:26,250
companies or organizations by a non-profit
American corporation called the IANA, the

59
00:06:26,250 --> 00:06:32,850
Internet Assigned Numbers Authority. The IANA
assigns IPv4 address and networks to companies

60
00:06:32,850 --> 00:06:39,160
based on their size. For example, a very large
company might receive a Class A or Class B

61
00:06:39,160 --> 00:06:44,370
network, remember there are lots of available
addresses to use for hosts in each class A

62
00:06:44,370 --> 00:06:49,910
and class B network, while a small company
might receive a class C network, because there

63
00:06:49,910 --> 00:06:56,810
are fewer addresses in each class C network,
only 256. However, this system led to many

64
00:06:56,810 --> 00:07:02,881
wasted IP addresses, so multiple methods of
improving this system have been created. Let

65
00:07:02,881 --> 00:07:08,680
me give you an example of how this strict
system of addresses can waste IP addresses.

66
00:07:08,680 --> 00:07:15,820
So, here are two routers. As you can see,
R1 has three networks connected to it here.

67
00:07:15,820 --> 00:07:20,910
Remember that routers are used to connect different
networks, so each of these links are separate

68
00:07:20,910 --> 00:07:28,280
Layer 3 networks, different IP networks. R2
also has three networks connected here. Perhaps

69
00:07:28,280 --> 00:07:33,300
each of these networks will have a few switches,
with many end hosts such as PCs and servers

70
00:07:33,300 --> 00:07:39,650
connected to these switches. However, there
is one more network here. That’s this network

71
00:07:39,650 --> 00:07:45,290
connecting these two routers. This is known
as a ‘point-to-point’ network, meaning

72
00:07:45,290 --> 00:07:51,591
that its a network connecting two points,
in this case R1 and R2. For example, this

73
00:07:51,591 --> 00:07:57,060
might be a connection between offices in different
cities, let’s say San francisco and new

74
00:07:57,060 --> 00:07:58,540
york.

75
00:07:58,540 --> 00:08:04,900
So, because this is a point-to-point network,
we don’t need a large address block, so

76
00:08:04,900 --> 00:08:14,020
let’s use a class C network, 203.0.113.0/24.
Because this is a class C network, there are

77
00:08:14,020 --> 00:08:22,620
256 addresses in the network. Minus 1 for
the network address, 203.0.113.0, minus one

78
00:08:22,620 --> 00:08:30,740
for the broadcast address, 203.0.113.255,
minus one for R1’s address, which I’ll

79
00:08:30,740 --> 00:08:40,300
assign as 203.0.113.1, and minus 1 for R2’s
address, which I’ll assign as 203.0.113.2.

80
00:08:40,300 --> 00:08:47,320
That’s a total of 4 addresses used, and
252 addresses WASTED. Clearly, this is not

81
00:08:47,330 --> 00:08:50,840
an ideal system.

82
00:08:50,840 --> 00:08:56,980
Before introducing CIDR, here’s another
quick example of address waste. A company,

83
00:08:56,980 --> 00:09:05,310
company X, needs IP addressing for 5000 end
hosts. This is a problem. Why? A class C network

84
00:09:05,310 --> 00:09:11,140
does not provide enough addresses, so a class
B network must be assigned. Because a class

85
00:09:11,140 --> 00:09:17,530
B network allows for about 65,000 addresses,
this results in about 60,000 addresses being

86
00:09:17,530 --> 00:09:19,610
wasted.

87
00:09:19,610 --> 00:09:23,970
When the Internet was first created, the creators
did not predict that the Internet would become

88
00:09:23,970 --> 00:09:30,150
as large as it is today. This resulted in
wasted address space like the examples I showed

89
00:09:30,150 --> 00:09:35,890
you, and there are many more examples that
I could show you. The total IPv4 address space

90
00:09:35,890 --> 00:09:40,970
includes over 4 billion addresses, and that
seemed like a huge number of addresses when

91
00:09:40,970 --> 00:09:52,060
IPv4 was created, but now address space exhaustion
is a big problem, there's not enough addresses.  One way to solve, or remedy this is

92
00:09:52,060 --> 00:10:00,190
CIDR. The IETF (Internet Engineering Task
Force) introduced CIDR in 1993 to replace

93
00:10:00,190 --> 00:10:03,760
the ‘classful’ addressing system.

94
00:10:03,760 --> 00:10:10,311
With CIDR, the requirements of ‘class A
address must use a /8 network mask, class

95
00:10:10,311 --> 00:10:18,190
B must use /16, and class C must use /24’
were removed. This allowed larger networks

96
00:10:18,190 --> 00:10:24,270
to be split into smaller networks, allowing
greater efficiency. These smaller networks

97
00:10:24,270 --> 00:10:29,340
are called ‘subnetworks’ or ‘subnets’.
Let’s look at an example of splitting a

98
00:10:29,340 --> 00:10:33,990
larger network into a smaller network so you
can see how it works.

99
00:10:33,990 --> 00:10:40,780
Here’s the same point-to-point network we
looked at before. Previously, it was assigned

100
00:10:40,780 --> 00:10:48,640
the 203.0.113.0/24 network space, but that
resulted in lots of wasted addresses. Let’s

101
00:10:48,640 --> 00:10:55,830
write this out in binary. Here’s the binary,
with the dotted decimal underneath. Now, the

102
00:10:55,830 --> 00:11:04,680
prefix length is /24, so here’s the network
mask, also known as the subnet mask, 255.255.255.0.

103
00:11:04,680 --> 00:11:11,210
Remember, all ‘1s’ in the subnet mask
indicate that the same bit in the address

104
00:11:11,210 --> 00:11:16,850
is the network portion. In this case, I made
the network portion blue, and the host portion

105
00:11:16,850 --> 00:11:26,381
is red. Well, how many host bits are there? 8, because
it’s one octet. So, how many potential hosts, or how

106
00:11:26,381 --> 00:11:33,520
many usable addresses are there? Well, the
formula is this. 2 to the power of 8, minus

107
00:11:33,520 --> 00:11:41,830
2, equals 254 usable addresses. What is the
8? Well, it’s the number of host bits, which is

108
00:11:41,830 --> 00:11:48,840
8 in this case. And why minus 2? Those are
the network address and broadcast address,

109
00:11:48,840 --> 00:11:53,760
we can’t assign them to a device so we have
to remove them from the number of usable addresses.

110
00:11:53,760 --> 00:12:01,560
So, we have 254 usable addresses, but we only
need two, one for R1 and one for R2.

111
00:12:01,560 --> 00:12:09,200
However, CIDR allows us to assign different
prefix lengths, it doesn’t have to be /24.

112
00:12:09,200 --> 00:12:13,340
Let’s get some practice calculating the
number of hosts with different prefix

113
00:12:13,340 --> 00:12:34,210
lengths. 203.0.113.0/25. 203.0.113.0/26, 203.0.113.0/27,
/28, /29, /30, /31, and finally /32. I’ve

114
00:12:34,210 --> 00:12:39,730
put /31 and /32 in red because they’re a
little bit special, you’ll see when you

115
00:12:39,730 --> 00:12:46,120
try to calculate it. So, pause the video here
and try to calculate how many usable address

116
00:12:46,120 --> 00:12:53,850
are in each network...okay, let’s check
out the answers.

117
00:12:53,850 --> 00:13:01,720
So, here is 203.0.113.0, but this time with
a /25 mask. Notice that the network portion

118
00:13:01,720 --> 00:13:06,570
of the address has extended into the first
bit of the last octet, and the mask

119
00:13:06,570 --> 00:13:15,910
in dotted decimal is now written as 255.255.255.128.
I changed the color of the extra bit to purple,

120
00:13:15,910 --> 00:13:21,140
but it is part of the network portion, the blue
part. If you don’t remember how to convert

121
00:13:21,140 --> 00:13:27,130
from binary to dotted decimal, make sure you
review that, it’s very important for subnetting.

122
00:13:27,130 --> 00:13:31,520
Now there are 7 bits in the host portion of
the address, so the number of usable addresses

123
00:13:31,520 --> 00:13:40,280
is 2 to the power of 7, minus 2, which equals
126. Once again, we only need 2 addresses,

124
00:13:40,280 --> 00:13:47,290
one for R1 and one for R2, so we will be wasting
124 addresses. That’s better than wasting

125
00:13:47,290 --> 00:13:53,890
252 addresses with a /24 prefix length, but
still its wasteful.

126
00:13:53,890 --> 00:14:02,160
How about a /26 prefix length? Notice that
it’s now written 255.255.255.192 in dotted

127
00:14:02,160 --> 00:14:08,351
decimal, because two bits of the last octet
are now part of the network portion. Since

128
00:14:08,351 --> 00:14:14,940
there are 6 host bits, there are now 62 usable
addresses in this network. If we were to use

129
00:14:14,940 --> 00:14:23,640
a /26 network mask for the 203.0.113.0 network,
we would be wasting 60 addresses. Getting

130
00:14:23,640 --> 00:14:27,730
better, but we can make this network even
smaller.

131
00:14:27,730 --> 00:14:33,690
Now that you get the idea, let’s speed it
up. For a /27 prefix length, the mask is written

132
00:14:33,690 --> 00:14:42,660
as 255.255.255.224 in dotted decimal. There
are now 5 host bits, so that means there are

133
00:14:42,660 --> 00:14:49,470
30 usable addresses. As you can see, the address
space is getting smaller and smaller as we extend the

134
00:14:49,470 --> 00:14:50,650
network mask.

135
00:14:50,650 --> 00:15:00,921
For a /28 prefix length, the mask is written
as 255.255.255.240 in dotted decimal. There

136
00:15:00,921 --> 00:15:08,180
are now only 4 host bits, so that means there
are 14 usable addresses. After assigning addresses

137
00:15:08,180 --> 00:15:14,500
to R1 and R2 this would mean only 12 wasted
addresses. But we can make this address space

138
00:15:14,500 --> 00:15:19,680
even smaller, to make our addressing even
more efficient.

139
00:15:19,680 --> 00:15:28,330
If we use a /29 prefix length, the mask is
written as 255.255.255.248 in dotted decimal.

140
00:15:28,330 --> 00:15:34,920
Now we have only 3 host bits, so that means
there are just 6 usable addresses. Again,

141
00:15:34,920 --> 00:15:41,510
after we give R1 and R2 addresses there would
be only 4 wasted addresses.

142
00:15:41,510 --> 00:15:50,140
If we use a /30 prefix length, the mask is
written as 255.255.255.252 in dotted decimal.

143
00:15:50,140 --> 00:15:56,921
There are now only 2 host bits, so that means
2 usable addresses. So, this is perfect! There

144
00:15:56,921 --> 00:16:03,060
are 4 total addresses, that's the network address,
the broadcast address, R1’s address, and

145
00:16:03,060 --> 00:16:07,899
R2’s address. That means 0 wasted addresses!

146
00:16:07,899 --> 00:16:19,150
Before moving on to /31 and /32 let me clarify
a little bit. So, instead of 203.0.113.0/24,

147
00:16:19,150 --> 00:16:30,170
we will use 203.0.113.0/30, which is a subnet
of that larger class C network. 203.0.113.0/30

148
00:16:30,170 --> 00:16:38,089
includes the address range of 203.0.113.0
through 203.0.113.3. Let me show you that

149
00:16:38,089 --> 00:16:50,420
in binary. Here is 203.0.113.0 in binary,
the host portion all 0s. Here is 203.0.113.1,

150
00:16:50,420 --> 00:17:00,380
203.0.113.2, and 203.0.113.3. These are the
4 addresses in the network, these two being

151
00:17:00,380 --> 00:17:07,351
the two usable addresses which are assigned
to R1 and R2. So we took up 4 addresses with

152
00:17:07,351 --> 00:17:14,880
this subnet, what about the other addresses
in the 203.0.113.0/24 range? The remaining

153
00:17:14,880 --> 00:17:24,709
addresses in the address block, which are 203.0.113.4 – 203.0.113.255, are now available

154
00:17:24,709 --> 00:17:33,559
to be used in other subnets! That’s the
magic of subnetting. Instead of using 203.0.113.0/24

155
00:17:33,559 --> 00:17:42,480
and wasting 252 addresses, we can use /30 and
waste no addresses. Or, perhaps there is another

156
00:17:42,480 --> 00:17:47,340
way to make this even more efficient? Let’s
look into it.

157
00:17:47,340 --> 00:17:57,010
If we use a /31 prefix length, the mask is
written as 255.255.255.254 in dotted decimal.

158
00:17:57,010 --> 00:18:06,100
There is now only 1 host bit, so that means...0
usable addresses. 2 to the power of 1 is 2,

159
00:18:06,100 --> 00:18:12,030
minus 2 for the network and broadcast addresses,
means 0 addresses that we can assign to devices.

160
00:18:12,030 --> 00:18:19,780
So, you used to not be able to use /31 network
prefixes because of this. HOWEVER, for a point

161
00:18:19,780 --> 00:18:25,390
to point connection like this it actually
is possible to use a /31 mask. Let’s check

162
00:18:25,390 --> 00:18:27,460
it out.

163
00:18:27,460 --> 00:18:41,179
So here’s the 203.0.113.0/31 network, R1
is 203.0.113.0 and R2 is 203.0.113.1. The

164
00:18:41,179 --> 00:18:50,740
203.0.113.0/31 network consists of the addresses
from 203.0.113.0 through 203.0.113.1...which

165
00:18:50,740 --> 00:18:58,580
is actually only two addresses. Here they
are in binary. there’s 203.0.113.0, and

166
00:18:58,580 --> 00:19:05,559
there’s 203.0.113.1. Normally this would
be a problem, because it leaves no usable

167
00:19:05,559 --> 00:19:10,240
addresses after subtracting the network and
broadcast addresses, but for point-to-point

168
00:19:10,240 --> 00:19:15,530
networks like this, a dedicated connection
like this between two routers, there is actually

169
00:19:15,530 --> 00:19:20,900
no need for a network address or a broadcast
address. So, we can break the rules in this

170
00:19:20,900 --> 00:19:27,290
case and assign the only two addresses in
this network to our routers. Note that, if

171
00:19:27,290 --> 00:19:32,020
you try this configuration on a Cisco router,
you’ll get a warning like this, reminding

172
00:19:32,020 --> 00:19:37,490
you to make sure that this is a point-to-point
link, but it is a totally valid configuration.

173
00:19:37,490 --> 00:19:47,340
So, once again The remaining addresses in
the 203.0.113.0/24 address block, which are 203.0.113.2

174
00:19:47,340 --> 00:19:54,730
– 255 are now available to be
used in other networks! But this time we’ve

175
00:19:54,730 --> 00:20:02,110
saved even more addresses, using only 2 addresses
instead of 4 for this point-to-point connection.

176
00:20:02,110 --> 00:20:08,130
People still do use /30 for point-to-point
connections at times, but /31 masks are totally

177
00:20:08,130 --> 00:20:14,130
valid and more efficient than /30 so I recommend
this method!

178
00:20:14,130 --> 00:20:23,030
But we still haven’t looked at the /32 mask.
A /32 mask is written as 255.255.255.255 in

179
00:20:23,030 --> 00:20:29,620
dotted decimal, making the entire address
the network portion, there are no host bits.

180
00:20:29,620 --> 00:20:35,280
If you calculate this using our formula, you
will get -1 usable addresses...clearly the

181
00:20:35,280 --> 00:20:41,510
formula doesn’t work in this case. You won’t
be able to use a /32 mask in this case, and

182
00:20:41,510 --> 00:20:47,461
you will probably never use a /32 mask to
configure an actual interface. However, there

183
00:20:47,461 --> 00:20:53,180
are some uses for a /32 mask, for example
when you want to create a static route not

184
00:20:53,180 --> 00:20:59,920
to a network, but just to one specific host,
you can use a /32 mask to specify that exact

185
00:20:59,920 --> 00:21:05,710
host. Anyway, I’ll talk about that later
in the course, just know that /32 masks are

186
00:21:05,710 --> 00:21:10,090
used at some points, but you don’t have
to worry about them for now.

187
00:21:10,090 --> 00:21:15,550
Here’s a simple chart showing the dotted
decimal subnet masks, and their equivalent

188
00:21:15,550 --> 00:21:21,170
in CIDR notation. That’s right, the way
of writing a prefix with a slash followed

189
00:21:21,170 --> 00:21:29,780
by the prefix length, like /25, /26, etc.
is called CIDR notation, because it was introduced

190
00:21:29,780 --> 00:21:36,880
with the CIDR system. Previously, only the
dotted decimal method was used. Note that

191
00:21:36,880 --> 00:21:41,630
I’ve showed you only how to subnet a class
C network so far, but we will look at

192
00:21:41,630 --> 00:21:49,790
class B and class A networks as well, with
prefix lengths like /17, /11, /9, etc.

193
00:21:49,790 --> 00:21:55,500
I spent a lot of time on just that one
example, but I hope you can see the use of

194
00:21:55,500 --> 00:22:00,981
subnetting, dividing a larger network into
smaller networks, called subnets. Instead

195
00:22:00,981 --> 00:22:07,130
of using the whole 203.0.113.0/24 network
for the point to point connection, we can

196
00:22:07,130 --> 00:22:14,070
use a /30 subnet and use only 4 addresses,
or even better use a /31 subnet and use only

197
00:22:14,070 --> 00:22:20,290
2 addresses. I’ll give one more example
of subnetting before finishing up this video.

198
00:22:20,290 --> 00:22:23,870
In the next video I’ll give you some practice
problems and walk you through them so you

199
00:22:23,870 --> 00:22:26,710
can get some hands-on practice with subnetting.

200
00:22:26,710 --> 00:22:33,620
So, here’s a scenario. There are 4 networks
connected to R1, with many hosts connected

201
00:22:33,620 --> 00:22:40,760
to each switch. There are 45 hosts per network,
R1 needs an IP address in each network so

202
00:22:40,760 --> 00:22:49,710
its address is included in the range. You
have received the 192.168.1.0/24 network,

203
00:22:49,710 --> 00:22:54,080
and you must divide the network into four
subnets that can accommodate the number of

204
00:22:54,080 --> 00:23:01,950
hosts required. First off, are there enough
addresses in the 192.168.1.0/24 network in

205
00:23:01,950 --> 00:23:09,010
the first place? So, we need 45 hosts per network,
including R1, but also remember that each

206
00:23:09,010 --> 00:23:14,831
network has a network and broadcast address,
so that’s plus 2, so we need 47 addresses

207
00:23:14,840 --> 00:23:24,240
per subnet. 47 times 4 equals 188, so there’s
no problem in terms of the number of hosts.

208
00:23:24,240 --> 00:23:32,560
192.168.1.0/24 is a class C network, so there
are 256 addresses, so we will be able to assign

209
00:23:32,570 --> 00:23:36,460
4 subnets to accommodate all hosts, no problem.

210
00:23:36,460 --> 00:23:42,070
Okay let’s see how we can calculate the
subnets we need to make. We need four equal

211
00:23:42,070 --> 00:23:50,450
sized subnets with enough room for at least
45 hosts. Here, I’ve written out 192.168.1.0

212
00:23:50,450 --> 00:24:00,030
with a /30 mask, 255.255.255.252. I skipped
/32 and /31, since these aren’t point to

213
00:24:00,030 --> 00:24:08,190
point links, we can’t use /31, and definitely
cant use /32. Since there are 2 host bits,

214
00:24:08,190 --> 00:24:14,290
the formula to determine the number of usable
addresses is 2 to the power of 2, minus 2.

215
00:24:14,290 --> 00:24:20,970
2 to the power of 2 is 2 times 2, which is
4. So that means there are 2 usable addresses

216
00:24:20,970 --> 00:24:28,220
in a /30 network. Clearly not enough room
to accommodate the 45 hosts we have.

217
00:24:28,220 --> 00:24:36,330
How about if we use a /29 mask to make these subnets, can we fit
the 45 hosts we need? There are 3 host bits,

218
00:24:36,330 --> 00:24:43,710
so the formula is 2 to the power of 3 minus
2. 2 to the power of 3 is 2 times 2 times

219
00:24:43,710 --> 00:24:51,910
2, which is 8. Therefore there are 6 usable
addresses, not enough for 45 hosts.

220
00:24:51,910 --> 00:24:59,610
How about if we use /28? There are 4 host
bits, so the formula is 2 to the power of 4

221
00:24:59,610 --> 00:25:07,710
minus 2. 2 to the power of 4 is 2 times 2
times 2 times 2, which is 16. So, that means there are

222
00:25:07,710 --> 00:25:13,410
14 usable addresses, once again not enough for 45 hosts.

223
00:25:13,410 --> 00:25:22,550
How about /27? There are 5 host bits, so the
formula is 2 to the power of 5 minus 2. And 2 to

224
00:25:22,550 --> 00:25:30,169
the power of 5 is 2 times 2 times 2 times
2 times 2, which equals 32. So that means

225
00:25:30,169 --> 00:25:35,370
30 usable addresses, again not enough
for 45 hosts.

226
00:25:35,370 --> 00:25:42,280
How about a /26 subnet mask? There are now 6
host bits, so the formula is 2 to the power

227
00:25:42,280 --> 00:25:50,900
of 6 minus 2. 2 to the power of 6 is 2 times
2 times 2 times 2 times 2 times 2, which equals

228
00:25:50,900 --> 00:25:59,120
64. That means there are 62 usable addresses.
So, it looks like we’ve found our number! /27

229
00:25:59,120 --> 00:26:04,960
doesn’t provide enough address space. /26
provides more than we need, but we have to

230
00:26:04,960 --> 00:26:10,940
go with /26. Unfortunately we can’t always
make subnets have exactly the number of addresses

231
00:26:10,940 --> 00:26:16,570
you want. There might be some unused address
space. That’s actually fine, since its good

232
00:26:16,570 --> 00:26:20,500
to have some room for growth anyway.

233
00:26:20,500 --> 00:26:26,571
So I think this video has gone on long enough.
Instead of finishing this task in this video, I’ll make

234
00:26:26,571 --> 00:26:36,660
it this week’s quiz. The first subnet (Subnet
1) is 192.168.1.0/26. What are the remaining

235
00:26:36,660 --> 00:26:42,340
subnets? To help you out, here’s a hint.  Find the broadcast address of Subnet

236
00:26:42,340 --> 00:26:50,120
1. The next address after that is the network address
of Subnet 2. And then just repeat the process for Subnets

237
00:26:50,120 --> 00:26:55,730
3 and 4. Post your answers in the comment
section, and I’ll also go over the answer

238
00:26:55,730 --> 00:26:57,970
in the next video.

239
00:26:57,970 --> 00:27:05,300
So, what did we cover in this video? We covered
CIDR, classless inter-domain routing, which

240
00:27:05,300 --> 00:27:10,680
removes the rules of class A, B and C networks
and lets us be more flexible with network

241
00:27:10,680 --> 00:27:17,030
addressing, according to the size of the network.
We also covered the process of subnetting,

242
00:27:17,030 --> 00:27:22,040
but mostly just the basics. Hopefully you
understand the purpose of subnetting, and

243
00:27:22,040 --> 00:27:27,120
know a little bit about how to do it. I’ll
clarify and expand upon many things in the

244
00:27:27,120 --> 00:27:33,960
next video, but also feel free to ask any
questions you have in the comment section.

245
00:27:33,960 --> 00:27:38,760
For today’s video there won’t be a practice
lab, that will be after I’ve finished explaining everything about

246
00:27:38,760 --> 00:27:43,760
subnetting. There will be flashcards, however,
to help you review some of the things learned

247
00:27:43,760 --> 00:27:48,120
in this video.  You can download them from the link in the description.

248
00:27:48,120 --> 00:27:53,280
I’ve also recently enabled the membership
feature for my channel. If you want to leave

249
00:27:53,289 --> 00:27:59,070
a monthly tip to support me, this is another
great way to do so. Click join here under

250
00:27:59,070 --> 00:28:01,710
the video to check it out.

251
00:28:01,710 --> 00:28:08,230
For those who become a JCNP, aka Jeremy Certified
Network Professional, -level supporter, I’ll

252
00:28:08,230 --> 00:28:14,700
give you a shoutout at the end of my videos.
So first of all, thank you so much to Vance Simmons. I just

253
00:28:14,700 --> 00:28:19,080
enabled the membership feature and haven’t
said anything about it yet, and he became my first

254
00:28:19,080 --> 00:28:24,670
JCNP-level supporter. Thank you so much for supporting
the channel, I hope the videos are helping

255
00:28:24,670 --> 00:28:33,080
you out. And for my JCNA-level supporters,
thanks to you too.

256
00:28:33,080 --> 00:28:37,950
Thank you for watching. Please subscribe to
the channel, like the video, leave a comment,

257
00:28:37,950 --> 00:28:43,030
and share the video with anyone else studying
for the CCNA. If you want to leave a tip,

258
00:28:43,030 --> 00:28:48,650
check the links in the description. I'm also
a Brave verified publisher and accept BAT,

259
00:28:48,650 --> 00:28:53,580
or Basic Attention Token, tips via the Brave
browser. That's all for now.