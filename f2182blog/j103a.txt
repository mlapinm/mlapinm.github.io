1
00:00:01,100 --> 00:00:03,470
Welcome to Jeremy’s IT Lab.

2
00:00:03,470 --> 00:00:06,980
This is a free, complete course for the CCNA.

3
00:00:06,980 --> 00:00:10,890
If you like these videos, please subscribe
to follow along with the series.

4
00:00:10,890 --> 00:00:15,770
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:15,770 --> 00:00:16,850
of videos.

6
00:00:16,850 --> 00:00:18,760
Thanks for your help.

7
00:00:18,760 --> 00:00:24,950
If you want more labs like this, I highly
recommend Boson Software’s NetSim for CCNA.

8
00:00:24,950 --> 00:00:29,580
NetSim is a network simulator like Packet
Tracer, but it’s far more powerful and contains

9
00:00:29,580 --> 00:00:34,989
over 100 detailed guided labs covering the
CCNA exam topics.

10
00:00:34,989 --> 00:00:39,659
If you want to get NetSim, follow the link
in the description.

11
00:00:39,659 --> 00:00:44,859
In this lab we will configure a GRE tunnel
between R1 and R2.

12
00:00:44,859 --> 00:00:49,600
Both routers are connected to a service provider
network, but the GRE tunnel will create a

13
00:00:49,600 --> 00:00:52,579
virtual direct connection between them.

14
00:00:52,579 --> 00:00:58,429
Now, all traffic between R1 and R2 will still
have to physically pass through the service

15
00:00:58,429 --> 00:01:00,269
provider network.

16
00:01:00,269 --> 00:01:05,610
However all packets will be encapsulated in
additional headers to create a virtual tunnel

17
00:01:05,610 --> 00:01:08,120
that the original packets pass through.

18
00:01:08,120 --> 00:01:13,990
Now, as I mentioned in the lecture video GRE
doesn’t encrypt packets, so it’s not secure

19
00:01:13,990 --> 00:01:15,789
on its own.

20
00:01:15,789 --> 00:01:20,640
However the purpose of this video is just
to demonstrate how tunnels work, so I picked

21
00:01:20,640 --> 00:01:24,710
GRE because it’s quite simple to configure.

22
00:01:24,710 --> 00:01:30,009
So let’s get right into configuring GRE,
on R1 first.

23
00:01:30,009 --> 00:01:31,439
ENABLE.

24
00:01:31,439 --> 00:01:37,310
CONF T. To configure a GRE tunnel, we have
to make a tunnel interface.

25
00:01:37,310 --> 00:01:43,759
This is not a physical interface, of course,
but a virtual interface like a loopback interface.

26
00:01:43,759 --> 00:01:44,869
INTERFACE TUNNEL 0.

27
00:01:44,869 --> 00:01:48,310
Okay, I have created the tunnel interface.

28
00:01:48,310 --> 00:01:52,880
Now I just need a few commands to complete
the GRE configuration.

29
00:01:52,880 --> 00:01:59,490
First, TUNNEL SOURCE, and now we have to specify
which physical interface on R1 will be used

30
00:01:59,490 --> 00:02:00,490
for the tunnel.

31
00:02:00,490 --> 00:02:06,219
Well, we should use the interface connected
to the service provider, so G0/0/0.

32
00:02:06,219 --> 00:02:12,360
Next, TUNNEL DESTINATION, and then we have
to specify the IP address of the other end

33
00:02:12,360 --> 00:02:14,210
of the tunnel, of R2.

34
00:02:14,210 --> 00:02:18,420
So, I’ll enter R2’s WAN interface’s
IP, 200.0.0.2.

35
00:02:18,420 --> 00:02:26,240
And finally, the virtual tunnel interface
itself needs an IP address.

36
00:02:26,240 --> 00:02:30,690
IP ADDRESS 192.168.1.1 255.255.255.252.

37
00:02:30,690 --> 00:02:36,240
Okay, that’s all the configuration needed.

38
00:02:36,240 --> 00:02:40,190
TUNNEL SOURCE, TUNNEL DESTINATION, and then
IP ADDRESS.

39
00:02:40,190 --> 00:02:43,040
Let’s check the status.

40
00:02:43,040 --> 00:02:45,570
DO SHOW IP INTERFACE BRIEF.

41
00:02:45,570 --> 00:02:49,590
Okay, the Tunnel0 interface is up/down.

42
00:02:49,590 --> 00:02:50,590
Why down?

43
00:02:50,590 --> 00:02:55,810
We’ll investigate that after configuring
R2.

44
00:02:55,810 --> 00:02:58,790
So let’s do the same thing on R2.

45
00:02:58,790 --> 00:03:00,430
ENABLE.

46
00:03:00,430 --> 00:03:04,260
CONF T. INTERFACE TUNNEL 0.

47
00:03:04,260 --> 00:03:09,920
TUNNEL SOURCE, and just like on R1 it will
be G0/0/0.

48
00:03:09,920 --> 00:03:17,820
TUNNEL DESTINATION, this time it will be the
IP address of R1’s WAN interface, 100.0.0.2.

49
00:03:17,820 --> 00:03:19,920
And finally the IP address.

50
00:03:19,920 --> 00:03:23,200
IP ADDRESS 192.168.1.2 255.255.255.252.

51
00:03:23,200 --> 00:03:30,250
Okay, that’s all, let’s check the status.

52
00:03:30,250 --> 00:03:32,720
DO SHOW IP INTERFACE BRIEF.

53
00:03:32,720 --> 00:03:37,590
Okay, there’s the tunnel interface, but
it’s still down.

54
00:03:37,590 --> 00:03:41,340
Why is that, even though we’ve configured
both sides?

55
00:03:41,340 --> 00:03:43,090
Let me show you.

56
00:03:43,090 --> 00:03:45,030
DO SHOW IP ROUTE.

57
00:03:45,030 --> 00:03:50,190
So, R2 doesn’t have a connected route for
its tunnel interface of course, because the

58
00:03:50,190 --> 00:03:52,400
interface is still down.

59
00:03:52,400 --> 00:03:57,290
It has connected routes for its physical interfaces,
but we’re missing a critical route.

60
00:03:57,290 --> 00:04:05,850
R2 doesn’t know how to reach the IP address
we specified as the tunnel destination, 100.0.0.2.

61
00:04:05,850 --> 00:04:12,160
If R2 doesn’t know how to get to 100.0.0.2,
it can’t build a GRE tunnel to 100.0.0.2.

62
00:04:12,160 --> 00:04:15,520
So, let’s fix that.

63
00:04:15,520 --> 00:04:16,520
EXIT.

64
00:04:16,520 --> 00:04:19,280
I’ll just configure a default route.

65
00:04:19,280 --> 00:04:27,160
IP ROUTE 0.0.0.0 0.0.0.0 200.0.0.1.

66
00:04:27,160 --> 00:04:33,040
Okay, after we have the route to 100.0.0.2,
the tunnel interface comes up.

67
00:04:33,040 --> 00:04:34,440
Let’s check.

68
00:04:34,440 --> 00:04:37,130
DO SHOW IP ROUTE.

69
00:04:37,130 --> 00:04:39,160
Now we have the connected route for the tunnel.

70
00:04:39,160 --> 00:04:42,460
Let’s try to ping R1’s side.

71
00:04:42,460 --> 00:04:47,970
DO PING 192.168.1.1.

72
00:04:47,970 --> 00:04:58,930
Hmm, the ping still isn’t working, even
though the interface is up and we have a route.

73
00:04:58,930 --> 00:05:05,740
Actually the reason for that is that we also
have to configure a route on R1 to 200.0.0.2.

74
00:05:05,740 --> 00:05:10,410
Let’s check the routing table on R1.

75
00:05:10,410 --> 00:05:13,540
DO SHOW IP ROUTE.

76
00:05:13,540 --> 00:05:18,210
Only connected routes for its physical interfaces,
so it doesn’t know how to get to the tunnel

77
00:05:18,210 --> 00:05:20,790
destination, 200.0.0.2.

78
00:05:20,790 --> 00:05:24,690
I’ll configure a default route here, too.

79
00:05:24,690 --> 00:05:25,690
EXIT.

80
00:05:25,690 --> 00:05:31,920
IP ROUTE 0.0.0.0 0.0.0.0 100.0.0.1.

81
00:05:31,920 --> 00:05:38,031
Okay, now the tunnel interface comes up, and
this time a ping from R1 to R2’s tunnel

82
00:05:38,031 --> 00:05:40,500
interface should work.

83
00:05:40,500 --> 00:05:44,960
DO PING 192.168.1.2.

84
00:05:44,960 --> 00:05:50,870
As usual the first few pings might fail because
the ARP process is a bit slow in packet tracer,

85
00:05:50,870 --> 00:05:53,580
but after ARP completes they will succeed.

86
00:05:53,580 --> 00:06:00,370
So, although R1 and R2 aren’t directly connected,
they will behave as if they are directly connected

87
00:06:00,370 --> 00:06:06,430
through the GRE tunnel, and soon you will
see what happens when we activate OSPF.

88
00:06:06,430 --> 00:06:09,380
But first, let me show you a ping in simulation
mode.

89
00:06:09,380 --> 00:06:13,120
Okay, I’ll do that ping again.

90
00:06:13,120 --> 00:06:16,550
PING 192.168.1.2.

91
00:06:16,550 --> 00:06:21,140
Okay let’s check the contents of this message
that R1 sends.

92
00:06:21,140 --> 00:06:25,900
Click on outbound PDU details, and let’s
scroll down to the bottom.

93
00:06:25,900 --> 00:06:29,639
So, there’s the ICMP message, the ping.

94
00:06:29,639 --> 00:06:38,419
It’s encapsulated with an IP header, source
192.168.1.1 and destination 192.168.1.2, so

95
00:06:38,419 --> 00:06:41,200
the addresses of the tunnel interfaces.

96
00:06:41,200 --> 00:06:47,590
But then on top of that there is a GRE header,
and on top of that there is another IP header.

97
00:06:47,590 --> 00:06:55,610
In this outer IP header, the source IP is
100.0.0.2, R1’s G0/0/0 interface, and the

98
00:06:55,610 --> 00:07:01,280
destination IP is 200.0.0.2, R2’s G0/0/0
interface.

99
00:07:01,280 --> 00:07:04,340
So, we call this a tunnel.

100
00:07:04,340 --> 00:07:09,730
The original packet from R1’s tunnel interface
to R2’s tunnel interface is encapsulated

101
00:07:09,730 --> 00:07:14,770
within an additional IP header which is used
to transport the original packet over the

102
00:07:14,770 --> 00:07:17,370
service provider network to reach R2.

103
00:07:17,370 --> 00:07:23,630
Now, something you can do when R1 and R2 are
virtually directly connected like this is

104
00:07:23,630 --> 00:07:27,300
make them OSPF neighbors to share routes.

105
00:07:27,300 --> 00:07:32,710
First let me demonstrate that a ping from
PC1 to PC2 doesn’t work.

106
00:07:32,710 --> 00:07:35,440
PING 10.0.2.100.

107
00:07:35,440 --> 00:07:41,920
Let’s wait a bit for all the pings to go
through, they should fail.

108
00:07:41,920 --> 00:07:47,990
But when R1 and R2 become OSPF neighbors they
will learn each other’s routes, and PC1

109
00:07:47,990 --> 00:07:52,830
and PC2 will be able to communicate over the
GRE tunnel.

110
00:07:52,830 --> 00:07:57,580
So let’s enable OSPF on R1 first.

111
00:07:57,580 --> 00:07:59,020
ROUTER OSPF 1.

112
00:07:59,020 --> 00:08:04,870
I’ll enable it on the tunnel interface,
but also the G0/0 interface so that it tells

113
00:08:04,870 --> 00:08:08,210
R2 about its connected LAN.

114
00:08:08,210 --> 00:08:10,990
NETWORK 192.168.1.1 0.0.0.0 AREA 0.

115
00:08:10,990 --> 00:08:19,580
That enables OSPF on the tunnel 0 interface,
next G0/0.

116
00:08:19,580 --> 00:08:24,639
NETWORK 10.0.1.1 0.0.0.0 AREA 0.

117
00:08:24,639 --> 00:08:30,229
And I’ll make G0/0 a passive interface since
there are no neighbors connected to it.

118
00:08:30,229 --> 00:08:33,240
PASSIVE-INTERFACE G0/0.

119
00:08:33,240 --> 00:08:37,099
Okay now I’ll do the same on R2.

120
00:08:37,099 --> 00:08:39,459
ROUTER OSPF 1.

121
00:08:39,459 --> 00:08:45,160
NETWORK 192.168.1.2 0.0.0.0 AREA 0.

122
00:08:45,160 --> 00:08:50,920
NETWORK 10.0.2.1 0.0.0.0 AREA 0.

123
00:08:50,920 --> 00:08:55,709
And again I’ll make G0/0 a passive interface
here, because there are no OSPF neighbors

124
00:08:55,709 --> 00:08:58,040
connected to it.

125
00:08:58,040 --> 00:09:01,360
PASSIVE-INTERFACE G0/0.

126
00:09:01,360 --> 00:09:06,899
Okay, and as you can see R1 and R2 have become
OSPF neighbors.

127
00:09:06,899 --> 00:09:09,379
Let’s check the routes.

128
00:09:09,379 --> 00:09:11,449
DO SHOW IP ROUTE.

129
00:09:11,449 --> 00:09:19,459
Okay, it learned a route to 10.0.1.0/24, R1’s
LAN, via the tunnel0 interface.

130
00:09:19,459 --> 00:09:23,180
And I’ll go back to check on R1 also.

131
00:09:23,180 --> 00:09:25,050
DO SHOW IP ROUTE.

132
00:09:25,050 --> 00:09:30,430
Okay, it learned a route to 10.0.2.0/24 via
the tunnel0 interface.

133
00:09:30,430 --> 00:09:38,029
Okay, let’s try that ping from PC1 to PC2
again, and this time it should work.

134
00:09:38,029 --> 00:09:42,100
PING 10.0.2.100.

135
00:09:42,100 --> 00:09:45,460
One or two pings might fail, but after that
they will work.

136
00:09:45,460 --> 00:09:51,689
R1 will encapsulate the packet from PC1 using
GRE and send it over the tunnel to R2.

137
00:09:51,689 --> 00:09:55,490
Okay, in this video I introduced GRE tunnels.

138
00:09:55,490 --> 00:10:00,630
You don’t need to know this for the CCNA
exam, but it’s simple to configure and hopefully

139
00:10:00,630 --> 00:10:03,459
helped you understand a little about how tunnels
work.

140
00:10:03,459 --> 00:10:05,730
That’s all for this lab.

141
00:10:05,730 --> 00:10:15,720
Now let’s take a look at a bonus lab in
Boson Software’s NetSim for CCNA.