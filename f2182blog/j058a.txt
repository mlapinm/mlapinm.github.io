1
00:00:01,730 --> 00:00:04,150
Welcome to Jeremy’s IT Lab.

2
00:00:04,150 --> 00:00:07,680
This is a free, complete course for the CCNA.

3
00:00:07,680 --> 00:00:11,610
If you like these videos, please subscribe
to follow along with the series.

4
00:00:11,610 --> 00:00:16,320
Also, please like and leave a comment, and
share the video to help spread this free series

5
00:00:16,320 --> 00:00:17,420
of videos.

6
00:00:17,420 --> 00:00:19,789
Thanks for your help.

7
00:00:19,789 --> 00:00:23,189
In this video we will cover IPv6.

8
00:00:23,189 --> 00:00:28,869
As you already know, up to this point in the
course we have been covering only IPv4.

9
00:00:28,869 --> 00:00:34,440
But IPv6 is the future, and it is starting
to take over networks all over the world.

10
00:00:34,440 --> 00:00:40,210
IPv6 brings multiple improvements over IPv4,
but there is one main reason for the switch

11
00:00:40,210 --> 00:00:41,640
to IPv6.

12
00:00:41,640 --> 00:00:48,469
IPv6 is covered in a few areas of the official
exam topics list.

13
00:00:48,469 --> 00:00:55,309
Topic 1.8 says you must be able to configure
and verify IPv6 addressing and prefixes, and

14
00:00:55,309 --> 00:01:00,900
1.9 says you must be able to compare various
IPv6 address types.

15
00:01:00,900 --> 00:01:05,760
You should also be able to configure and verify
the same kinds of static routes in IPv6, that

16
00:01:05,760 --> 00:01:07,830
we already covered in IPv4.

17
00:01:07,830 --> 00:01:13,010
I considered trying to fit all of this into
a single video, but have decided to split

18
00:01:13,010 --> 00:01:14,400
it up.

19
00:01:14,400 --> 00:01:19,550
A lot of CCNA candidates don’t feel confident
about their IPv6 knowledge.

20
00:01:19,550 --> 00:01:24,470
I think that’s because we spend so much
time learning IPv4, but then so many courses

21
00:01:24,470 --> 00:01:28,400
just briefly cover IPv6 and then never mention
it again.

22
00:01:28,400 --> 00:01:34,610
Let’s take our time to cover IPv6, and make
sure you feel confident about answering IPv6

23
00:01:34,610 --> 00:01:36,430
questions on the exam.

24
00:01:36,430 --> 00:01:39,090
Here’s what we’ll cover in this video.

25
00:01:39,090 --> 00:01:41,910
First, let’s review hexadecimal.

26
00:01:41,910 --> 00:01:47,330
I told you about hexadecimal when we covered
MAC addresses, but let’s make sure you really

27
00:01:47,330 --> 00:01:52,620
understand hexadecimal, because IPv6 addresses
are written in hexadecimal too.

28
00:01:52,620 --> 00:01:56,960
Then I’ll give an overview of why IPv6 is
necessary, why we are starting to move away

29
00:01:56,960 --> 00:01:57,960
from IPv4.

30
00:01:57,960 --> 00:02:05,610
I’ll give you a basic overview of IPv6,
specifically IPv6 addresses.

31
00:02:05,610 --> 00:02:10,590
Finally I’ll show you how to configure IPv6
addresses on Cisco devices.

32
00:02:10,590 --> 00:02:15,430
Watch until the end of the video for a bonus
practice question from Boson ExSim, the best

33
00:02:15,430 --> 00:02:17,890
practice exams for the CCNA.

34
00:02:17,890 --> 00:02:23,459
I used them to study for my exams, and they
are the best practice exams out there.

35
00:02:23,459 --> 00:02:29,129
If you want to get Boson ExSim, follow the
link in the video description.

36
00:02:29,129 --> 00:02:34,390
Before talking about IPv6, you may be wondering,
what about IPv5?

37
00:02:34,390 --> 00:02:39,230
I think I mentioned this earlier in the course,
but here’s another quick review.

38
00:02:39,230 --> 00:02:44,129
Internet Stream Protocol was developed in
the late 1970s, although it was never actually

39
00:02:44,129 --> 00:02:46,760
introduced for public use.

40
00:02:46,760 --> 00:02:53,470
It was never called IPv5, but it used a value
of 5 in the version field of the IP header.

41
00:02:53,470 --> 00:02:58,099
If you remember, Day 10 of this course covered
the IPv4 header, and the very first field

42
00:02:58,099 --> 00:03:00,030
is the version field.

43
00:03:00,030 --> 00:03:06,040
IPv4 uses a value of 4, and Internet Stream
Protocol used a value of 5.

44
00:03:06,040 --> 00:03:12,889
So, to avoid confusion, when the successor
to IPv4 was being developed it was named IPv6,

45
00:03:12,889 --> 00:03:18,420
and it uses a value of 6 in the Version field
of the header.

46
00:03:18,420 --> 00:03:20,560
Now let’s review hexadecimal.

47
00:03:20,560 --> 00:03:25,500
The three numbering systems you should know
for the CCNA are binary, also called base

48
00:03:25,500 --> 00:03:26,540
2.

49
00:03:26,540 --> 00:03:32,519
0b can be used as a prefix before a binary
number, so you know that the number is binary.

50
00:03:32,519 --> 00:03:34,090
For example, look at this number.

51
00:03:34,090 --> 00:03:36,269
A 1 and a 0.

52
00:03:36,269 --> 00:03:38,189
Is that decimal 10?

53
00:03:38,189 --> 00:03:41,920
Or binary 1 0, which is equal to decimal 2?

54
00:03:41,920 --> 00:03:46,819
Or is it perhaps hexadecimal 1 0, which is
equivalent to decimal 16?

55
00:03:46,819 --> 00:03:48,400
We can’t know.

56
00:03:48,400 --> 00:03:52,930
By using the prefix 0b, we can make it clear
that this is a binary number.

57
00:03:52,930 --> 00:03:56,279
Now, why is ‘base 2’ another name for
binary?

58
00:03:56,279 --> 00:03:59,920
It’s because there are only two available
digits in binary.

59
00:03:59,920 --> 00:04:01,810
0 and 1.

60
00:04:01,810 --> 00:04:05,379
All numbers are represented using just these
two digits.

61
00:04:05,379 --> 00:04:07,940
But you’re already familiar with binary.

62
00:04:07,940 --> 00:04:11,650
The next numbering system is decimal, or base
10.

63
00:04:11,650 --> 00:04:15,239
You can use the prefix 0d to indicate decimal.

64
00:04:15,239 --> 00:04:18,200
As the name ‘base 10’ suggests, there
are 10 available digits.

65
00:04:18,200 --> 00:04:22,710
0, 1, 2, 3, 4, 5, 6, 7, 8, and 9.

66
00:04:22,710 --> 00:04:27,650
Finally, there is hexadecimal, also known
as base 16.

67
00:04:27,650 --> 00:04:32,560
You can use the prefix 0x to indicate hexadecimal,
as I have mentioned a couple times already

68
00:04:32,560 --> 00:04:34,610
in the course.

69
00:04:34,610 --> 00:04:40,750
These are the 16 digits available in hexadecimal,
0 to 9 are the same as decimal, and then A,

70
00:04:40,750 --> 00:04:44,450
B, C, D, E, and F are used as well.

71
00:04:44,450 --> 00:04:50,210
Here’s a chart comparing the three, from
0 up to decimal 15.

72
00:04:50,210 --> 00:04:55,100
First, notice that up to 9, decimal and hexadecimal
are the same.

73
00:04:55,100 --> 00:05:00,790
However, the decimal system then runs out
of digits so it has to add a second column,

74
00:05:00,790 --> 00:05:04,910
and ten is written as 1 0.

75
00:05:04,910 --> 00:05:11,920
Hexadecimal expresses the same value with
a single digit, A. 11 is B, 12 is C, 13 is

76
00:05:11,920 --> 00:05:18,970
D, 14 is E, and 15 is F. Okay, now let me
point out a few other things.

77
00:05:18,970 --> 00:05:22,510
Notice that these binary numbers have leading
0s at the front.

78
00:05:22,510 --> 00:05:28,670
For example, decimal 3 is written as 0 0 1
1 instead of just 1 1.

79
00:05:28,670 --> 00:05:33,210
You don’t actually have to do this in binary,
you can just write it as 1 1.

80
00:05:33,210 --> 00:05:37,970
So, why did I write all of these numbers as
four digits, even though the leading 0s are

81
00:05:37,970 --> 00:05:39,200
unnecessary?

82
00:05:39,200 --> 00:05:46,640
It’s because I want to emphasize that each
hexadecimal digit contains 4 bits of information.

83
00:05:46,640 --> 00:05:53,020
For example, the maximum value of four binary
bits, 1 1 1 1, gives us the maximum hexadecimal

84
00:05:53,020 --> 00:05:54,570
digit, F.

85
00:05:54,570 --> 00:06:00,280
This is very important for converting between
binary and hexadecimal, and decimal and hexadecimal.

86
00:06:00,280 --> 00:06:05,150
From this chart, I recommend memorizing the
decimal to hexadecimal conversions.

87
00:06:05,150 --> 00:06:12,350
It’s not difficult, just remember that 10
is A, 11 is B, 12 is C, 13 is D, 14 is E,

88
00:06:12,350 --> 00:06:17,990
and 15 is F. Also, be able to convert between
binary and decimal.

89
00:06:17,990 --> 00:06:20,970
You already know that, it shouldn’t be a
problem.

90
00:06:20,970 --> 00:06:25,670
If it is a problem, go back and watch the
IPv4 addressing and subnetting videos for

91
00:06:25,670 --> 00:06:26,960
review.

92
00:06:26,960 --> 00:06:32,220
If you can do those two things, convert between
decimal and hexadecimal up to 15, and convert

93
00:06:32,220 --> 00:06:37,300
between decimal and binary, you’ll have
no problem converting either decimal or binary

94
00:06:37,300 --> 00:06:38,720
to hexadecimal.

95
00:06:38,720 --> 00:06:42,530
Let’s walk through some conversions.

96
00:06:42,530 --> 00:06:47,600
Binary 1101 1011 is equal to what in hexadecimal?

97
00:06:47,600 --> 00:06:50,600
So, this is 8 binary bits.

98
00:06:50,600 --> 00:06:54,460
Remember, each hexadecimal digit contains
4 bits of information.

99
00:06:54,460 --> 00:07:00,160
So, split the number into 4-bit groups, 1101
and 1011.

100
00:07:00,160 --> 00:07:04,090
Then, convert each of those 4-bit groups to
decimal.

101
00:07:04,090 --> 00:07:08,540
1101 is 8 plus 4 plus 1, so 13.

102
00:07:08,540 --> 00:07:13,310
1011 is 8 plus 2 plus 1, so 11.

103
00:07:13,310 --> 00:07:16,280
Then convert those decimal numbers to hexadecimal.

104
00:07:16,280 --> 00:07:18,100
You should have these conversions memorized.

105
00:07:18,100 --> 00:07:24,540
13 is D, and 11 is B. Simply put those two
hexadecimal digits together, and you have

106
00:07:24,540 --> 00:07:26,240
the answer.

107
00:07:26,240 --> 00:07:31,870
Binary 1101 1011 is equal to hexadecimal DB.

108
00:07:31,870 --> 00:07:34,470
To check, you can use a calculator.

109
00:07:34,470 --> 00:07:40,100
For example, from the Windows 10 calculator
app, click the top left menu button, then

110
00:07:40,100 --> 00:07:42,670
select the programmer calculator.

111
00:07:42,670 --> 00:07:48,001
In the programmer calculator, you can select
between hexadecimal, decimal, octal, which

112
00:07:48,001 --> 00:07:50,450
is base 8, and binary.

113
00:07:50,450 --> 00:07:54,700
I selected hexadecimal and typed in DB.

114
00:07:54,700 --> 00:08:00,020
As you can see, it is equal to binary 1101
1011.

115
00:08:00,020 --> 00:08:04,550
If you don’t use windows 10, your calculator
app probably has a similar option to the programmer

116
00:08:04,550 --> 00:08:05,550
mode.

117
00:08:05,550 --> 00:08:11,780
Or, you can just do a Google search for a
binary, decimal, and hexadecimal converter.

118
00:08:11,780 --> 00:08:15,840
In the real world, you’d use a calculator
to do any conversions between binary, decimal,

119
00:08:15,840 --> 00:08:16,840
and hexadecimal.

120
00:08:16,840 --> 00:08:21,050
However, it’s important to be able to do
the conversions yourself, to make sure you

121
00:08:21,050 --> 00:08:23,010
actually understand the concepts.

122
00:08:23,010 --> 00:08:28,500
Let’s do a few more practice questions for
binary to hexadecimal.

123
00:08:28,500 --> 00:08:36,282
Pause the video to try this one out yourself,
do the steps as written.

124
00:08:36,282 --> 00:08:38,060
Let’s check.

125
00:08:38,060 --> 00:08:41,130
First split the number into 4-bit groups.

126
00:08:41,130 --> 00:08:43,250
Convert each group to decimal.

127
00:08:43,250 --> 00:08:45,730
Convert each decimal number to hexadecimal.

128
00:08:45,730 --> 00:08:53,370
And there’s the answer, binary 0010 1111
is equal to hexadecimal 2F.

129
00:08:53,370 --> 00:08:57,490
We’ll do one more for binary to hex.

130
00:08:57,490 --> 00:09:00,399
Pause the video to try it out.

131
00:09:00,399 --> 00:09:04,509
Let’s check.

132
00:09:04,509 --> 00:09:07,339
First split the number into 4-bit groups.

133
00:09:07,339 --> 00:09:09,430
Convert each group to decimal.

134
00:09:09,430 --> 00:09:11,899
Convert each decimal number to hexadecimal.

135
00:09:11,899 --> 00:09:21,310
And there’s the answer, binary 1000 0001
is equal to hexadecimal 8 1.

136
00:09:21,310 --> 00:09:23,730
How about converting from hexadecimal to binary?

137
00:09:23,730 --> 00:09:27,519
Basically, it’s just the reverse process.

138
00:09:27,519 --> 00:09:30,399
Convert to decimal, then to binary.

139
00:09:30,399 --> 00:09:34,790
For example, what’s hexadecimal EC in binary?

140
00:09:34,790 --> 00:09:38,560
First, split up the hexadecimal digits.

141
00:09:38,560 --> 00:09:40,089
Then convert them to decimal.

142
00:09:40,089 --> 00:09:43,750
E is 14 and C is 12.

143
00:09:43,750 --> 00:09:46,819
Then convert each decimal number to binary.

144
00:09:46,819 --> 00:09:53,040
And that’s the answer, hexadecimal EC is
equal to binary 1110 1100.

145
00:09:53,040 --> 00:09:56,870
Okay, here’s another one.

146
00:09:56,870 --> 00:10:03,939
Pause the video to try it out yourself, convert
hexadecimal 2B to binary.

147
00:10:03,939 --> 00:10:05,230
Let’s check.

148
00:10:05,230 --> 00:10:08,619
First, split up the hexadecimal digits.

149
00:10:08,619 --> 00:10:10,700
Then convert them to decimal.

150
00:10:10,700 --> 00:10:13,829
2 is 2 and B is 11.

151
00:10:13,829 --> 00:10:16,260
Then convert each decimal number to binary.

152
00:10:16,260 --> 00:10:25,692
And that’s the answer, hexadecimal 2B is
equal to binary 0010 1011.

153
00:10:25,692 --> 00:10:27,149
Okay, last one.

154
00:10:27,149 --> 00:10:34,915
Pause the video to try it out yourself, convert
hexadecimal D7 to binary.

155
00:10:34,915 --> 00:10:36,170
Let’s check.

156
00:10:36,170 --> 00:10:40,000
First, split up the hexadecimal digits.

157
00:10:40,000 --> 00:10:42,088
Then convert them to decimal.

158
00:10:42,088 --> 00:10:45,430
D is 13 and 7 is 7.

159
00:10:45,430 --> 00:10:48,110
Then convert each decimal number to binary.

160
00:10:48,110 --> 00:10:56,578
And that’s the answer, hexadecimal D7 is
equal to binary 1101 0111.

161
00:10:56,578 --> 00:11:01,170
Okay, that’s all for the conversion practice,
it’s not the main focus of this video.

162
00:11:01,170 --> 00:11:05,569
If you don’t feel comfortable converting
between them yet, do some more practice.

163
00:11:05,569 --> 00:11:09,970
Write out a random 8-bit, 1-byte, number and
convert it to hexadecimal.

164
00:11:09,970 --> 00:11:12,959
Do the opposite too.

165
00:11:12,959 --> 00:11:16,399
Also try it with numbers that aren’t 8 bits,
see if you can figure it out.

166
00:11:16,399 --> 00:11:20,970
Now, let’s move on to the next topic.

167
00:11:20,970 --> 00:11:25,129
And the next topic is this, ‘Why IPv6’?

168
00:11:25,129 --> 00:11:29,999
The main reason is that there simply aren’t
enough IPv4 addresses are available.

169
00:11:29,999 --> 00:11:32,449
How many IPv4 addresses are there?

170
00:11:32,449 --> 00:11:40,740
An IPv4 address is 32 bits long, so that means
there are 4 billion 294 million 967 thousand

171
00:11:40,740 --> 00:11:44,540
296 IPv4 addresses available.

172
00:11:44,540 --> 00:11:49,279
That may seem like a lot, but in our modern
world where the Internet is everywhere, it’s

173
00:11:49,279 --> 00:11:51,420
simply not enough.

174
00:11:51,420 --> 00:11:56,100
When IPv4 was being designed 30 years ago,
the creators had no idea the Internet would

175
00:11:56,100 --> 00:12:01,540
be as large as it is today, they thought 32
bits would provide more than enough addresses.

176
00:12:01,540 --> 00:12:07,370
However, we have known about the IPv4 address
exhaustion problem for a long time, and several

177
00:12:07,370 --> 00:12:10,939
techniques have been used to preserve the
space.

178
00:12:10,939 --> 00:12:16,611
VLSM, variable-length subnet masks is one
of the techniques that allows IPv4 address

179
00:12:16,611 --> 00:12:19,459
space to be preserved.

180
00:12:19,459 --> 00:12:24,389
Private IPv4 addresses and NAT, Network Address
Translation, are two others that have made

181
00:12:24,389 --> 00:12:26,910
a huge difference as well.

182
00:12:26,910 --> 00:12:30,370
Both of those will be covered soon in the
course.

183
00:12:30,370 --> 00:12:34,790
Those techniques have been very useful in
preserving the IPv4 address space, however

184
00:12:34,790 --> 00:12:37,600
they are just short-term solutions.

185
00:12:37,600 --> 00:12:43,509
The long-term solution is to transition to
IPv6.

186
00:12:43,509 --> 00:12:47,470
Let me briefly explain how IPv4 addresses
are assigned.

187
00:12:47,470 --> 00:12:53,060
IPv4 address assignments are controlled by
IANA, the Internet Assigned Numbers Authority.

188
00:12:53,060 --> 00:12:58,199
I mentioned IANA in the last video about TCP
and UDP, also.

189
00:12:58,199 --> 00:13:04,601
IANA distributes IPv4 address space to various
RIRs, Regional Internet Registries, which

190
00:13:04,601 --> 00:13:07,740
then assign them to companies that need them.

191
00:13:07,740 --> 00:13:12,999
For example, an Internet service provider
would ask its local RIR to assign it IP addresses

192
00:13:12,999 --> 00:13:16,360
which can then be used by its customers.

193
00:13:16,360 --> 00:13:19,139
This is a map showing the various RIRs.

194
00:13:19,139 --> 00:13:24,509
To be honest, I don’t know the proper pronunciation
of each of the names, but AFRINIC controls

195
00:13:24,509 --> 00:13:31,670
Africa, APNIC controls Asia-Pacific, ARIN
controls Canada, many Caribbean and North

196
00:13:31,670 --> 00:13:38,220
Atlantic islands, and the US, LACNIC controls
Latin America and the Caribbean, and RIPE

197
00:13:38,220 --> 00:13:42,000
NCC controls Europe, the Middle East, and
parts of Central Asia.

198
00:13:42,000 --> 00:13:45,430
However, these RIRs are almost all out of
IPv4 addresses.

199
00:13:45,430 --> 00:13:52,689
For example, in September 2015 ARIN declared
exhaustion of the ARIN IPv4 address pool.

200
00:13:52,689 --> 00:13:57,420
They don’t have any more addresses to assign,
unless a company goes out of business and

201
00:13:57,420 --> 00:14:00,490
ARIN can reclaim their addresses, for example.

202
00:14:00,490 --> 00:14:07,779
Here’s another one, in August 2020, LACNIC
announced that it had made its final IPv4

203
00:14:07,779 --> 00:14:08,829
allocation.

204
00:14:08,829 --> 00:14:11,699
The other RIRs have similar problems, too.

205
00:14:11,699 --> 00:14:16,949
So, as you can see the situation is pretty
serious, there just aren’t enough IPv4 addresses

206
00:14:16,949 --> 00:14:18,930
for our modern world.

207
00:14:18,930 --> 00:14:23,080
We need something capable of supporting our
inter-connected world now and far into the

208
00:14:23,080 --> 00:14:24,170
future.

209
00:14:24,170 --> 00:14:26,319
That is IPv6.

210
00:14:26,319 --> 00:14:30,300
Let’s finally get into the specifics.

211
00:14:30,300 --> 00:14:35,709
There is actually a lot of interesting history
about IPv4 address exhaustion and IPv6, but

212
00:14:35,709 --> 00:14:37,509
that’s enough for this video.

213
00:14:37,509 --> 00:14:41,519
I think you can see why we need to transition
to IPv6.

214
00:14:41,519 --> 00:14:46,540
If you want to read a little about it, search
for ‘IPv4 address exhaustion’ on Wikipedia.

215
00:14:46,540 --> 00:14:49,519
So, let’s talk about IPv6.

216
00:14:49,519 --> 00:14:53,319
An IPv6 address is 128 bits.

217
00:14:53,319 --> 00:14:59,660
That’s 4 times the number of bits in an
IPv4 address, which is 32 bits.

218
00:14:59,660 --> 00:15:03,959
At first, you might think that 4 times the
number of bits means that there are 4 times

219
00:15:03,959 --> 00:15:05,230
the number of addresses.

220
00:15:05,230 --> 00:15:06,790
That’s wrong.

221
00:15:06,790 --> 00:15:11,279
Every additional bit DOUBLES the number of
possible addresses.

222
00:15:11,279 --> 00:15:15,089
32 bits allows for about 4 billion addresses.

223
00:15:15,089 --> 00:15:21,829
33 bits would allow about 8 billion, 34 bits
would allow about 16 billion, etc.

224
00:15:21,829 --> 00:15:26,139
So, how many IPv6 addresses are there?

225
00:15:26,139 --> 00:15:35,241
There are 340 undecillion, 282 decillion,
366 noncillion, 920 octillion, 938 septillion,

226
00:15:35,241 --> 00:15:45,276
463 sextillion, 463 quintillion, 374 quadrillion,
607 trillion, 431 billion, 768 million, 211

227
00:15:45,276 --> 00:15:50,557
thousand and 456 IPv6 addresses.

228
00:15:50,557 --> 00:15:54,319
Yes, I had to search on Google to learn how
to say that number.

229
00:15:54,319 --> 00:15:57,230
But no, you don’t have to memorize it.

230
00:15:57,230 --> 00:16:01,310
For comparison, here’s the number of IPv4
addresses again.

231
00:16:01,310 --> 00:16:05,499
Here’s an example IPv6 address in binary.

232
00:16:05,499 --> 00:16:08,379
That’s a lot of 1s and 0s.

233
00:16:08,379 --> 00:16:12,860
If you write that in dotted decimal like an
IPv4 address, it looks like this.

234
00:16:12,860 --> 00:16:18,240
However, as I’ve already said Ipv6 addresses
aren’t written in dotted decimal, they are

235
00:16:18,240 --> 00:16:19,769
written in hexadecimal.

236
00:16:19,769 --> 00:16:22,920
Here’s that same address written in hexadecimal.

237
00:16:22,920 --> 00:16:30,290
An IPv6 address is 128 bits, and as I said
each hexadecimal digit contains 4 bits of

238
00:16:30,290 --> 00:16:31,459
information.

239
00:16:31,459 --> 00:16:34,439
128 bits divided by 4 is 32.

240
00:16:34,439 --> 00:16:42,089
So, an IPv6 address is written as 32 hexadecimal
characters, divided into 8 groups of 4 using

241
00:16:42,089 --> 00:16:43,899
colons.

242
00:16:43,899 --> 00:16:48,759
This is still longer and more difficult to
read and remember than an IPv4 address, but

243
00:16:48,759 --> 00:16:50,360
that’s unavoidable.

244
00:16:50,360 --> 00:16:56,170
There is 4 times the amount of information
in this address, compared to an IPv4 address.

245
00:16:56,170 --> 00:16:58,139
But there’s some good news.

246
00:16:58,139 --> 00:17:03,500
IPv6 addresses use the ‘slash’ notation
to indicate the prefix length, even when configuring

247
00:17:03,500 --> 00:17:06,600
the address in the Cisco IOS CLI.

248
00:17:06,600 --> 00:17:09,579
No more dotted decimal subnet masks.

249
00:17:09,579 --> 00:17:15,029
This /64, for example, means the first half
of the address would be the network portion,

250
00:17:15,029 --> 00:17:17,750
and the second half would be the host portion.

251
00:17:17,750 --> 00:17:23,579
In addition, there are a couple methods to
shorten IPv6 addresses to make them simpler.

252
00:17:23,579 --> 00:17:29,010
Let’s look at those methods to shorten IPv6
addresses.

253
00:17:29,010 --> 00:17:32,220
First up, leading 0s can be removed.

254
00:17:32,220 --> 00:17:34,620
Look at this IPv6 address.

255
00:17:34,620 --> 00:17:41,500
‘Leading 0s’ are any 0s at the beginning
of any of the quartets of 4 hexadecimal digits.

256
00:17:41,500 --> 00:17:43,539
These are the leading 0s in this address.

257
00:17:43,539 --> 00:17:46,500
So, we can simply remove them.

258
00:17:46,500 --> 00:17:48,370
Now the address can be written like this.

259
00:17:48,370 --> 00:17:52,860
The 0s are still part of the address, but
there’s no need to write them, and it looks

260
00:17:52,860 --> 00:17:54,120
simpler like this.

261
00:17:54,120 --> 00:17:59,669
Okay, there’s one more technique to shorten
an IPv6 address.

262
00:17:59,669 --> 00:18:04,059
Consecutive quartets of all 0s can be replaced
with a double colon.

263
00:18:04,059 --> 00:18:09,360
For example in the address below, there are
four consecutive quartets of all 0s.

264
00:18:09,360 --> 00:18:14,000
You can shorten the address like this, replacing
those quartets with a double colon.

265
00:18:14,000 --> 00:18:15,580
Why are you able to do this?

266
00:18:15,580 --> 00:18:20,250
It’s because we know an IPv6 address is
8 quartets in length.

267
00:18:20,250 --> 00:18:24,960
We can only see four quartets now, so we know
the double colon means that there are four

268
00:18:24,960 --> 00:18:26,169
quartets of all 0s.

269
00:18:26,169 --> 00:18:28,890
But let’s not stop there.

270
00:18:28,890 --> 00:18:34,549
You can combine both methods, removing leading
0s and using the double colon.

271
00:18:34,549 --> 00:18:37,090
Now this address looks much easier to handle.

272
00:18:37,090 --> 00:18:40,429
But, there’s a limitation here.

273
00:18:40,429 --> 00:18:45,760
Consecutive quartets of 0s can only be abbreviated
once in an IPv6 address.

274
00:18:45,760 --> 00:18:46,760
Why is that?

275
00:18:46,760 --> 00:18:49,140
Well, look at this address here.

276
00:18:49,140 --> 00:18:51,500
You might try to shorten it like this.

277
00:18:51,500 --> 00:18:53,159
But now we have a problem.

278
00:18:53,159 --> 00:18:58,010
We know there should be 8 quartets in total,
so there are five quartets of all 0s.

279
00:18:58,010 --> 00:19:00,340
But how many quartets of 0s are here?

280
00:19:00,340 --> 00:19:01,340
2?

281
00:19:01,340 --> 00:19:02,340
3?

282
00:19:02,340 --> 00:19:03,340
We can’t know.

283
00:19:03,340 --> 00:19:04,730
How about here?

284
00:19:04,730 --> 00:19:09,169
Maybe there are 2 quartets on the left and
3 on the right, or maybe 3 on the left and

285
00:19:09,169 --> 00:19:10,429
2 on the right.

286
00:19:10,429 --> 00:19:16,309
So, this is why we can only abbreviate the
all-0 quartets once in an address.

287
00:19:16,309 --> 00:19:19,830
Instead, we should shorten the address like
this.

288
00:19:19,830 --> 00:19:25,390
The left side has three all-0 quartets, so
I replaced them with a double colon.

289
00:19:25,390 --> 00:19:31,460
On the right side, which has two all-0 quartets,
I simply removed the leading 0s.

290
00:19:31,460 --> 00:19:36,850
Here’s a few questions to practice shortening
IPv6 addresses.

291
00:19:36,850 --> 00:19:39,990
Pause the video and try to complete each.

292
00:19:39,990 --> 00:19:42,860
Okay, here are the answers.

293
00:19:42,860 --> 00:19:48,269
Here’s the first one, you’re able to remove
leading 0s and use the double colon.

294
00:19:48,269 --> 00:19:49,750
Next one.

295
00:19:49,750 --> 00:19:53,929
Note that there are two sets of consecutive
0s, but you can only use the double colon

296
00:19:53,929 --> 00:19:55,480
to replace one set.

297
00:19:55,480 --> 00:19:57,420
Okay, next one.

298
00:19:57,420 --> 00:20:02,730
Like the previous two, you’re able to remove
leading 0s and use the double colon.

299
00:20:02,730 --> 00:20:03,840
Next one.

300
00:20:03,840 --> 00:20:07,539
There are some leading 0s you can remove in
this one, but not consecutive quartets of

301
00:20:07,539 --> 00:20:08,559
all 0s.

302
00:20:08,559 --> 00:20:10,340
Okay, last one.

303
00:20:10,340 --> 00:20:15,799
You’re able to replace five quartets of
0s with the double colon.

304
00:20:15,799 --> 00:20:21,250
You should also be able to take a shortened
IPv6 address and expand it into a full IPv6

305
00:20:21,250 --> 00:20:22,250
address.

306
00:20:22,250 --> 00:20:24,440
Here’s an example of how to do that.

307
00:20:24,440 --> 00:20:29,940
First, put leading 0s where needed, remember
that all quartets should have 4 hexadecimal

308
00:20:29,940 --> 00:20:34,000
characters, that’s why they’re called
quartets.

309
00:20:34,000 --> 00:20:37,740
Where can we put leading 0s in this example
shortened address?

310
00:20:37,740 --> 00:20:39,460
These three quartets here.

311
00:20:39,460 --> 00:20:41,559
So, now the address looks like this.

312
00:20:41,559 --> 00:20:43,900
But we’re not finished.

313
00:20:43,900 --> 00:20:48,390
If a double colon is used, we should replace
it with all-0 quartets, and make sure there

314
00:20:48,390 --> 00:20:50,770
are 8 quartets in total.

315
00:20:50,770 --> 00:20:54,890
There is a double colon here, so we can expand
the address further.

316
00:20:54,890 --> 00:20:56,720
How many quartets are there?

317
00:20:56,720 --> 00:20:58,429
There are 5.

318
00:20:58,429 --> 00:21:01,860
Actually there are 8, but currently only 5
are written.

319
00:21:01,860 --> 00:21:07,500
To make 8 total quartets, simply add three
quartets of 0s.

320
00:21:07,500 --> 00:21:12,019
Here are a few practice questions for expanding
shortened IPv6 addresses.

321
00:21:12,019 --> 00:21:15,059
Pause the video to solve them.

322
00:21:15,059 --> 00:21:19,080
Okay, here are the answers.

323
00:21:19,080 --> 00:21:20,360
First one.

324
00:21:20,360 --> 00:21:21,360
Second one.

325
00:21:21,360 --> 00:21:22,360
Third one.

326
00:21:22,360 --> 00:21:23,360
Fourth one.

327
00:21:23,360 --> 00:21:25,020
And the fifth one.

328
00:21:25,020 --> 00:21:30,549
I will talk about different IPv6 address types
in another video, but each of these addresses

329
00:21:30,549 --> 00:21:32,830
is a different type of address.

330
00:21:32,830 --> 00:21:38,600
IPv4 has different kinds of addresses like
multicast addresses, loopback addresses, etc,

331
00:21:38,600 --> 00:21:40,850
and so does IPv6.

332
00:21:40,850 --> 00:21:44,950
But as I said, that’s a topic for another
video.

333
00:21:44,950 --> 00:21:49,890
Next up, let’s see how to find the IPv6
prefix, the network address, from a particular

334
00:21:49,890 --> 00:21:51,230
host address.

335
00:21:51,230 --> 00:21:54,760
We’ve already done this before for IPv4.

336
00:21:54,760 --> 00:21:58,710
Change all of the host bits to 0, and then
you have the prefix, the network address.

337
00:21:58,710 --> 00:22:01,760
But let’s try it out for IPv6.

338
00:22:01,760 --> 00:22:09,400
Typically, an enterprise requesting IPv6 addresses
from their ISP will receive a /48 block.

339
00:22:09,400 --> 00:22:14,580
Also, typically IPv6 subnets use a /64 prefix
length.

340
00:22:14,580 --> 00:22:22,159
So, the enterprise received a /48 block, but
the usual prefix length is /64.

341
00:22:22,159 --> 00:22:26,990
This means that an enterprise has 16 bits
to use to make subnets.

342
00:22:26,990 --> 00:22:30,389
And the remaining 64 bits can be used for
hosts.

343
00:22:30,389 --> 00:22:32,409
I think an example will make this clearer.

344
00:22:32,409 --> 00:22:35,210
here’s an IPv6 address.

345
00:22:35,210 --> 00:22:41,100
This part in blue is the /48 block assigned
by the ISP, it’s called the ‘global routing

346
00:22:41,100 --> 00:22:42,780
prefix’.

347
00:22:42,780 --> 00:22:47,789
Note that this example is for the IPv6 ‘global
unicast’ address type.

348
00:22:47,789 --> 00:22:52,029
As I said before, there are multiple IPv6
address types which I will cover in another

349
00:22:52,029 --> 00:22:53,029
video.

350
00:22:53,029 --> 00:22:57,160
But these ‘global unicast’ addresses are
the regular IPv6 addresses that hosts can

351
00:22:57,160 --> 00:23:02,809
use over the Internet, they aren’t private
addresses, or multicast addresses, etc.

352
00:23:02,809 --> 00:23:09,470
Okay, the next 16 bits, 4 hex digits, are
called the ‘subnet identifier’.

353
00:23:09,470 --> 00:23:15,200
Because the enterprise received a /48 block
from the ISP, but IPv6 addresses usually use

354
00:23:15,200 --> 00:23:21,090
a /64 prefix length, these 16 bits are free
to use to make different subnets.

355
00:23:21,090 --> 00:23:26,490
Together, these two parts make the ‘network
portion’ of the address, the IPv6 network

356
00:23:26,490 --> 00:23:27,490
prefix.

357
00:23:27,490 --> 00:23:31,360
Then the last 64 bits are the host bits.

358
00:23:31,360 --> 00:23:35,480
That is a huge amount of hosts per subnet,
you’ll never need that many.

359
00:23:35,480 --> 00:23:39,260
But the convention is to use a /64 prefix
length.

360
00:23:39,260 --> 00:23:43,710
However, that doesn’t mean you’ll only
ever see /64 prefix lengths.

361
00:23:43,710 --> 00:23:49,840
So, we’ll practice using IPv6 addresses
with various prefix lengths.

362
00:23:49,840 --> 00:23:55,100
Finding the prefix of an IPv6 address with
a /64 prefix length is easy.

363
00:23:55,100 --> 00:23:57,519
Simply make the second half of the address
all 0s.

364
00:23:57,519 --> 00:24:02,980
That’s what I did here, and notice I shortened
the address by removing a leading 0 and replaced

365
00:24:02,980 --> 00:24:08,159
the host portion, which is all 0s, with a
double colon.

366
00:24:08,159 --> 00:24:13,309
Even if the prefix length isn’t /64, if
the prefix length is a multiple of 4 it’s

367
00:24:13,309 --> 00:24:15,529
easy to find the prefix length.

368
00:24:15,529 --> 00:24:16,529
Why is that?

369
00:24:16,529 --> 00:24:20,610
It’s because each hexadecimal character
is 4 bits.

370
00:24:20,610 --> 00:24:27,470
56 is a multiple of 4, so let me show you
how to find the prefix of this IPv6 address.

371
00:24:27,470 --> 00:24:31,250
This first quartet is the first 16 bits of
the address.

372
00:24:31,250 --> 00:24:33,580
This one brings it to 32 bits.

373
00:24:33,580 --> 00:24:35,259
48 bits.

374
00:24:35,259 --> 00:24:38,720
This 2 contains the next 4 bits, so 52.

375
00:24:38,720 --> 00:24:42,260
And this 1 contains another 4 bits, so 56
bits.

376
00:24:42,260 --> 00:24:48,059
So, these first 14 characters are the network
portion of the address, the prefix.

377
00:24:48,059 --> 00:24:54,210
Everything after is the host portion, so we
can change them all to 0 to find the prefix.

378
00:24:54,210 --> 00:24:58,970
Here it is, after removing leading 0s and
using the double colon.

379
00:24:58,970 --> 00:25:02,000
Let me point out that you can’t remove these
0s.

380
00:25:02,000 --> 00:25:05,981
Even though they are part of the host portion
of the address, they are not leading 0s so

381
00:25:05,981 --> 00:25:07,940
you can’t remove them.

382
00:25:07,940 --> 00:25:13,010
For example, if you were to shorten the address
like this, removing those two 0s, if you add

383
00:25:13,010 --> 00:25:18,049
the leading 0s back the prefix would be this,
which is a totally different network address

384
00:25:18,049 --> 00:25:19,639
than the original one.

385
00:25:19,639 --> 00:25:24,140
So, remember that point, you can only remove
the ‘leading’ 0s.

386
00:25:24,140 --> 00:25:27,590
So, that’s all quite simple.

387
00:25:27,590 --> 00:25:31,549
Find where the network portion ends, and change
all digits after it to 0.

388
00:25:31,549 --> 00:25:36,779
But with an IPv6 address like this you need
to go through a couple more steps.

389
00:25:36,779 --> 00:25:41,059
The prefix length is /93, which isn’t a
multiple of 4.

390
00:25:41,059 --> 00:25:46,530
So, that means that the network portions ends
in the middle of one of the hexadecimal digits.

391
00:25:46,530 --> 00:25:48,080
Let’s find which one.

392
00:25:48,080 --> 00:25:59,220
16 bits, 32 bits, 48 bits, 64 bits, 80 bits,
84, 88, and this ‘7’ brings us up to 92

393
00:25:59,220 --> 00:26:00,220
bits.

394
00:26:00,220 --> 00:26:05,559
So, the network portion includes all of these
characters, plus the first bit of this B.

395
00:26:05,559 --> 00:26:12,549
So, in order to properly write out the network
prefix, we need to look into the binary.

396
00:26:12,549 --> 00:26:17,330
As you know, hexadecimal B is equal to decimal
11.

397
00:26:17,330 --> 00:26:21,480
Decimal 11 is written as 1011 in binary.

398
00:26:21,480 --> 00:26:25,591
Only this first bit is part of the network
portion of the address, so let’s change

399
00:26:25,591 --> 00:26:27,789
all of the other bits to 0.

400
00:26:27,789 --> 00:26:31,180
Now we have binary 1000.

401
00:26:31,180 --> 00:26:33,380
Change that back to decimal, which is 8.

402
00:26:33,380 --> 00:26:35,529
It’s also written as 8 in hexadecimal.

403
00:26:35,529 --> 00:26:41,470
So, when we write out the network prefix,
we have to change the ‘B’ to an ‘8’,

404
00:26:41,470 --> 00:26:43,669
because we changed the host bits all to 0.

405
00:26:43,669 --> 00:26:46,740
So, here’s the network prefix.

406
00:26:46,740 --> 00:26:49,470
Notice the ‘8’ instead of the ‘B’.

407
00:26:49,470 --> 00:26:53,190
I hope you can see the importance of really
understanding binary.

408
00:26:53,190 --> 00:26:57,050
If you don’t know binary, it would be tough
for you to know that the B becomes an 8 when

409
00:26:57,050 --> 00:26:59,970
all of the host bits are changed to 0.

410
00:26:59,970 --> 00:27:01,899
The same goes for IPv4.

411
00:27:01,899 --> 00:27:07,720
If you don’t know binary, you can’t really
understand IPv4 addressing and subnetting.

412
00:27:07,720 --> 00:27:12,970
Here are some practice questions, find the
prefix of each of these IPv6 addresses.

413
00:27:12,970 --> 00:27:16,570
Pause the video now to do that.

414
00:27:16,570 --> 00:27:20,429
Okay, here are the answers.

415
00:27:20,429 --> 00:27:21,429
First one.

416
00:27:21,429 --> 00:27:22,429
Second one.

417
00:27:22,429 --> 00:27:23,429
Third one.

418
00:27:23,429 --> 00:27:24,429
Fourth one.

419
00:27:24,429 --> 00:27:25,799
And fifth one.

420
00:27:25,799 --> 00:27:28,980
Note that you don’t have to write out the
shortened version, you can write out the whole

421
00:27:28,980 --> 00:27:31,259
address if you prefer.

422
00:27:31,259 --> 00:27:35,639
If you still want some more practice, try
writing out some random IPv6 addresses with

423
00:27:35,639 --> 00:27:40,990
random prefix lengths yourself, and then try
to find the prefix of each address.

424
00:27:40,990 --> 00:27:48,630
So, we’ve only covered the absolute basics
of IPv6, specifically IPv6 addresses.

425
00:27:48,630 --> 00:27:52,790
But I want to include a lab with each lecture
video as often as possible, so let’s cover

426
00:27:52,790 --> 00:27:55,520
some very basic IPv6 configuration.

427
00:27:55,520 --> 00:28:00,679
I’ll just show you how to configure IPv6
addresses on router interfaces, and then in

428
00:28:00,679 --> 00:28:03,299
the next video you can try it out in Packet
Tracer.

429
00:28:03,299 --> 00:28:09,970
So, R1 has three interfaces, each connected
to a different subnet.

430
00:28:09,970 --> 00:28:22,139
2001:db8:0:0::/64 on the G0/0 interface, 0:1::/64
on G0/1, and 0:2::/64 on G0/2.

431
00:28:22,139 --> 00:28:26,659
In this example, the company was assigned
a /48 address block, and is using the last

432
00:28:26,659 --> 00:28:30,809
quartet of the prefix to make different subnets.

433
00:28:30,809 --> 00:28:36,549
Just a side point, you may be wondering why
I’ve been using the 2001:db8 range a lot.

434
00:28:36,549 --> 00:28:43,450
That’s because this range of IPv6 addresses
has been reserved for examples and documentation.

435
00:28:43,450 --> 00:28:46,960
They should never actually be used in real
networks, but you’re free to use them in

436
00:28:46,960 --> 00:28:48,580
examples like this.

437
00:28:48,580 --> 00:28:52,210
So, here’s the configuration.

438
00:28:52,210 --> 00:28:56,169
First up, you have to use the command IPV6
UNICAST-ROUTING.

439
00:28:56,169 --> 00:28:59,759
This command allows the routers to perform
IPv6 routing.

440
00:28:59,759 --> 00:29:05,090
If you don’t enable this, it’s not going
to actually forward IPv6 packets.

441
00:29:05,090 --> 00:29:08,470
Next up, I configured the G0/0 interface.

442
00:29:08,470 --> 00:29:14,899
The command to configure an IPv6 address is
IPV6 ADDRESS, follow by the address and prefix

443
00:29:14,899 --> 00:29:15,980
length.

444
00:29:15,980 --> 00:29:21,750
You’ll notice that a lot of IPv6 commands
are the same as in IPv4, except instead of

445
00:29:21,750 --> 00:29:25,700
‘IP’ the command uses ‘IPV6’.

446
00:29:25,700 --> 00:29:29,570
Also notice that you can use the shortened
version of the IPv6 address, the router will

447
00:29:29,570 --> 00:29:31,600
understand.

448
00:29:31,600 --> 00:29:35,340
Remember to use NO SHUTDOWN to enable the
interface, too.

449
00:29:35,340 --> 00:29:42,380
I did the same thing on G0/1, and then G0/2,
except this time I typed out the entire address.

450
00:29:42,380 --> 00:29:46,990
You can use the whole address, the shortened
address, or even a partially shortened address,

451
00:29:46,990 --> 00:29:51,220
the router will understand what you mean.

452
00:29:51,220 --> 00:29:52,649
Now let’s confirm the configurations.

453
00:29:52,649 --> 00:29:56,920
I used the command SHOW IPV6 INTERFACE BRIEF.

454
00:29:56,920 --> 00:30:02,990
Again, same as the IPv4 command, you just
have to use ‘IPv6’.

455
00:30:02,990 --> 00:30:05,970
There are a few things to point out here.

456
00:30:05,970 --> 00:30:10,700
First up, notice that the shortened version
of the address is displayed, not all 32 hex

457
00:30:10,700 --> 00:30:11,779
digits.

458
00:30:11,779 --> 00:30:16,929
Actually, the address on the G0/0 interface
is shortened even more than the shortened

459
00:30:16,929 --> 00:30:19,100
address I typed.

460
00:30:19,100 --> 00:30:23,710
To emphasize that the first four quartets
are the network portion, I typed out these

461
00:30:23,710 --> 00:30:28,429
two 0s here in the network diagram and when
I entered the command.

462
00:30:28,429 --> 00:30:32,000
But they can be included in the double colon
also, if you want to shorten the address as

463
00:30:32,000 --> 00:30:33,500
much as possible.

464
00:30:33,500 --> 00:30:39,340
Okay, next thing to point out, something you
probably already noticed, each of these interfaces

465
00:30:39,340 --> 00:30:44,770
has two IPv6 addresses, even though we only
configured one.

466
00:30:44,770 --> 00:30:48,740
These are called ‘link-local’ addresses,
and they are automatically configured on an

467
00:30:48,740 --> 00:30:55,140
interface when you configure an IPv6 address,
when IPv6 is enabled on the interface.

468
00:30:55,140 --> 00:31:00,630
I will cover these in Day 32 when I cover
the various IPv6 address types, but if you

469
00:31:00,630 --> 00:31:04,990
want to read about them before that Wikipedia
has a good article about them.

470
00:31:04,990 --> 00:31:10,580
IPv4 has link-local addresses as well, although
they aren’t automatically enabled on IPv4

471
00:31:10,580 --> 00:31:11,580
interfaces.

472
00:31:11,580 --> 00:31:16,870
Anyway, as I said I’ll cover those in Day
32.

473
00:31:16,870 --> 00:31:21,389
Before moving on to the quiz let’s review
what we covered in today’s video.

474
00:31:21,389 --> 00:31:26,169
First up we reviewed hexadecimal and practiced
converting between it and binary.

475
00:31:26,169 --> 00:31:30,909
Although we briefly covered hexadecimal when
learning about MAC addresses, for IPv6 it’s

476
00:31:30,909 --> 00:31:34,169
even more important to be comfortable with
it.

477
00:31:34,169 --> 00:31:37,299
Then I introduced why IPv6 is necessary.

478
00:31:37,299 --> 00:31:41,590
Basically, there aren’t enough IPv4 addresses
for our modern world.

479
00:31:41,590 --> 00:31:48,110
I covered the basics of IPv6, and the main
focus of today’s video was on IPv6 addresses,

480
00:31:48,110 --> 00:31:53,659
which are 128-bits in length and usually written
using hexadecimal.

481
00:31:53,659 --> 00:31:57,789
Finally I showed you the basic commands to
enable IPv6 on a router and then configure

482
00:31:57,789 --> 00:32:00,820
IPv6 addresses on an interface.

483
00:32:00,820 --> 00:32:05,029
There is still a lot more that we have to
cover about IPv6, but I hope this video was

484
00:32:05,029 --> 00:32:07,049
a good start.

485
00:32:07,049 --> 00:32:11,080
Make to sure watch until the end of the quiz
for a bonus question from Boson ExSim, the

486
00:32:11,080 --> 00:32:13,389
best practice exams for the CCNA.

487
00:32:13,389 --> 00:32:18,850
They’re the practice exams I used to prepare
for the CCNA and CCNP exams, and they really

488
00:32:18,850 --> 00:32:20,650
are the best.

489
00:32:20,650 --> 00:32:23,750
If you want to get ExSim, follow the link
in the video description.

490
00:32:23,750 --> 00:32:29,639
Okay, let’s move on to question 1 of the
quiz.

491
00:32:29,639 --> 00:32:32,649
Which of the following are valid IPv6 addresses?

492
00:32:32,649 --> 00:32:34,150
Select three.

493
00:32:34,150 --> 00:32:35,860
Here are the options.

494
00:32:35,860 --> 00:32:41,980
Pause the video now to find the answers, only
three of them are valid IPv6 addresses.

495
00:32:41,980 --> 00:32:46,289
Okay, let’s check the answers.

496
00:32:46,289 --> 00:32:52,649
The valid IPv6 addresses are A, B, and E.
Why is C invalid?

497
00:32:52,649 --> 00:32:55,029
It has a G in the fourth quartet.

498
00:32:55,029 --> 00:33:02,759
IPv6 addresses use hexadecimal, which only
includes 0 to 9 and A, B, C, D, E, and F.

499
00:33:02,759 --> 00:33:04,570
Why is D invalid?

500
00:33:04,570 --> 00:33:06,100
It has nine quartets.

501
00:33:06,100 --> 00:33:11,700
An IPv6 address should have only 8 quartets
of four hexadecimal digits each, separated

502
00:33:11,700 --> 00:33:13,529
by colons.

503
00:33:13,529 --> 00:33:14,529
And how about F?

504
00:33:14,529 --> 00:33:16,770
It’s using the double colon twice.

505
00:33:16,770 --> 00:33:21,120
Remember, you can only use the double colon
to shorten an IPv6 address once.

506
00:33:21,120 --> 00:33:24,649
Okay, let’s go to question 2.

507
00:33:24,649 --> 00:33:30,340
Which of the following is a correctly-abbreviated
version of the IPv6 address below?

508
00:33:30,340 --> 00:33:32,169
Here are the four options.

509
00:33:32,169 --> 00:33:38,080
Pause the video now to select the correct
one.

510
00:33:38,080 --> 00:33:44,350
The correct answer is D. All of these abbreviations
involve removing 0s, but remember that you

511
00:33:44,350 --> 00:33:49,639
can only remove ‘leading’ 0s from an IPv6
address to shorten it, the 0s at the beginning

512
00:33:49,639 --> 00:33:50,950
of the quartet.

513
00:33:50,950 --> 00:33:54,570
So, only D is a correct abbreviation of the
address.

514
00:33:54,570 --> 00:33:57,639
Let’s go to question 3.

515
00:33:57,639 --> 00:34:02,570
Which of the following commands must be used
to enable a router to perform IPv6 routing?

516
00:34:02,570 --> 00:34:06,789
A, IPV6 UNICAST-ROUTING from interface config
mode.

517
00:34:06,789 --> 00:34:10,579
B, IPV6 UNICAST-ROUTING from global config
mode.

518
00:34:10,579 --> 00:34:14,390
C, IPV6 ROUTING from global config mode.

519
00:34:14,390 --> 00:34:18,210
Or D, IPV6 ROUTING from interface config mode.

520
00:34:18,210 --> 00:34:25,060
Pause the video to think about your answer.

521
00:34:25,060 --> 00:34:30,889
The answer is B. IPV6 UNICAST-ROUTING, entered
in global config mode, must be used to enable

522
00:34:30,889 --> 00:34:33,260
the router to perform IPv6 routing.

523
00:34:33,260 --> 00:34:38,409
Okay, we had lots of practice questions earlier
in the video so let’s finish the quiz here.

524
00:34:38,409 --> 00:34:42,240
Now let’s do a bonus question from Boson
ExSim for CCNA.

525
00:34:42,240 --> 00:34:47,849
Okay, here's today's Boson ExSim practice
question.

526
00:34:47,849 --> 00:34:51,510
This question actually covers something we
didn't cover in the video, but I think you

527
00:34:51,510 --> 00:34:52,710
can answer it.

528
00:34:52,710 --> 00:34:54,419
So here's the question.

529
00:34:54,419 --> 00:34:58,880
What command would you issue on RouterA so
that traffic can be routed to RouterC?

530
00:34:58,880 --> 00:34:59,880
Select the best answer.

531
00:34:59,880 --> 00:35:04,369
So, this is a question about static routing
using IPv6.

532
00:35:04,369 --> 00:35:10,330
However, the IPv6 static route command is
exactly the same as in IPv4.

533
00:35:10,330 --> 00:35:13,869
Like I said in the video, a lot of IPv6 commands
are like that.

534
00:35:13,869 --> 00:35:18,730
The only difference is instead of IP ROUTE
it's IPV6 ROUTE.

535
00:35:18,730 --> 00:35:25,010
So, the command is IPV6 ROUTE, followed by
the destination, you can see the network address

536
00:35:25,010 --> 00:35:28,270
and the prefix length here, and then the next
hop.

537
00:35:28,270 --> 00:35:31,240
Okay, so that's the IPv6 static route command.

538
00:35:31,240 --> 00:35:35,140
So, knowing that, you should be able to answer
this question.

539
00:35:35,140 --> 00:35:43,412
So pause the video here and try to find the
correct answer.

540
00:35:43,412 --> 00:35:45,880
Okay, hopefully you found the answer.

541
00:35:45,880 --> 00:35:48,678
So let's check it out.

542
00:35:48,678 --> 00:35:55,690
So, RouterA needs to reach RouterC, which
is in the 2001:DB8:2::/64 network.

543
00:35:55,690 --> 00:36:00,119
So, that should be the destination in the
static route command.

544
00:36:00,119 --> 00:36:06,330
So that means the correct answer is either
B or D, because A and C have the destination

545
00:36:06,330 --> 00:36:10,650
2001:DB8:1::/64, which is not correct.

546
00:36:10,650 --> 00:36:13,890
So, is the correct answer B or D?

547
00:36:13,890 --> 00:36:22,230
Let's see, so the next hop should be RouterB's
interface in the 2001:DB8:1:: network, so

548
00:36:22,230 --> 00:36:23,900
that is ::2.

549
00:36:23,900 --> 00:36:29,170
So, which one has the correct next hop?

550
00:36:29,170 --> 00:36:35,170
This one here, B. 2001:DB8:1::2, that looks
correct.

551
00:36:35,170 --> 00:36:36,820
How about D?

552
00:36:36,820 --> 00:36:40,910
The next hop is 2001:DB8:2::2, that is not
correct.

553
00:36:40,910 --> 00:36:45,809
That would mean RouterC is the next hop, but
RouterA doesn't even know how to reach RouterC

554
00:36:45,809 --> 00:36:46,809
yet.

555
00:36:46,809 --> 00:36:49,470
Okay, so B should be the correct answer.

556
00:36:49,470 --> 00:36:52,300
I will click on 'show answer'.

557
00:36:52,300 --> 00:36:54,510
And indeed that is correct.

558
00:36:54,510 --> 00:36:57,329
So here is Boson's explanation.

559
00:36:57,329 --> 00:37:00,490
You can pause the video here to read that.

560
00:37:00,490 --> 00:37:03,710
Also notice there is some Cisco documentation
included.

561
00:37:03,710 --> 00:37:07,500
This is available free online and it's a great
study resource.

562
00:37:07,500 --> 00:37:12,730
And also it shows you which category of the
exam topics this question is from.

563
00:37:12,730 --> 00:37:15,109
And it is from 'IP Connectivity'.

564
00:37:15,109 --> 00:37:22,690
Okay, so that is an example question from
Boson ExSim for CCNA.

565
00:37:22,690 --> 00:37:27,550
If you're looking for CCNA practice exams,
Boson ExSim is really the best you can get.

566
00:37:27,550 --> 00:37:29,420
These are fantastic practice exams.

567
00:37:29,420 --> 00:37:34,630
I used them when preparing for my CCNA and
CCNP, so I highly recommend them.

568
00:37:34,630 --> 00:37:42,640
If you want to get a copy of Boson ExSim,
follow the link in the video description.

569
00:37:42,640 --> 00:37:45,690
There are supplementary materials for this
video.

570
00:37:45,690 --> 00:37:49,280
There is a flashcard deck to use with the
software ‘Anki’.

571
00:37:49,280 --> 00:37:53,730
There will also be a packet tracer practice
lab so you can get some hands-on practice.

572
00:37:53,730 --> 00:37:56,310
That will be in the next video.

573
00:37:56,310 --> 00:37:59,650
Sign up for my mailing list via the link in
the description, and I’ll send you all of

574
00:37:59,650 --> 00:38:04,880
the flashcards and packet tracer lab files
for the course.

575
00:38:04,880 --> 00:38:09,550
Before finishing today’s video I want to
thank my JCNP-level channel members.

576
00:38:09,550 --> 00:38:13,940
To join, please click the ‘Join’ button
under the video.

577
00:38:13,940 --> 00:38:18,960
Thank you to Magrathea, Njabulo, Benjamin,
Deepak, Tshepiso, Justin, Loki, TheGunguy,

578
00:38:18,960 --> 00:38:26,000
Nil, Prakaash, Nasir, Erlison, Apogee, Wasseem,
Marko, Florian, Daming, Kone, Joshua, Jhilmar,

579
00:38:26,000 --> 00:38:32,450
Samil, Ed, Value, John, Funnydart, Scott,
Hassan, Gerrard, Joyce, Marek, Velvijaykum,

580
00:38:32,450 --> 00:38:40,490
C Mohd, Johan, Mark, Yousif, Sidi, Boson Software,
Charlesetta, Devin, Lito, Yonatan, and Vance.

581
00:38:40,490 --> 00:38:45,700
Sorry if I pronounced your name incorrectly,
but thank you so much for your support.

582
00:38:45,700 --> 00:38:49,930
One of you is still displaying as Channel
failed to load, if this is you please let

583
00:38:49,930 --> 00:38:52,670
me know and I’ll see if YouTube can fix
it.

584
00:38:52,670 --> 00:38:57,160
This is the list of JCNP-level members at
the time of recording by the way, October

585
00:38:57,160 --> 00:39:02,020
8th 2020, if you signed up recently and your
name isn’t on here don’t worry, you’ll

586
00:39:02,020 --> 00:39:04,880
be in future videos.

587
00:39:04,880 --> 00:39:06,450
Thank you for watching.

588
00:39:06,450 --> 00:39:10,430
Please subscribe to the channel, like the
video, leave a comment, and share the video

589
00:39:10,430 --> 00:39:13,700
with anyone else studying for the CCNA.

590
00:39:13,700 --> 00:39:16,520
If you want to leave a tip, check the links
in the description.

591
00:39:16,520 --> 00:39:23,020
I'm also a Brave verified publisher and accept
BAT, or Basic Attention Token, tips via the

592
00:39:23,020 --> 00:39:24,020
Brave browser.

593
00:39:24,020 --> 00:39:25,747
That's all for now.