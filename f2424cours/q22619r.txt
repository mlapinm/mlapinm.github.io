Error Analysis.В последнем видео я говорил о том, как, столкнувшись с проблемой машинного обучения, часто бывает много разных идей о том, как улучшить алгоритм. В этом видео поговорим о концепции анализа ошибок. Который, надеюсь, даст вам возможность более систематически принимать некоторые из этих решений. Если вы начинаете работу над проблемой машинного обучения, или создаете приложение машинного обучения. Часто считается очень хорошей практикой для начала, не путем создания очень сложной системы с множеством сложных функций и так далее. Но вместо этого начать с построения очень простого алгоритма, который можно быстро реализовать И когда я начинаю с проблемы обучения, то, что я обычно делаю, это тратить максимум один день, , как буквально не более 24 часов, Чтобы попытаться получить что-то действительно быстро и грязное. Честно говоря, вовсе не сложная система, но получить что-то действительно быстрое и грязное выполнение, а затем реализовать его на моих данных перекрестной проверки. После того, как вы сделали это, вы можете построить кривые обучения, это то, о чем мы говорили в предыдущем наборе видео. Но постройте кривые обучения обучения и ошибок тестов , чтобы попытаться выяснить, если вы изучаете алгоритм, возможно, страдаете от высокой смещения или высокой дисперсии, или что-то еще. И используйте это, чтобы попытаться решить, если больше данных, больше функций и так далее, скорее всего, помогут. И причина, по которой это хороший подход, часто заключается в том, что когда вы просто начинаете проблему обучения, на самом деле нет способа сказать заранее. Нужны ли вам более сложные функции, или вам нужно больше данных, или что-то еще. И это просто очень трудно сказать заранее, то есть при отсутствии доказательств, при отсутствии кривой обучения. Просто невероятно сложно понять , где вы должны проводить свое время. И это часто, реализуя даже очень, очень быструю и грязную реализацию. И путем построения кривых обучения, это помогает вам принимать эти решения. Поэтому, если вам нравится, вы можете думать об этом как о способе избежать того, что иногда называют преждевременной оптимизацией в компьютерном программировании. И эта идея, которая говорит, что мы должны позволить доказательствам направлять наши решения о том, где проводить наше время, а не использовать чувство кишечника, что часто неправильно. В дополнение к построению кривых обучения, еще одна вещь, которая часто очень полезна, это то, что называется анализом ошибок. И я имею в виду, что при построении говорят классификатор спама. Я часто буду смотреть на свой набор перекрестной проверки и вручную смотреть на электронные письма, в которых мой алгоритм делает ошибки. Итак, посмотрите на спам-сообщения и не-спам-письма, которые алгоритм неправильно классифицирует, и посмотрите, можете ли вы обнаружить какие-либо систематические закономерности в том, какие примеры он ошибочно классифицирует. И часто, делая это, это процесс, который вдохновит вас на разработку новых функций. Или они расскажут вам, каковы текущие вещи или текущие недостатки системы. И дать вам вдохновение, которое вам нужно, чтобы придумать улучшения в нем. Конкретно, вот конкретный пример. Допустим, вы создали классификатор спама, а у вас есть 500 примеров в наборе перекрестной проверки. И предположим в этом примере, что алгоритм имеет очень высокую частоту ошибок. И это классифицирует 100 из этих примеров перекрестной проверки. То, что я делаю, это вручную проверить эти 100 ошибок и вручную классифицировать их. Основываясь на таких вещах, как какой тип электронной почты это, какие признаки или , какие функции, по вашему мнению, могли помочь алгоритму правильно классифицировать их. Итак, в частности, по какому типу электронной почты это, если я просматриваю эти 100 ошибок, я могу обнаружить, что, возможно, наиболее распространенными типами спам-писем в этих классифицирует, возможно, электронные письма на фармацевтике или аптеках, пытающихся продавать наркотики. Может быть, электронные письма, которые пытаются продать реплики, такие как поддельные часы, поддельные случайные вещи, может быть, некоторые электронные письма пытаются украсть пароли,. Они также называются фишинговыми письмами, это еще одна большая категория писем, и , возможно, другие категории. Итак, с точки зрения классификации, какой тип электронной почты это, я бы на самом деле прошел и подсчитал мои сто писем. Может быть, я нахожу, что 12 из них являются лейблом электронной почты, или фармацевтические письма, и, возможно, 4 из это электронные письма, пытающиеся продать реплики, которые продают поддельные часы или что-то в этом роде. И, может быть, я нахожу, что 53 из них — это то, что называется фишинговыми письмами, в основном письма, пытающиеся убедить вас дать им свой пароль. И 31 письма являются другими типами писем. И это подсчет количества писем в этих разных категориях, которые вы можете обнаружить, например. Что алгоритм делает действительно, особенно плохо на электронных письмах, пытающихся украсть пароли. И это может предполагать, что это может стоить ваших усилий , чтобы посмотреть более внимательно на этот тип электронной почты и посмотреть, можете ли вы придумать лучшие функции, чтобы правильно классифицировать их. А также то, что я мог бы сделать, это посмотреть, какие признаки или , какие дополнительные функции могли бы помочь алгоритму классифицировать электронные письма. Итак, предположим, что некоторые из наших гипотез о вещах или функциях , которые могут помочь нам классифицировать электронные письма лучше. Попытка обнаружить преднамеренные опечатки по сравнению с необычной почтой маршрутизации по сравнению с необычной пунктуацией спама. Например, если люди используют много восклицательных знаков. И еще раз я бы вручную прошел, и скажем, я нашел пять случаев этого и 16 из этого и 32 из этого, а также кучу других типов писем. И если это то, что вы получаете на вашем наборе перекрестной проверки, то он действительно говорит вам , что, возможно, преднамеренное орфографирование является достаточно редким явлением, которое, возможно, , не стоит все время пытаться написать алгоритмы, которые обнаруживают это. Но если вы обнаружите, что многие спамеры используют необычную пунктуацию, то , может быть, это сильный признак того, что на самом деле стоит потратить время на разработку более сложных функций на основе пунктуации. Таким образом, такой анализ ошибок, который на самом деле является процессом ручного изучения ошибок, которые делает алгоритм, может помочь вам найти наиболее плодотворные пути. И это также объясняет, почему я часто рекомендую реализовать быструю и грязную реализацию алгоритма. То, что мы действительно хотим сделать, это выяснить, какие наиболее сложные примеры для алгоритма для классификации. И очень часто для разных алгоритмов, для разных алгоритмов обучения они часто находят похожие категории примеров сложными. И имея быструю и грязную реализацию, это часто быстрый способ позволить вам идентифицировать некоторые ошибки и быстро определить, что являются жесткими примерами. Чтобы вы могли сконцентрировать свои усилия на них. Наконец, при разработке алгоритмов обучения, еще один полезный совет - , чтобы убедиться, что у вас есть численная оценка вашего алгоритма обучения. И я имею в виду, что вы, если вы разрабатываете алгоритм обучения, , это часто невероятно полезно. Если у вас есть способ оценить свой алгоритм обучения , который просто возвращает вам одно реальное число, может быть, точность, может быть, ошибка. Но единственное реальное число, которое говорит вам, насколько хорошо работает ваш алгоритм обучения. Я расскажу больше об этой конкретной концепции в последующих видео, но вот конкретный пример. Допустим, мы пытаемся решить, следует ли относиться к таким словам, как скидка, скидки, дисконтирование, дисконтирование, как к тому же слову. Так что вы знаете, может быть, один из способов сделать это - просто посмотреть на первые несколько символов в слове типа, вы знаете. Если вы просто посмотрите на первые несколько символов слова, то вы поймете, что, возможно, все эти слова имеют примерно одинаковое значение. В обработке естественного языка, способ, которым это делается, на самом деле использует тип программного обеспечения, называемого software. И если вы когда-нибудь захотите сделать это самостоятельно, найдите в поисковой системе штеммер портера, и это было бы одной разумной частью программного обеспечения для делать такого рода стемминга, который позволит вам относиться ко всем этим словам, скидку, скидки и так далее, как одно и то же слово. Но с помощью программного обеспечения, которое в основном смотрит на первые несколько алфавитов слова, более того, это может помочь, но это может повредить. И это может повредить, потому что, например, программное обеспечение может ошибочно использовать слова вселенная и университет как одно и то же. Потому что, знаете, эти два слова начинаются с тех же алфавитов. Поэтому, если вы пытаетесь решить, следует ли использовать программное обеспечение для перекрестного классификатора спама, это не всегда легко сказать. И в частности, анализ ошибок на самом деле не может быть полезен для , решив, является ли такая идея стемминга хорошей идеей. Вместо этого лучший способ выяснить, хорошо ли использование программного обеспечения для стемминга помочь вашему классификатору, если у вас есть способ очень быстро просто попробовать его и посмотреть, работает ли он. И для того, чтобы сделать это, , имея способ численно оценить ваш алгоритм, будет очень полезным. Конкретно, возможно, самое естественное, что нужно сделать, это посмотреть на ошибку перекрестной проверки производительности алгоритма с и без стемминга. Итак, если вы запустите свой алгоритм без стемминга и закончите 5-процентную ошибку классификации. И вы перезапускаете его, и вы получаете 3-процентную ошибку классификации, тогда это уменьшение ошибки очень быстро позволяет вам решить, что это похоже на использование стемминга - хорошая идея. Для этой конкретной проблемы существует очень естественная, одиночная, метрика оценки реального числа, а именно ошибка перекрестной проверки. Мы увидим более поздние примеры, когда придумывать такую единичную метрику оценки реального числа потребуется немного больше работы. Но, как мы увидим в более позднем видео, это также позволит вам сделать эти решения гораздо быстрее сказать, использовать или не использовать стемминг. И, как еще один быстрый пример, предположим, что вы также пытаетесь решить , следует ли различать верхний и нижний регистр. Итак, вы знаете, как слово, мама, были в верхнем регистре, а против нижнего регистра m, следует ли рассматривать как одно и то же слово или как разные слова? Должно ли это рассматриваться как одна и та же функция или как разные функции? И так, еще раз, потому что у нас есть способ оценить наш алгоритм. Если вы попробуете это здесь, если я перестал различать верхний и нижний регистр, возможно, я в конечном итоге с ошибкой 3,2 процента. И я считаю, что, следовательно, это хуже, чем если бы я использовал только стемминг. Итак, это давайте мне очень быстро решить идти вперед и различать или не различать верхний и нижний регистр. Поэтому, когда вы разрабатываете алгоритм обучения, очень часто вы будете опробовать много новых идей и много новых версий вашего алгоритма обучения. Если каждый раз, когда вы пробуете новую идею, если вы в конечном итоге вручную изучите кучу примеров снова, чтобы увидеть, улучшилась ли она или хуже, это будет очень трудно принимать решения. Вы используете стемминг или нет? Вы различаете верхний и нижний регистр или нет? Но имея одну метрику оценки реального числа, , вы можете просто посмотреть и посмотреть, о, стрелка поднималась вверх или спускалась вниз? И вы можете использовать это, чтобы гораздо быстрее опробовать новые идеи и почти сразу сказать, улучшилась ли ваша новая идея или ухудшила производительность алгоритма обучения. И это позволит вам часто делать гораздо более быстрый прогресс. Поэтому рекомендуемый, настоятельно рекомендуемый способ анализа ошибок - это на перекрестных проверках там, а не тестовый набор. Но, вы знаете, есть люди, которые будут делать это на тестовом наборе, хотя это определенно менее математически подходит, конечно менее рекомендуемый способ , что нужно сделать, чем делать анализ ошибок на вашем наборе перекрестной проверки. Установите, чтобы завершить это видео, когда вы начинаете с новой проблемы машинного обучения, то, что я почти всегда рекомендую, это реализовать быструю и грязную реализацию вашего обучения из них. И я почти никогда не видел, чтобы кто-то тратил слишком мало времени на эту быструю и грязную реализацию. Я почти только когда-либо видел, как люди тратят слишком много времени, создавая свою первую, предположительно, быструю и грязную реализацию. Так что, действительно, не беспокойтесь о том, что это слишком быстро, или не беспокойтесь о том, что он слишком грязный. Но на самом деле, реализовать что-то так быстро, как вы можете. И как только у вас будет начальная реализация, это тогда мощный инструмент для решения, где провести свое время дальше. Потому что сначала вы можете посмотреть на ошибки, которые он делает, и сделать такой анализ ошибок, чтобы увидеть, какие другие ошибки он делает, и использовать это, чтобы вдохновить дальнейшее развитие. И во-вторых, предполагая, что ваша быстрая и грязная реализация включает одну метрику оценки реального числа. Затем это может быть средством для вас, чтобы опробовать различные идеи и быстро посмотреть, улучшают ли различные идеи, которые вы пробуете, производительность вашего алгоритма. И поэтому позвольте вам, возможно, гораздо быстрее принимать решения о том, что вещи складывать и какие вещи включать в ваш алгоритм обучения.