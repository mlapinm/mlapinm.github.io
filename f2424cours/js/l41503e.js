var l41503e = [
"Walkthrough: Basic SQL6m.",
"Hello and welcome to another Django for Everybody walkthrough.",
"Today, we're going to take a look at some SQL, walk through some SQL.",
"So the handout for this is dj4e.",
"com/lectures/SQL-01-Basics.",
"txt.",
"And we are going to do this in a Linux bash shell sitting here in my PythonAnywhere account.",
"So I'm sitting here in my home directory.",
"And I've got my samples checked out and then projects.",
"We're a little ahead of that.",
"For now, we're just going to work in this home directory.",
"So SQLite is a very simple database and it does all of its work in a single file.",
"It's not the greatest multiuser database, but it's great for a class.",
"So I'm going to run this command, sqlite is a Linux command, and then I'm going to give it a file name zip.",
"This is just a filename throwaway, but with an sqlite3 suffix.",
"So now I'm in a command line and can type help to see what things are available and away we go.",
"I've got some of these commands all put in and so you can do things like ask what tables are in there, what are the tables?",
"Well, there are no tables, so let's run a CREATE statement.",
"This is a create this SQL, CREATE TABLE Users with name and email but then there's this special, and each database does this a little differently, this is the auto-generated id field that's going to be our primary key for each of those rows.",
"So CREATE TABLE Users, so just copy this over and semicolon ends these and so you can this is a continuation prompt.",
"So it's prompting, prompting until it sees a semicolon.",
"But now if I say dot tables, and by the way, you can see me cursoring up to get to this.",
"So I have a Users table.",
"Yay, we're good.",
"So then I can say schema Users, say what is in that table?",
"So it looks like a CREATE TABLE statement, but basically this is you can come back later and say, hey what's in this table, and it teaches you this or gives this to you in the form of a CREATE statement.",
"So, the first thing that you tend to do for anything is you run the SELECT statement, the R of CRUD, create, read, update, and delete, and there's nothing in there.",
"So let's put some stuff in.",
"Let's insert, right?",
"Do an INSERT statement.",
"So, of course, we've got the table name, we've got the two columns.",
"We do not have to specify the id column because that's auto-generated by the database, and then the values keyword followed by two values, which is a one-to-one correspondence in the same order as the columns.",
"And so that happens.",
"Now I can do a SELECT star FROM Users and you see that I got a record.",
"It has Kristen and kf@umich.",
"edu and a primary key of 1.",
"And so that's pretty nice.",
"You can say, I would like to see this not with those vertical bars.",
"The vertical bars are kind of nice and condensed.",
"But if I say mode column, I can say SELECT star FROM Users and it gives me a little bit more white space.",
"Okay?",
"And so that mode column is just an sqlite command to make it a little easier for me.",
"Now I can just put in all these other records, copy them all, and sqlite happily runs them in order, and finish them with a semicolon statement.",
"So now I can say SELECT star FROM Users, and there they are.",
"So I'm sticking them in the database.",
"What's amazing to me is that it is so beautiful.",
"I mean, I just think SQL is just so beautiful.",
"I mean, people avoid it.",
"There's a DELETE statement, right?",
"DELETE FROM Users WHERE email equals ted@umich.",
"edu.",
"Goodbye, Ted.",
"And I can do a SELECT and you can see that now I have record 4 is now gone.",
"I could have said DELETE FROM Users WHERE id equals 4, that would work too.",
"I'm going to change my name in the Chuck record from Chuck to Charles.",
"So UPDATE USERS SET new key equals value WHERE email equals and the WHERE clause is really, really important because otherwise it would have updated all the records, maybe right before I delete all the data.",
"You can see that the Chuck now has become Charles when I do a SELECT star FROM Users.",
"So far, so good.",
"You can use a WHERE clause on a SELECT statement, SELECT star FROM Users WHERE email equals csev@umich.",
"edu, and at that point we only see record 2, which is me.",
"We can ORDER BY, SELECT star FROM Users, ORDER BY email, which now we see the emails in ascending order, a, csev, cvl, kf, nicely in ascending order.",
"We can do DESC, we can say SELECT star FROM Users ORDER BY name DESC to make it be descending.",
"So now you see Sally, Kristen, Colleen and Charles in descending name order, and away you go.",
"And so we could drop the table Users, but let's play with this data a little bit.",
"So let's just say I did an update.",
"UPDATE Users SET Users name equals Charles with no WHERE clause.",
"Watch what happens, this tells you something about SQL.",
"And if I do a SELECT star FROM Users, let's just do a SELECT star FROM Users.",
"SELECT star FROM Users.",
"Everybody's named Charles because the update applies to all rows until you tell it not to with a WHERE clause.",
"So we always type the WHERE clause without even thinking, but you do not have to type the WHERE clause.",
"And the same is true if I say DELETE FROM Users with no WHERE clause, watch what happens.",
"Normally we put a WHERE clause on delete.",
"And then we go SELECT star FROM Users, away you go.",
"Okay?",
"Now I could also say DROP TABLE Users and then it will all go away.",
"Oops, Users.",
"Okay?",
"And so that's it, dot quit, I will log out.",
"I hope that you have found this particular walkthrough for Django for Everybody useful, cheers.",
]