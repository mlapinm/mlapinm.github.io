Advanced data cleaning functions, part 16m.
Привет и добро пожаловать обратно.
До сих пор мы прошлинекоторые базовые SQL-запросы ифункции, которые могут помочь вам очистить ваши данные.
Мы также проверили некоторые способы, с которыми вы можете справитьсястроковые переменные в SQL, чтобы упростить вашу работу.
Приготовьтесь узнать больше о функцияхдля работы со строками в SQL.
Поверьте мне, эти функции будуточень полезно в вашей работе в качестве аналитика данных.
В этом видео мы еще раз проверим строки и узнаемкак использовать функцию CAST для правильного форматирования данных.
Когда вы импортируете данные, которые неуже существуют в ваших таблицах SQL,типы данных из нового набора данныхвозможно, не был импортирован правильно.
Вот где функция CAST пригодится.
По сути, CAST можно использовать для преобразованиячто угодно из одного типа данных в другой.
Давайте проверим пример.
Представьте, что мы работаем с мебельным магазином Лорен.
Хозяин собирал.
данные о сделках за последний год,но она только что обнаружила, что они на самом деле не могут организоватьсвои данные, потому что они были неправильно отформатированы.
Мы поможем ей, превративнаши данные, чтобы снова сделать их полезными.
Например, допустим, мы хотим отсортировать все покупкипо цене_покупки в порядке убывания.
Это значит, что мы хотимсамая дорогая покупка дляпоявляются первыми в наших результатах.
Чтобы написать SQL-запрос,мы начнем с базовой структуры SQL.
ВЫБЕРИТЕ, ОТКУДА, ОТКУДА.
Мы знаем, что данные хранятся втаблица customer_purchase в наборе данных customer_data.
Пишем customer_data.
customer_purchase после FROM.
Далее мы сообщаем SQL, какие данныечтобы дать нам в предложении SELECT.
Мы хотим видеть данные Purchase_price,поэтому мы вводим Purchase_price после SELECT.
Далее следует предложение WHERE.
Мы не фильтруем данные, так как хотимуказаны все закупочные ценыпоэтому мы можем убрать предложение WHERE.
Наконец, чтобы отсортировать Purchase_price в порядке убывания,набираем ORDER BY Purchase_price,DESC в конце нашего запроса.
Давайте запустим этот запрос.
Мы видим, что89,85 находится вверху, а 799,99 ниже него.
Но мы знаем, что 799,99 больше, чем 89,85.
База данных не распознает, что это числа,так что это не сортировало их таким образом.
Если мы вернемся к таблице customer_purchaseи посмотрите на его схему,мы можем видеть, какой тип данных у этой базы данныхдумает покупка подчеркивание цена.
Здесь написано, что база данных думаетцена подчеркивания покупки – это строка,когда на самом деле это поплавок,которое представляет собой число, содержащее десятичную дробь.
Вот почему 89,85 появляется раньше 799,99.
Когда мы начинаем письма,мы начинаем с первой буквыпрежде чем перейти ко второму письму.
Если мы хотим отсортировать словаяблоко и апельсин в порядке убывания,мы начинаем с первых букв а и о.
Так как о идет после а,Сначала появится апельсин, затем яблоко.
База данных сделала то же самое с 89,85 и 799,99.
Все началось с первой буквы,что в данном случае было 8 и 7 соответственно.
Так как 8 больше 7,база данных сначала отсортировала 89,85, а затем 799,99.
Поскольку база данных воспринимала их как текстовые строки,база данных не распознает эти строки как числа с плавающей запятойпотому что их не былоtypecast для соответствия этому типу данных.
Приведение типов означает преобразование данныхот одного вида к другому,что мы и сделаем с функцией CAST.
Мы используем функцию CAST, чтобы заменить buy_price нановая Purchase_price, котораябаза данных распознает как число с плавающей запятой вместо строки.
Начнем с замены Purchase_price на CAST.
Затем мы сообщаем SQL поле, которое мы хотим изменить,которое является полем Purchase_price.
Далее идет тип данных, на который мы хотим изменить Purchase_price,который является типом данных float.
BigQuery хранит числа в 64-битной системе.
Ссылка на тип данных floatкак float64 в нашем запросе.
Это может немного отличаться, и другие платформы SQL,но в основном 64 и float64 простоуказывает, что мы приводим числа в64-битная система как числа с плавающей запятой.
Нам также нужно отсортировать это новое поле,поэтому мы меняем Purchase_price послеORDER BY для CAST подчёркивания цены покупки как float64.
Вот как мы используемфункция CAST, позволяющая SQL распознаватьстолбец Purchase_price какплавающие вместо текстовых строк.
Теперь мы можем начать наши покупки по Purchase_price.
Точно так же мебельный магазин Лоренданные, которые действительно могут быть использованы для анализа.
Как аналитик данных,вам будет предложено найти и систематизировать данные много,Вот почему вы хотите убедиться, что выконвертировать между типами данных на ранней стадии.
Такие предприятия, как наш мебельный магазин,заинтересованы в своевременных данных о продажах,и нужно уметьучитывайте это в своем анализе.
Функция CAST может использоваться для изменениястроки в другие типы данных,как дата и время.
Как аналитик данных,вы можете обнаружить, что используете данные из разных источников.
Часть вашей работы заключается в том, чтобы убедиться, что данныеиз этих источников узнаваеми использовать в вашей базе данных, чтобы выне столкнется с какими-либо проблемами с вашим анализом.
Теперь вы знаете, как это сделать.
Функция CASTодин отличный инструмент, который вы можете использовать при очистке данных.
Далее мы рассмотрим некоторые другие расширенные функции.
которые вы можете добавить в свой набор инструментов.
До скорого.