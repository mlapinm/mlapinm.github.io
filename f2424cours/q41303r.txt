WA4E / HTML - Code Walkthrough13m.
Здравствуйте и добро пожаловать в веб-приложения для всех.
В этом скринкасте мы будем играть с некоторыми примерами кода.
Вы можете скачать его и играть с ним на своем компьютере, где вы можете посмотреть его в текстовом редакторе, или если вы просто хотите просмотреть его, вы можете просмотреть его здесь и взгляните на версию, которую я использую.
Это действительно предполагалось, что вы посмотрите на это в инструментах разработчика.
И поэтому вы можете делать такие вещи, как например, элемент проверки.
И вот мы здесь.
Это, очевидно, будет немного более ценным даже в CSS, но вы можете увидеть объектную модель документа.
Интересно, что здесь показывает то, о чем я всегда говорю, это разница между моделью объекта документа и исходным кодом.
Итак, это объектная модель документа, она своего рода стилизована.
Если вы посмотрите на исходный код, вы должны сказать вид источника страницы.
И так исходный код, это буквально именно то, что находится в файле.
И если вы посмотрите на этот файл в текстовом редакторе, вы увидите это.
И если вы смотрите на него здесь, он выглядит не совсем так же.
Некоторые вещи были сделаны немного по-другому, они вроде как получили этот дополнительный материал.
И это своего рода после того, как браузер посмотрел на него.
И когда мы начнем говорить о JavaScript и изменять некоторые из этого динамически, вы увидите, что эта часть является объектной моделью документа.
Но источник никогда не меняется.
Источник - это то, что было первоначально загружено, когда сервер отправил это нам.
Итак, давайте взглянем на это.
Я спрячу это, если мне это не понадобится.
Я буду идти туда и обратно между источником.
Таким образом, у нас есть базовый документ html с головным тегом и телом.
А затем заголовок и, конечно, вот наш заголовок.
Мы используем стиль по умолчанию, и абзацы являются важной частью вещей.
Вы можете сжать это столько, сколько захотите.
Пробелы вроде не имеют значения , верно?
Таким образом, этот пробел здесь не имеет значения, тот факт, что у него есть дополнительное пространство.
Это не имеет большого значения.
И так вы можете видеть сильный тег, который приводит к смелости.
Давайте просто продолжим и посмотрим на это здесь, в инспекции.
Мы спустимся сюда и найдем как сильную бирку, это смело.
У нас есть ярлык подчеркивать.
И если вы посмотрите немного дальше, вы увидите, что есть якорный тег, весь якорный тег - это весь тег от a до /a lists.
htm.
Вот куда мы отправимся, если мы нажмем на этот текст прямо здесь.
И теперь вы можете видеть, что это относительная ссылка, и это превращает ее в абсолютную ссылку, и это потому, что браузер знает, где мы находимся.
И поэтому это своего рода префиксы все вплоть до относительной ссылки.
И это хорошо, потому что если мы посмотрим в папках, мы увидим, что все эти папки здесь.
Вот, позвольте мне найти вам эту папку, она довольно глубоко в моем Позже, все это будет иметь прекрасный смысл для вас.
Я делаю много вещей в Интернете.
код, html.
Хорошо.
Так вот, после всего этого, здесь у нас есть файлы, верно?
И так это index.
htm, а index.
htm прямо там и lists.
htm.
И поэтому, если я нажму здесь, я перейду к lists.
htm, и это вытащит этот другой файл вверх.
И так эти ребята все в одной папке вместе.
Это просто означает, что я могу использовать относительные ссылки для перемещения между ними.
Тег, который действительно становится более важным, особенно когда мы говорим о написании кода внутри HTML и показе кода людей является предварительным тегом.
И поэтому pre-тег, вы знаете, я просто скажу, чтобы проверить, чтобы прыгать прямо туда, где находится pre тег.
Предварительный тег уважает пробелы, поэтому все эти пробелы случаются, случаются новые строки, и он также отображается моноширным шрифтом.
И вы можете изменить все эти вещи, как только мы доберемся до CSS.
Но pre-tag, когда мы печатаем отладки из, а не в таких файлах, , но когда мы запускаем код, иногда хорошо печатать отладки с помощью pre тегов.
Итак, перейдем к следующей странице.
И вот целая серия вещей, с которыми мы будем играть.
Это непронумерованный список, все это неснумерованный список сверху вниз.
Поэтому, когда я подчеркиваю это, вы видите все начало до конца списка, , тогда каждый элемент в списке имеет начало и конец тегов li, верно?
Вниз, вниз, вы знаете, так вот этот мы должны узнать о таблицах, и есть href, есть еще одна относительная ссылка.
И это своего рода мой прыжок со страницы , чтобы добраться до всех этих вещей, верно?
Узнайте о таблицах и т.
д.
И так вы можете видеть это.
Вероятно, мы используем, чтобы взглянуть на исходный код этой страницы.
И вот это исходный код, который я набрал, и вы можете увидеть теги li, p тегов.
Я помещаю п внутри Ли, чтобы получить место.
Посмотрим, смогу ли я вам это показать.
Итак, если вы посмотрите на это, и вы посмотрите на тег li, тег li таково, а пункт - это то, что на самом деле создает вертикальное и горизонтальное пространство, верно?
Так что оранжевый, который вы видите, это пространство, которое тег абзаца имеет предустановленные настройки.
Вот как я это делаю, помещая абзацы и hrefs, и так вот как это все выглядит.
Итак, давайте посмотрим на специальных персонажей.
И это интересная вещь, потому что это совсем не то, что вышло.
потому что меньше, чем требует амперсанд lt, но это своего рода обработка, так что давайте взглянем на исходный код этого, потому что это будет более поучительным.
Таким образом амперсанд lt, амперсанд gt, амперсанд ampersand, это амперсанд в HTML, а затем только буквы amp; Точка с запятой не особенная.
Они только действительно три действительно специальные символы, меньше, чем, больше, и амперсанд.
И вы можете положить все виды веселья.
Клубы, сердца и бриллианты.
И у тебя есть клубы, сердца и бриллианты, стрелы и всё такое.
Приятно, что браузеры просто имеют эти встроенные, хотя они не обязательно самые сексуальные или крутые вещи.
Я думаю, что происходит, когда я возвращаюсь по этой ссылке, когда возвращаюсь к списку.
Так что это просто специальные символы, и вы заметите, что стиль по умолчанию он говорит, что мы видели этот.
И это то, как Интернет работал 1000 лет, нет, назад в 90-е, ты вроде как, хорошо, что он становится фиолетовым.
И вы заметите, что Google делает это также, когда вы выполняете поиск Google, он фактически позволяет ссылкам менять цвет после того, как вы их посетили.
Итак, давайте взглянем на ссылки.
Мы смотрим на ссылки.
Я взгляну на источник этого парня.
Абсолютная ссылка href, верно?
А затем /a, это интеракруемый текст, правильно, между начальным тегом и конечным тегом.
Атрибуты находятся в начале тега.
Другой атрибут, который вы можете добавить, и я делаю это все время, - это target = «_blank» и , это в основном способ, которым мы говорим открыть это на новой вкладке.
Так что вы узнаете, что это всплывает в новой вкладке.
И вот куда он идет, когда он всплывает.
И поэтому вы можете решить, хотите ли вы, чтобы это было на той же странице, назад, или на новой странице.
Затем мне нужно закрыть вкладку, чтобы вернуться.
И теперь я вернусь, потому что это просто относительная ссылка, к lists.
htm, чтобы я мог вернуться и посмотреть на следующее.
Давайте посмотрим, как изображены изображения.
Так что это просто абзац, в котором есть изображение.
Итак, это абзац, но есть изображение, src\"medium.
jpg», если вы посмотрите в моей папке.
Если вы посмотрите в мою папку, вы видите изображение прямо там, medium.
png.
Вы не видите суффикс, потому что Мак пытается скрыть его от меня.
И вот это просто, вы видите это пространство здесь и здесь.
Изображение не имеет места.
Мы могли бы добавить некоторые в CSS позже, но абзац - это то, что добавляет пространство.
Тогда у нас просто обычный старый абзац.
Вы не должны использовать тег центра, мы перейдем к тому, как центрировать вещи.
Вот что это говорит прямо там.
И вы можете иметь изображение, которое находится прямо посередине.
Итак, вы видите, где это изображение.
Я думаю о изображениях, если они прямо в середине текста, они похожи на гигантский персонаж, и вот как это работает.
И вы даже можете вставить изображение как вещь внутри ссылки.
Итак, вот якорный тег.
Это тот бит прямо там, а затем тело тега якоря - это изображение.
И поэтому, если я нажму на это, он вернется к lists.
htm.
И вы заметите, что все они возвращаются к lists.
htm, так что я могу работать над следующим делом, верно?
Столы.
Опять же, вы не должны использовать таблицы для выкладки как блоки текста, что мы раньше делали.
Мы использовали такие вещи, как использование таблиц для рисования границ вокруг вещей, которые мы увидим в CSS.
Но теперь это совершенно многословный и , вы должны смотреть на таблицы таким образом, чтобы они, ну знаешь, милые и красивые.
Итак, давайте сделаем вид источника здесь.
Итак, давайте посмотрим, есть наша таблица.
наш /таблица и строка таблицы.
Теперь давайте посмотрим на DOM.
Так что, видимо, я не положил тело.
Мы должны положить туда тело, а я этого не делал.
Но это DOM, DOM положил его.
Это добавлено парсингом и так ясно, что я сделал небольшую ошибку в моем HTML, потому что я не поставил тег tbody.
И так, что было добавлено браузером, когда он разбирал и читал это как, о, он забыл свое тело, так что это как пощечину один для меня.
И я думаю, что ошибка в том, что это моя строка заголовка, и , я думаю, что это должно быть похоже на thead.
Так что там я иду, плохой HTML, это история моей жизни.
И у меня есть строки, и вы заметите, что DOM немного красивее.
Поэтому иногда я делаю это, DOM хорошо отстучивается.
Так что это не исходный код.
Это данные, которые представляют этот визуальный элемент, верно?
Это то, что вы видите, но он читал это из файла или с сервера, проанализировал его и создал объектную модель документа.
Я говорю это только миллион раз.
Хорошо, так что вернемся к списку.
Мы очень хорошо проводим время.
Итак, вот очень плохой HTML.
Я собираюсь просмотреть источник на нем.
И снова, вы увидите разницу между объектной моделью документа Когда вы отлаживаете эти вещи, вам придется иногда просматривать исходный код.
Иногда объектная модель документа будет единственным способом отладки его, а иногда просматривать источник.
Так что это тот, у которого плохие вещи, например, H1 в верхнем регистре.
Этот тег абзаца не прекращен.
Этот тег UL прописный.
Это Ii не прекращено.
У меня нет двойных кавычек.
Итак, есть ряд ошибок, которые я сделал в этом HTML, , но это выглядит довольно хорошо.
И вы заметите, что в объектной модели документа все исправлено.
h1 строчная.
Тег p завершен.
Есть двойные кавычки.
То есть, что объектная модель документа - это не только исходный код HTML, , это как разумная разобранная красивая версия исходного кода HTML.
И так, вы знаете, этот тег ul, эти теги li теперь сделаны.
В нижнем регистре все строчные.
Так что я позабочусь о твоём беспорядке.
Я исправлю и исправлю ваш HTML, а затем я покажу его для меня и буду иметь смысл в этом.
Таким образом, объектная модель документа не та же.
Это вроде как сладкий удивительный лучший вариант.
Но это то, что меняет.
Поэтому позвольте мне просто показать вам что-то, как я могу изменить объектную модель документа.
Посмотрим, посмотрим, смогу ли я изменить этот текст.
Я изменил объектную модель документа, которая изменяется.
Но это не изменило исходный код здесь, источник, который он был получен для его создания, но я могу изменить объектную модель документа.
А позже в классе мы напишем код, который фактически изменит объектную модель документа Так что давайте изменим это.
Мы еще раз назовем это будет идти в список .
Поэтому я могу изменить объектную модель документа.
Итак, вы видите, что это изменило его.
Поэтому, когда мы изменяем объектную модель документа, то, что мы видим в браузере, изменяется , но источник не меняется.
Я сказал это достаточно раз?
Так что давайте нажмем на это и вернемся к спискам.
Хорошо, так что некоторые HTML могут быть сломаны так плохо, что он не отображает все это.
Whoops, это не так хорошо сработало, я сделаю источник представления на нем.
И тогда я дам вам понять, почему это не работает, почему это не показывает.
Взгляните на источник, вы это выясните.
Я надеюсь, что это было полезно для вас.
Увидимся в сети.
[МУЗЫКА]