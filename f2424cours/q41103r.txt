Introduction to Dynamic Web Content6m.
Здравствуйте, и добро пожаловать на нашу лекцию по динамическому веб-контенту.
Может показаться странным говорить о создании веб-приложений и, , когда мы начинаем говорить о создании веб-приложений, , что мы будем говорить о протоколах и прочее.
Но в некотором роде, когда вы создаете веб-приложение, если вы не понимаете протокол, и вы просто вроде как говорите, я изменил этот немного кода и ударил обновление, и произошла какая-то магия, вы действительно обманываете себя с точки зрения превращения действительно хорошее веб-приложение разработчик.
Потому что, в конечном счете, эти протоколы являются тем, что позволяет веб-приложения.
И когда вы идете вперед и используете фреймворки, вам не нужно знать все эти вещи подробно.
Но когда вы отлаживаете свои приложения, вы абсолютно это делаете.
И я не знаю, была ли у вас консоль Firefox или смотрела на вещи и наблюдала, но происходит так много сложности.
И когда вы используете веб-приложение, надеюсь, все работает и , что сложность скрыта от вас.
Так что если у вас есть какой-то интерес к этому и вы хотите пойти еще ниже, чтобы своего рода больше сетевых протоколов, а не только протоколов HTTP, Я написал бесплатную книгу о сети под названием Введение в сети, Как Интернет работает, что вы приветствуете.
Вы можете купить принт, если хотите.
Но это также совершенно бесплатно, как и каждая книга, которую я пишу в наши дни.
И если мы посмотрим на то, о чем мы будем говорить в этой лекции и в этом курсе веб-приложений это технологии, различные технологии, которые используются, по сути, для создания веб-страницы, верно?
Итак, у нас есть веб-страница здесь, вы идете на URL dub-dub-dub данных, Я имею в виду, data.
pr4e.
org/page1.
htm, и вот страница.
И это похоже на супер простую страницу.
Но есть так много технологий, например, как браузеры работают с JavaScript, и jQuery, и CSS, и, в конечном итоге, Vue и тому подобное.
Это целый набор интерфейсных технологий.
А затем есть своего рода серверные технологии, такие как Django или Flask и базы данных.
И мы узнаем в этом, мой фокус в этом классе меньше о том, как сделать все красиво, хотя это важно, и больше о том, как справиться с задней частью.
То, что мы увидим, это технологии, которые определяют внешний вид и ощущение и интерактивность ваших веб-страниц.
Но также и то, как данные и HTML, CSS и JavaScript обслуживаются удаленным сервером.
И поэтому Интернет здесь посередине.
Браузер сидит на вашем ноутбуке или телефоне, или что-то еще, и в нем встроены все эти технологии.
Он делает запросы, а затем сервер возвращается с ответами.
И поэтому самая простая версия этого протокола заключается в том, что вы нажимаете на тег.
И когда вы нажимаете на этот тег, вы получаете новую веб-страницу.
Теперь, если вы посмотрите консоль отладчика, вы увидите, что иногда это 120 различных циклов запроса-ответа, используемых для построения страницы.
Но в некотором смысле они все одинаковые.
Теперь, когда мы переходим к таким вещам, как HTTP 2, , есть способы вытащить несколько документов в одном соединении, , но мы будем придерживаться старого способа HTTP 1 думать об этом.
В простейшей форме браузер запрашивает документ , а затем извлекает документ, а затем показывает документ.
И это основной цикл запроса-ответа.
Итак, если вы посмотрите на то, как это работает, этот браузер представляет собой приложение, работающее внутри вашего компьютера, на вашем ноутбуке или телефоне, то это фрагмент кода.
И в этом, он имеет подключение к экрану, клавиатуре, или мышь, или что-то еще, и он следит за событиями.
Это означает, что вы собираетесь идти, и вы собираетесь щелкнуть где-то, , а затем это приложение будет реагировать на события.
Итак, на веб-странице, в простейшем случае, у вас есть вещи, на которые вы можете нажать, и вещи, которые вы не можете.
И вы идете найти свой путь через все, что нужно нажать на часть этой веб-страницы.
И этот клик перехватывается приложением, будь то Chrome, или Firefox, или Safari, работающим на вашем оборудовании.
Затем приложение открывает то, что называется сетевым сокетом, сокетом по сети на веб-сервер и отправляет запрос.
И этот запрос, как мы увидим немного, является специально отформатированным запросом.
У него есть команда GET, а затем он имеет URL-адрес, который он хочет получить с веб-сервера.
И тогда веб-сервер выполняет кучу работы внутри себя, куча работы внутри себя, может быть, чтение дисков, файлов и запуска программ, генерируя то, что вы хотите.
И затем он отправляет ответ обратно на то же соединение сокета.
Таким образом, есть как это соединение сокета, через которое просматривается все эти вещи.
И поэтому HTML - это своего рода основная вещь, которая возвращается.
По мере того, как мы идем дальше, мы увидим, что возвращается не только HTML, но и другие вещи, а также вернуться.
И поэтому, когда браузер получает этот HTML, то он говорит, о, я знаю, что такое HTML.
У меня есть этот тег заголовка 1.
Позвольте мне изменить цвет этой штуки, чтобы вы могли видеть ее немного лучше, желтый намного лучше.
Хорошо, поэтому, когда браузер получает эту страницу, он вроде как видит ее и смотрит на нее, а затем смотрит на весь HTML.
И поэтому часть этого курса состоит в том, чтобы понять синтаксис HTML.
Это само по себе, как построить хороший HTML и CSS и как сделать его красивым.
Но в конечном счете, что-то в этом HTML, плюс его CSS, плюс его JavaScript, приводит к визуальному отображению страницы.
И тогда это то, что вы видите.
И так это цикл запроса-ответа.
Далее мы поговорим о том, что эти сетевые сокеты или вещи, которые в основном лежат в основе этого цикла запроса-ответа.
[МУЗЫКА]