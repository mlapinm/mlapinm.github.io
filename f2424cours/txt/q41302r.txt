WA4E / HTML - HyperText Markup Language (Part 2)13m.
С возвращением.
Итак, давайте поговорим о некоторых из основных синтаксиса HTML.
И первое, что нужно посмотреть на общий макет документа.
Они начинаются с HTML-тега.
У вас может быть вещь, называемая doctype здесь, , и мы можем положить в один, если нам нравится, но HTML является внешним тегом, а затем есть head tag и head tag, , и это своего рода непечатная информация.
И мы настраиваем стиль, мы объявляем название страницы, , возможно, загружаем некоторые JavaScript, , а затем печатная страница содержимое находится между тегом body, и в основном то, что мы собираемся, чтобы stoth говорить о том, что мы публикуем в качестве содержимого страницы.
Таким образом, вы обнаружите, что есть специальные имена файлов, которые мы используем.
Это действительно связано с тем, что мы делаем, это создаем каталог на веб-сервере, и когда мы идем в каталог, веб-сервер просматривает серию файлов, на которые он настроен для просмотра, такие вещи, как index.
html, index.
htm или index.
php, и каждый из них имеет несколько другой порядок и немного другой набор вещей.
Его даже можно назвать default.
htm или default.
asp, если вы находитесь в окне Windows.
Это настраивается, , поэтому разные системы делают вещи по-разному, но обычно index.
htm - это, вероятно, самая безопасная вещь, если вы не делаете PHP, , которые мы будем делать позже в index.
php.
И поэтому, как правило, это безопасная ставка.
Теперь, когда вы просматриваете вещи с диска, , что мы можем сделать, если вы скачать весь код, который у меня есть в html.
zip, тогда вам придется открыть index.
html вручную.
Таким образом, мы можем поместить несколько файлов в один и тот же каталог, а затем мы можем использовать их в так называемых относительных ссылках.
И поэтому мы можем легко создавать ссылки между одним файлом и другим и поэтому вы склонны видеть, если вы посмотрите на zip-файл, который у вас есть целая куча файлов в том же каталоге, и с маленькими якорными тегами, stoth они указывают туда и обратно между каждым из них.
И так, как я уже сказал, у вас есть теги, такие как тег абзаца, сильный тег и тег подчеркивать.
Они должны начать, они должны остановиться.
Но еще одна вещь, которая действительно важна о HTML, это факт , что большую часть времени мы логически размечиваем текст.
И поэтому мы хотим, чтобы этот материал прямо здесь был абзацем, но конец строк, которые мы помещаем в HTML, который мы пишем, на самом деле не так важен.
Что происходит, зависит от ширины браузера , , если вы измените ширину браузера, текст будет перевернут.
И это потому, что есть еще абзац, , но мы не хотим, чтобы hard-code, потому что мы не работаем над бумагой.
Иногда браузеры очень большие, иногда браузеры очень маленькие, иногда вы на телефоне, верно?
А на телефоне браузер очень маленький.
И поэтому вы не хотите, чтобы точно сказать, сколько пикселей он широк, , за исключением тех случаев, когда вы начинаете делать действительно причудливый макет.
Но в таких вещах, как абзацы, вы просто говорите: «Эй, сделайте его абзацем и перекрутите его». И повторное обертывание затем также меняет, насколько высоки страницы, , потому что чем более узкая страница, она расширяет страницу вниз.
Но пробелы внутри HTML действительно игнорируются, и строки обычно игнорируются.
Есть некоторые теги, такие как pre тег, который изменяет, что, так что пробелы соблюдаются и новые строки соблюдаются, , но большую часть времени мы просто позволяем браузеру перекручивать вещи, и это хорошо.
У вас есть начальные и конечные теги.
Итак, есть начальный тег , а затем конечный тег.
Косая черта является нашим признаком окончания.
И они в паре, и они также вложены.
Таким образом, этот p тег имеет сильный тег внутри него и em тег внутри него и , что совершенно нормально, потому что вся эта вещь является абзацем, и это кусок жирного текста.
Таким образом, у них есть начало и конец, и косая черта - конец.
Вы также можете иметь самозакрывающиеся теги, такие как тег изображения, который имеет как косая черта, и что означает, что вам не нужно иметь как изображение косой черты здесь.
Это то же самое, вы просто положили косую черту здесь, и она сама закрывается.
Еще одна вещь, которую вы привыкнете к , это то, что вы можете поставить на атрибуты открывающего тега, поэтому пары ключ-значение.
Вы читаете документацию по тегу изображения и скажете: «О, положите атрибут источника, чтобы сказать, какая картинка, какой файл мы хотим отобразить в качестве изображения.» И тег изображения должен показывать фотографии, в основном.
Учитывая, что меньше и больше, чем и другие вещи являются специальными символами, мы должны иметь способ напечатать специальные символы.
Итак, как нам напечатать специальный персонаж?
Ну, мы используем амперсанд lt точка с запятой, и есть целый список этих вещей, HTML специальные символы, и вы можете посмотреть их вверх.
Есть некоторые, которые довольно весело, как специальные символы для колоды карт, есть математические специальные символы, и вы идете искать их, и вы можете найти их.
Они милые, и вы увидите, что я использую некоторые из этих стрелок в вещах, которые я делаю.
Но ключевые, о которых вам действительно нужно знать, меньше, больше, чем, и амперсанд, потому что амперсанд становится особым характером.
Меньше, больше, чем, или амперсанд действительно являются специальными символами в HTML.
И поэтому представлять меньше, чем вы делаете амперсанд lt, амперсанд gt, и амперсанд амперсанд amp точка с запятой, чтобы получить эти вещи правильно.
HTML комментарии, как в любой язык программирования, любая ситуация, начало HTML комментария меньше, чем восклицательный тире.
Это немного неуклюже, , но мы просто хотим убедиться, что это действительно ясно, и поэтому тире, тире, меньше.
Комментарии могут проходить по многим строкам, если это то, что вы хотите сделать.
Так что это работает.
Ссылки являются критическим элементом HTML.
Именно поэтому работают поисковые системы.
Вот почему, когда я впервые увидел это, , я как будто нажимаю на вещь, и есть новая страница, разве не удивительно, верно?
И поэтому гиперссылки - это H в HTML, это H в HTTP.
И вот как мы фактически используем эту вещь, которую мы вроде просто нарисовываем, чтобы создать знания, которые Google может извлечь.
Таким образом, якорный тег, тег является тегом, который мы используем для этих вещей.
И так есть заголовок 1, абзац, а якорный тег , это начальный тег, а это конечный тег.
И поэтому текст, который кликается, это вторая страница.
И вы можете видеть, что он кликабельный прямо там.
Он стилизован с подчеркиванием в синем, чтобы указать, что это ссылка, и поэтому есть href, , который обозначает гипертекстовую ссылку, , а затем его атрибуты, , поэтому его ключ-значение с двойными кавычками, sts и это еще один URL.
И так это похоже на то, что на самом деле встает этот URL-адрес и переходит на следующую страницу .
Значит, это горячая точка.
В первые дни, и я покажу вам несколько из них, эти ссылки были как самая крутая вещь, и поэтому мы сделали их красивыми цветами, как синий с тире.
Люди не вроде как, когда они впервые увидели интернет, они не знали, чтобы нажимать на места.
Так что мы вроде как стилизовали их довольно ярко.
А потом, потому что вы часто искали сканирование и поиск по всей сети, , потому что в самом начале сайт не был таким большим, мы бы пометили их как фиолетовые после того, как вы были в нем.
Так что вы могли бы медленно, но наверняка проработать свой путь через весь Интернет, поскольку он существовал еще в старые времена и отслеживать те, чтобы вам не пришлось возвращаться к тем, которые вы видели раньше.
И это была абсолютная ссылка, и вот один с относительной ссылкой, и это предполагает , что мы сейчас находимся в той же папке, же каталог на сервере, , где у нас есть href.
Итак, вот начальный тег, вот конечный тег, а затем Первая страница - это кликабельный материал.
И вы заметите, что это фиолетовая ссылка, потому что я уже был там, потому что page1.htm был именно там, откуда я только что пришел.
И поэтому вы нажимаете на это и можете идти туда и обратно.
И это страницы, с которыми мы играли в HTTP-лекции.
И поэтому эти абсолютные ссылки - это ссылки, которые начинаются с http или https или что-то еще, и относительные ссылки нет, и поэтому в основном означает, что этот файл page1.htm должен находиться в той же папке, что и независимо от файла, который мы находимся сейчас на том же сервер.
Поэтому, если вы хотите переключать папки или серверы переключения, вам нужно использовать абсолютные ссылки.
И если вы просто перемещаетесь между файлами на одном сервере, вы можете использовать относительные ссылки.
Изображения очень весело.
В CSS мы увидим, как обернуть текст.
Одной из моих любимых вещей было обернуть текст.
Есть тег изображения, который мы видели раньше, изображение, а затем источник равно является атрибутом, а затем в кавычках имя файла.
И это может либо быть изображением, которое само по себе.
В этом случае, именно этот абзац - это то, что мы видим , и вы можете видеть, что это изображение крошечное изображение, , но это вроде бла, бла, бла, бла, изображение прямо здесь работает как персонаж.
Вы должны быть осторожны, потому что изображения могут быть действительно большими.
Вот почему я сделал крошечный образ.
И вы могли бы даже, например, в этом случае у меня есть якорный тег и кликаемая часть якорного тега - это изображение.
Поэтому, если вы нажмете прямо там, , который переместит вас в lists.htm.
И поэтому вы можете сделать изображение гипертекстовой ссылкой.
Теперь мы собираемся сделать гораздо больше с этими вещами, и это просто, на данный момент, основы.
Списки являются важной частью HTML.
Есть упорядоченные списки и неупорядоченные списки.
И поэтому неупорядоченный список начинается с тега ul и заканчивается тегом ul, , а затем этот вид граничит со всем списком.
И затем каждый элемент списка начинается с элемента списка li, и косой черты li.
И я хочу немного промежутков.
Если вы не помещаете их в абзацы, вы не совсем получите интервал по умолчанию.
Эти пустые строки действительно исходят из абзацев, , поэтому я помещаю список абзацев, в основном.
Это не должен быть список абзацев, вы можете сделать немного более плотный список со списком ссылок или что-то в этом роде, , но я помещаю абзацы.
И так вы можете видеть, что у меня есть li к концу li, li к концу li, я помещаю некоторые ссылки здесь и т.Д.
И он помещает все пули, он делает отступ автоматически.
Мы немного увидим, как мы можем контролировать все это форматирование и делать разные вещи, если мы хотим делать эти разные вещи.
Но на данный момент, мы просто собираемся играть с форматированием по умолчанию и узнать HTML, который является нашим способом , представляющим, что мы хотим список на экране, , но мы не так фантазии, как именно он должен выглядеть.
Так что в HTML мы действительно ищем значение страницы, не так красиво.
Столы.
Столы имеют немного клетчатого прошлого.
В первые дни люди, как правило, использовали таблицы для раскладки страниц на сетках.
И они просто поместили здесь абзац, и абзац здесь, а затем абзац под, , затем использовали их для перемещения, и они помещали изображения в некоторые ячейки таблицы.
и это оказалось действительно плохим, и что понятие таблиц как графический макет давно нет, и мы используем CSS сейчас, который является следующей лекцией.
Но таблицы всегда были хорошей идеей для табличных данных.
И если у вас есть что-то, что имеет смысл , например, список автомобилей с некоторыми марками, моделью и пробегом столбцов в списке, тогда вы их помечаете.
И поэтому разметка таблицы довольно проста.
Мы начинаем таблицу с тегом таблицы, , а затем у нас есть ряд строк, используя тег tr, tr, косая черта tr.
А затем, если есть строка заголовка, которая может быть отформатирована немного иначе, мы делаем th, чтобы слэш th.
И тогда это в основном говорит, что это будет таблица из трех столбцов, потому что у нас есть три заголовка таблицы, 1, 2, 3.
И тогда мы собираемся поставить tds для данных, td означает данные 1, 2, 3, и так это Ford Edge, и затем пробег этого, и дальше и дальше, как мы идем.
И поэтому их не трудно построить.
Вы вроде как должны отслеживать , сколько из этих вещей у вас есть.
И есть трюки, где вы можете сделать таблицу , которая имеет как четыре вещи, но затем в один ряд этот расширяется так, что я не могу стереть его.
Таким образом, есть способы сделать вещи, где элемент данных охватывает более одного столбца, например colspan.
Но ключ к таблицам в том, что мы используем их для таблиц, мы не используем их для организации вещей, которые сами по себе не являются строкой, строкой, строкой, строкой, строкой, строкой.
Так что я собираюсь остановиться там.
Я собираюсь записать некоторые исследования какого-то образца кода на www.
wa4e.
веб-приложения для everybody.
com/code/html.
Это очень простые страницы, , но идея заключается в том, чтобы посмотреть на них в режиме разработчика, и посмотреть на них, а затем вы можете увидеть, как различные вещи работа.
И вы также можете посмотреть на исходный код и посмотреть: «О, вот как работает pre-тег». Где пре-тег?
Нет.
Итак, посмотрите на исходный код, взгляните на вещи, и покажите, что обертывание линии на самом деле не имеет значения.
Посмотрим на pre тег в другом.
Так что я запишу некоторые видео всего образца кода, но я призываю вас взглянуть на него, потому что у него есть много хороших примеров основ HTML.
И поэтому HTML - это постоянно развивающаяся вещь, это очень творческое пространство, это очень весело.
Мы должны избежать соблазна попытаться сделать все красиво в HTML, , но вместо этого делегировать это CSS, , о чем мы будем говорить дальше.