WA4E Code Walkthrough: CSS - Part 113m.
Здравствуйте и добро пожаловать в веб-приложения для всех.
Сегодня мы рассмотрим каскадные таблицы стилей.
Вы можете скачать исходный код и разархивировать и его на вашем компьютере, если хотите, или вы можете просмотреть этот код и просто играть с ним в браузере, потому что это все статический контент, так же легко играть с boot в браузере.
И, конечно, мы захотим взглянуть на этот в консоли разработчика.
Просто имеет гораздо больше смысла попасть в это и поэтому мы идем.
Мы смотрим на CSS.
Есть несколько способов сделать это.
Мы можем видеть здесь, мы можем видеть атрибут стиля, цвет стиля равен синему и есть все виды различных параметров CSS, цвет является параметром и синий является одним из значений, и вы должны посмотреть все эти вещи вверх.
Одна из приятных вещей, которые мы можем видеть , это мы можем видеть здесь, , как мы движемся между элементами в объектной модели документа, мы можем видеть, что значения CSS и так Arial, без, как, например, это каскадное.
Тело здесь arial или sans-serif, и это означает шрифт aral, если мы можем его получить, sans-serif является запасным шрифтом.
Это h1, это немного прямо здесь, этот h1 окрашивается.
Это наше.
Браузеры имеют свои собственные значения по умолчанию, поэтому блок отображения, размер шрифта 2em, который в два раза больше, чем остальная часть шрифта, и т.д., и т.Д.
Итак, это каскадные и нижние здесь, 
Я имею в виду, это самый важный, потому что это тот, который, как мы сказали, ближе всего, а вот как работает каскадное.
Да, видел это.
И увидел это.
И затем каскад снова, мы взглянем на этого маленького парня здесь, прямо здесь, и поэтому ближайший мы хотим моноширинное семейство шрифтов.
Но тело говорит, что семейство шрифтов является arial и sans-serif, но это было переопределено, , и мы можем это видеть, и именно поэтому этот конкретный текст моноширен.
Еще одна вещь, которую мы можем сделать, это поставить в стиле границы.
Теперь, когда я работаю с этим материалом, я часто помню границу, потому что это хороший способ для вас отметить что-то и сказать, что я здесь делаю?
И мы увидим, как когда мы передвигаем текст.
Граница, сплошная граница, красная граница и пятипиксельная граница, и вот что мы видим.
И вы также можете видеть, что есть некоторые дополнительные дополнения вокруг, как хорошо или немного дополнительного поля .
И маржа сверху, это еще один.
Давайте немного прокрутим это вверх.
Margin top бросает 5em пространства над текстом, и поэтому это обычный абзац.
У нас есть пять дополнительных Эмов.
Итак, что такое «Эм «?
Em - высота символа в текущем шрифте.
И так em это действительно удобная мера.
Есть ems, пиксели и проценты.
Так что маржа раньше, это 1em здесь.
В абзаце уже есть em, маржа до, а затем спуститься сюда.
Мы добавили верхнюю маржу, , чтобы эта маржа перекрывала верхнюю маржу, которая была частью тег абзаца автоматически.
Вот эти правила стиля.
Так что давай продолжим.
Хотя это технически возможно, это действительно было бы подавляющим, чтобы поместить стиль на каждый тег, и поэтому один из вещей, которые мы склонны делать, это мы хотим поставить правила стиля , которые являются общими.
Итак, мы скажем, что мы хотели бы тег тела, и это правило стиля Это селектор, тело, а затем семейство шрифтов, и снова, шрифты семейство работ это пожалуйста, дайте мне шрифт Arial, и если это не доступно, вы дадите мне шрифт sans-serif, h1 теги, мы хотим пройти весь документ и покрасить h1 теги синим цветом.
Пройдите весь документ, найдите каждый тег абзаца, установите стиль границы на сплошной, цвет границы красный, пять пикселей.
Итак, вы видите, что каждый абзац , и мы собираемся изменить наши якорные теги, чтобы иметь зеленый и не иметь текстового оформления, потому что они по умолчанию , чтобы иметь подчеркивание, и мы должны сделать цвет фона светло-серый.
Почему?
Просто чтобы мы увидели это.
Таким образом, вы можете увидеть эту особенную вещь наверху.
И тогда, если вы посмотрите вниз в текст здесь, у нас есть теги абзаца и якорный тег, и ни один стиль не равен здесь.
То, что мы сделали, игнорируем эту маленькую часть, вот что ставит эту маленькую штуку в угол.
Так что это не то, о чем мы говорим.
Мы не ставим теги стиля вообще, и мы ставим все теги стиля здесь.
Но теперь мы также сделали то, что все абзацы должны иметь один и тот же стиль, который иногда является то, что вы хотите, и иногда это не то, что вы хотите.
Теперь, что происходит снова сейчас, если у вас есть несколько страниц, , как мы здесь, становится немного утомительно, чтобы поместить этот текст на каждой странице.
И то, что действительно распространено вместо этого, так что теперь у нас есть один и тот же грубый абзац здесь, ничего здесь, у нас есть предварительно тег, конечно.
У нас есть тег абзаца.
Нет никакого стиля равных на этих вещах, но вверх в голову, у нас есть одна строка прямо здесь, которая в основном говорит, давайте посмотрим на эту таблицу стилей, и если мы будем смотреть на stylesheet.
css, он находится в той же папке, stoth rules.
css, он находится в той же папке, что и .
htm , , и это именно то, что у нас там было.
Это просто набор селекторов , а затем выбор ключевых значений, которые мы хотим цвет синий, стиль границы, цвет границы и т.д., и т.д., и т.д., и т.д.
, и так это действительно то же самое, что мы показывали раньше, отныне в каждом, на который я смотрю.
Но теперь наша проблема в том, что мы сделали что-то с этим, чтобы сделать все заголовки, верно?
Все h1s, все абзацы, , но нам нужны лучшие способы пометить текст.
И поэтому у нас есть эти теги, и эти теги, которые мы используем только для того, чтобы положить ручки, и в старые времена, как этот абзац тег имеет эту границу, видеть, что имеет поле вверх.
У него есть граница, , но у него есть это поле 1em, это то пространство, которое вы видите , что делает абзацы хорошо выглядеть.
Я имею в виду, это не плохо.
И если вы посмотрите на это, у нас есть все эти цвета, у нас есть сильный тег, по умолчанию, вещь использует шрифт с засечками, и мне это не нравится.
Так что давайте спустимся сюда.
Ну, давайте просто посмотрим на это здесь, тег span, проверим элемент, прямо там.
Хорошо.
Итак, первое, что тег span - это встроенный тег, который не имеет стиля.
Проблема заключается в CSS, , который давным-давно, все эти теги имели стиль текста по умолчанию, но тег span является встроенным тегом без абсолютно никакого стиля вообще.
Затем тег div является блочным тегом, который не имеет никакого стиля, и он может быть вложенным.
Так что это похоже на тег абзаца, , но у него нет стиля вообще, Теперь я добавил одностечный стиль, , и вы увидите, что эти теги div не имеют дополнительного пространства, , как теги абзаца пришли с пространством.
Теперь, некоторые люди пошли и отключили пространство на теге абзаца, и есть даже файлы CSS, которые вы можете взять весь стиль, стиль шрифта, выключить теги.
Но вы заметите, что у этих divs нет места, они действительно своего рода блок.
Когда я поставлю эти пиксели, вы видите границу, если вы посмотрите очень близко, вы увидите, что есть одна пиксельная синяя линия и один пиксель оранжевая или сиенна линия прямо там.
Но divs могут быть вложенными, , и они сами не начинаются.
И поэтому вы заметите, что здесь они не начинаются с любого вида форматирования, которое приходит из браузера.
В то время как, если мы посмотрим на абзацы, есть форматирование, которое приходит из браузера.
И поэтому тег div и тег span - это просто способы разместить ручки вокруг блоков текста или кусков текста, а затем стилизовать их.
Но потом, мы все еще должны выяснить, как стилизовать, как захватить наши ручки и сделать это так, чтобы наш стиль не касался только одной вещи.
Итак, здесь у меня есть пара вещей.
У меня есть тег body, и я устанавливаю font-family, вы увидите, что я делаю это все время, и теперь у меня есть знак фунта, и это говорит, что иди найди все теги с именем body, это говорит, что иди найти все теги с атрибутом первого, id равен первым, id равен второму, и кричать.
Итак, если мы посмотрим на текст, есть понятие идентификатора, хорошо?
Идентификационный тег, который является уникальным в документе.
Итак, мы будем называть этот div первым, мы будем называть этот div второй, и этот div третий, и они соответствуют первым, вторым и третьим, хорошо?
Итак, во-первых, монопространство, во-вторых - зеленый.
Итак, все, что находится в этом блоке, который является вторым, было зеленым.
Но вы можете иметь только один идентификатор с именем первого.
Но класс вы можете иметь по всему месту.
Мы можем поместить класс morespace на пару разных тегов.
Все morespace делает это засунуть его влево и вправо, полях влево и полях вправо.
Это вроде как толкает это, и поэтому вы можете положить это здесь, вы можете поместить его в другое место, и так мурпас тянет что-то здесь.
Итак, вот еще один абзац, у которого есть morespace.
У этого есть мурпес, у этого есть мурпес, видишь?
И поэтому вы можете поставить morespace столько раз, сколько вам нравится, , а затем div третий.
И поэтому иерархический раздел означает в данном случае это немного, а громко красный.
Так где громко?
Давайте осмотрим это.
Проверяем элемент.
Громкий не только красный, , но и форсированный верхний регистр, текст преобразуется в верхний регистр.
Кричать и громко, и вы можете иметь больше одного класса на теге.
И тогда вы можете быть еще точнее с вашим выбором.
В основном это говорит о том, что найдите третий идентификатор, а затем только абзацы внутри этого тега третий, сделайте их цвет фона желтым.
А это означает, что цвет фона желтый не относится к этому тегу, он не относится к этому параграфу, он не относится к этому параграфу.
Но когда вы видите div id третий, мы выбрали этот абзац и этот абзац, и они имеют цвет фона желтого.
Продолжая дальше, давайте взглянем на простую навигационную панель.
Теперь есть этот навигационный тег, который является HTML5 вещь, и если вы посмотрите на большинство навигации на страницах, давайте перейдем к следующему, они красивые, и у них есть цвета, и они перемещаются и прочее.
Но мы хотим быть осторожными, когда мы создаем наш HTML для таких вещей , чтобы сделать их очень, очень простыми.
И вот что у меня есть, это навигация обычно мы используем тег навигации, который является блок-тегом, который говорит, «Эй, это наша навигация». Полезно для чтения с экрана и т.д.
И тогда мы скажем, что у нас будет список из двух ссылок.
И это то, что мы делаем.
Неподписанный список, неупорядоченный список, и элемент списка, который просто не абзац здесь, просто включить, просто якорный тег, , и мы собираемся поставить класс равен bots назад и класс равен вперед, так что мы stots можем стилизовать эти две вещи по-разному в будущем.
И так это то, как это выглядит без CSS вообще.
И так это хороший, элегантный, чистый HTML.
И поэтому, если вы просто смотрели на этот HTML , как программа чтения с экрана может смотреть на него, вы можете увидеть, что это действительно означает.
Теперь то, что мы делаем , мы добавляем немного HTML к этому.
И поэтому на данный момент мы просто не собираемся беспокоиться, Но в navbar.
css есть HTML или CSS, что он делает это довольно.
И так есть целая куча вещей, и мы вернемся и посмотрим на это через секунду, хорошо?
Итак, есть наш стилизованный навигатор.
Так что я вернусь в другом видео и заберу прямо здесь.