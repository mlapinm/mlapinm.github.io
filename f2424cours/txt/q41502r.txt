Introduction to Structured Query Language (SQL)11m.
Итак, теперь мы собираемся на самом деле играть с немного структурированного языка запросов, SQL.
Теперь, по этому URL-адресу вы можете захватить инструкции, которые я использую , чтобы вы могли вырезать и вставить его в.
Теперь, главное, что вы должны сделать, это , вы должны найти свой путь к оболочке.
Если вы используете что-то вроде PythonAnywhere, вы идете вперед и открываете командную строку.
Теперь, если мы используем PythonAnywhere, большая часть того, что мы делаем, это запуск приложений Django, , но вы можете просто использовать PythonAnywhere в качестве платформы Unix.
И так доберитесь до подсказки знака доллара.
Эти команды могут работать на Mac, Я не знаю, можете ли вы заставить их работать на Windows, , но любая система Linux, , но вы также можете запустить их на PythonAnywhere.
Итак, есть команда для Linux под названием sqlite3, , а затем вы даете ему имя файла.
Итак, SQLite, как я уже упоминал, - очень простая база данных, потому что он выполняет всю свою работу в одном файле.
Это не slouch как база данных с точки зрения ее производительности и масштабируемости.
Что это не хорошо, это обработка сотен людей ударяя по нему в то же время и имея программное обеспечение базы данных разрешить все эти одновременные обращения.
Но если вы вводите sqlite, вы попадаете в командную строку, где вы получаете эту стрелку sqlite.
И есть команды, которые вы можете ввести, как таблицы точек говорит эй, в этой базе данных, которая в данном случае zip.
sqlite3, в этой базе данных, какие таблицы существуют?
И там написано, что нет таблиц.
А потом вы создаете несколько таблиц.
Теперь это наш первый SQL-оператор.
И поэтому вы узнаете что-то о SQL в том, что он выглядит немного иначе , чем другие языки программирования.
И так вы говорите создать таблицу.
Это одно заявление.
Вы можете создавать вещи, отличные от таблиц.
А потом у вас есть имя таблицы.
А потом у вас есть скобки, верно?
И тогда у вас есть серия утверждений о таблице, с которой вы работаете.
И вот этот маленький язык, и есть название колонки.
Итак, это три столбца, которые мы помещаем, id, имя и email.
И у нас есть тип.
Это целое число.
VARCHAR означает строковое поле переменной длины.
NOT NULL означает, что это необходимо.
PRIMary KEY означает, что это автоинкремент, означает, что он будет поставляться базой данных.
Это дает нам как ручку для каждого ряда.
А затем VARCHAR 128 говорит, что это до 128 символов.
Ключом к этому является то, что мы заключаем здесь своего рода контракт.
И поэтому, когда мы говорим, что вы должны сделать это с 128 символами, вы не можете вставить 129.
Можно поставить до 128.
И если вы положите 129, ваш запрос базы данных взорвется, и вы такой: «Ну, это не очень мило». И ответ в том, что вы сказали ему 128 , чтобы он мог оптимизировать, как это собирается хранить данные на диске.
Если вы сделали эту тысячу, он может хранить ее по-другому , чем если вы храните 128.
Итак, ключ в том, что вы можете заключить любой контракт, который вы хотите, , но вы должны жить по контракту, который вы заключили.
И это не то, что база данных ненавидит тебя, это ты сказал, что я собираюсь сделать 128, и когда ты сделаешь 129, там написано, что ты нарушаешь наш контракт, , и так это зависит от тебя.
Таким образом, вся эта таблица CREATE заканчивается точкой с запятой, , которая является одним оператором SQL.
И поэтому мы можем ввести его.
Мы можем ввести его в несколько строк, , и вы можете увидеть, как SQLite использует эту точечную вещь, чтобы сказал вам, что это в продолжении.
И затем, наконец, вы закончите все , и вы положите точку с запятой в конце, , а затем он это делает.
И тогда мы можем спросить, используя точечные таблицы, мы можем сказать: «Есть ли таблица?» И да, там написано: «Да, это пользователи».
А затем есть команда, команда SQLite под названием dot schema и которая говорит: «Скажите мне схему пользователей».
Теперь, это в случае, если у вас не было , только что набрано в заявлении CREATE, он говорит вам, что это будет заявление CREATE.
И так часть того, что база данных хранит в этом файле sqlite, это не только данные для этой таблицы под названием Пользователи, которые вы только что создали, но и хранит схему, и поэтому вы можете сказать, «Привет, какая это схема?» Поэтому, если я отправил вам один из этих файлов, , как вы могли бы загрузить на мой автогрейдер, например , я могу запросить этот файл с помощью SQLite и сказать, какая схема?
Какие здесь столики?
И я могу начать смотреть на стол.
На самом деле, именно так я эти задания внутри компьютера.
И так это просто что-то вроде как проходит через некоторые, есть много SQL, но основы на самом деле удивительно легко понять.
И поэтому INSERT INTO, одна из вещей, которые SQL делает , заключается в том, что он имеет тенденцию использовать более одного слова.
Я встречал людей, которые использовали SQL в своей работе, и им просто нравится набирать его, , и они не понимают, как удивительно, что они делают.
Они такие: «Ну, я просто вставляю, или я удаляю некоторые вещи, или я выбираю его, чтобы прочитать».
Таким образом, он был разработан так, чтобы быть легко, потому что если мы вернемся к основам SQL, это было похоже на: «Смотри, там много сложности.
Мы хотим скрыть эту сложность.
Мы хотим передать пользователям что-то легкое». И я пишу много очень сложного SQL, и это очень сложный навык.
Но простой SQL - это то, что я думаю буквально все должны знать, как это делать.
Итак INSERT INTO, тогда у вас есть имя таблицы, , а затем у вас есть список столбцов в скобках.
Теперь это столбцы, которые вы назвали в своем заявлении CREATE, , а затем Values - это ключевое слово, , а затем есть однозначное соответствие между значениями, которые вы собираетесь поместить в столбцы.
И это, случается, строки , поэтому у нас есть маленькие цитаты вокруг них.
Они могут быть целыми числами, они могут быть датами, они могут быть всевозможными вещами, числами с плавающей запятой и т.д.
И тогда это должно соответствовать схеме.
Вы не можете помещать число в строковое поле, или строку в числовое поле, , чтобы это взорвалось.
Вы можете совершать все виды ошибок.
Вы можете либо иметь синтаксические ошибки, , как вы забываете слово INT или что-то, или вы можете иметь ошибки, которые плохи, , что ваши данные плохие, верно?
Итак, это оператор INSERT, и который добавляет строку в конец таблицы.
Оператор DELETE говорит DELETE FROM, , а затем имя таблицы, а затем предложение WHERE.
Мы увидим WHERE предложения много в SQL.
И главное, что я вроде как упоминал в начале, что нет циклов в SQL, и это одна из причин, по которой мы любим SQL, заключается в том, что вам не нужно писать петли.
И это потому, что есть своего рода подразумеваемый цикл в начале этих команд.
Итак, когда вы говорите DELETE From Users, это означает удаление всех строк из Users, верно?
Удалить все от пользователей.
Поэтому, если вы не поместите это предложение WHERE на, он фактически удаляет все там , потому что это похоже на удаление всех строк из пользователей.
Вы можете сказать это так.
Удалить все строки из пользователей.
Теперь часть всех строк на самом деле не существует, , но это просто означает, что действительно важно иметь предложение WHERE, так что вы не удаляете все строки.
Это говорит, что удалите все строки из пользователей , где адрес электронной почты равен ted@umich.edu.
И вот что это есть подразумеваемый цикл всех строк в этом заявлении DELETE, и предложение WHERE уменьшает этот до одной или нескольких строк в зависимости от тех строк, где это похоже на оператор if.
Таким образом, все это похоже на цикл с if внутри него, вот как это работает.
И вот почему многие люди любят это, потому, что вам не нужно писать петли.
Потому что эти вещи вроде петли, у них есть встроенные петли.
Но это удалит одну или пару строк, в зависимости от того, было ли у нас больше одной строки в это где письмо было ted@umich.edu.
ОБНОВЛЕНИЕ действительно круто.
Вы действительно можете ноль.
Вы можете обнулить строки и столбцы.
И снова UPDATE Users, который является именем таблицы, SET, а затем имя равно, который является именем поля и новым значением.
И поэтому вы можете сделать все столбцы, вы можете сделать один из столбцов, вы можете действительно быть в этом.
И тогда есть предложение WHERE, потому что, если вы не помещаете предложение WHERE в обновление, это означает, что это для всех строк.
Вы действительно не хотите устанавливать имя , чтобы быть Чарльзом для всех строк, вы просто хотите установить имя, чтобы быть Charles, где это правда.
Потому что, опять же, вы можете думать об этом как об обновлении всех строк в Users SET WГДЕ.
И поэтому ты всегда должен быть думая, что там он.
Таким образом, чтение выполняется с помощью SELECT.
Я хочу, чтобы это было создание, чтение, обновление, удаление.
Но create это вставить, чтение выбирается, обновление обновляется, и удаление удаляется.
SELECT - это способ, которым мы читаем вещи.
И поэтому SELECT в основном принимает список столбцов, как имя SELECT, запятая, электронная почта, или SELECT звезда, и FOR, а затем имя таблицы.
Таким образом, эта звезда SELECT From Users довольно, почти всегда первое, что мы набираем.
ВЫБР звезду ОТ пользователей, ВЫБР звезду ИЗ книг, ВЫБР звезду ОТ чего угодно.
Вы также можете поместить предложение WHERE на SELECT, потому что это снова подразумевает все строки типа вещи, происходящей.
И поэтому ВЫБРАТЬ все строки ОТ пользователей ГДЕ электронная почта равна csev@umich.edu.
И это читается намного лучше, когда вы вроде бы добавляете, что все строки логики к нему.
Базы данных хороши в поиске.
Мы можем делать такие вещи, как добавление индексов в базы данных , которые делают поиск и упорядочение еще лучше.
Таким образом, мы можем сказать, что электронная почта, пожалуйста, пока вы поддерживаете эти данные, в дополнение к поддержанию данных, поддерживать индекс, который имеет чувство порядка этих записей, bots так что если я хочу сортировать по возрастанию или убыванию, stoth то я могу получить это, cember, и я могу получить, что чтобы быть эффективным.
Заказать By - это просто вещь, которую вы бросаете в конце.
Вы можете добавить предложение WHERE здесь, , и вы можете иметь восходящий и убывающие виды, и он отлично работает.
Таким образом, это своего рода первые 60 процентов любого SQL является базовой вставкой, удалением, обновлением и чтением.
Так что это не сложно.
И красота заключается в том, что сущность SQL, средняя часть SQL, переносится по всем базам данных, которые я только что описал, потому что каждая из этих баз данных , что является современной базой данных, была изобретена после изобретения SQL, stots и так жизнь довольно хороша.
Теперь есть различия, потому что, когда они впервые построили SQL, как я думаю, '87.
Не знаю, я забыл время.
Но когда они впервые построили его, они не понимали, насколько мощными они будут.
Итак, есть куча функций, которые добавили вендоры, которые были расширениями, и некоторые из них стандартизированы.
Есть еще один раунд стандартизации.
Но тогда есть целая куча функций, которые немного отличаются.
Но из-за конкуренции у них есть концептуально одни и те же идеи, как ограничение, которое ограничивает количество строк или начинает после определенного количества строк, , и это немного отличается от stoth одной базы данных к другой.
Но это всего лишь резюме.
Вы должны знать это навсегда и навсегда.
А затем, когда вы сталкиваетесь с другой базой данных, , вы узнаете различные функции для этого.
Инструмент, который вы, возможно, захотите установить на свой ноутбук, если вы хотите начать играть с этими файлами SQLite , а не только с помощью командной строки называется SQLite браузером.
Вы можете скачать его.
Он работает на многих различных системах.
Затем вы можете открыть эти dot sqlite3 файлы , и вы можете сделать что-то с ним, включая выполнение команд SQL прямо там.
И поэтому многие люди находят это более интересным и легким способом взаимодействовать с этими файлами.
И таким образом, это подводит наше действительно быстрое введение в одностраничный SQL.
Далее мы поговорим немного о SQL и отношениях с несколькими таблицами 
А затем мы также поговорим о том, как мы соединяем это все с Django через объектно-реляционный картограф.
Так что скоро увидимся.