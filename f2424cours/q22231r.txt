Plotting Data.При разработке алгоритмов обучения зачастую несколько простых графиков дадут вам лучшее понимание того, как работает алгоритм, и позволят убедиться, что всё идет как надо и алгоритм делает то, что предполагается. Например, ранее в курсе я говорил о том, как график функции затрат J(theta) может помочь вам убедиться, что уменьшение градиента стремится к нулю. Часто графическое представление данных или всего вывода алгоритма обучения также подсказывает идеи по улучшению алгоритма. К счастью, в Octave есть простые инструменты для создания графиков. Когда я работаю с обучающимися алгоритмами, я замечаю, что визуализация результатов зачастую подсказывает способы улучшения алгоритмов. В этом видео я продемонстрирую некоторые возможности Octave в области визуализации данных. Вот окно Octave. Давайте по-быстрому сгенерируем какие-нибудь данные для отображения. Я собираюсь присвоить T вот такой массив чисел. Сейчас T - множество чисел от 0 и до 0.98. Присвоим y1=sin(2*pi*4*t). Будет несложно построить эту
Play video starting at :1:12 and follow transcript1:12
синусоиду. Я просто пишу plot(t, y1) и нажимаю Enter. И мы видим этот график, где по горизонтальной оси отложены значения t, по вертикальной - значения y1, и построена синусоида, которую мы только что рассчитали. Пусть y2=cos(2*pi*4*t), вот так. Если я выполню plot(t,y2), то Octave заменит функцию синуса на функцию косинуса, cos(x). А что, если я захочу увидеть графики синуса и косинуса один поверх другого? Всё, что мне нужно - написать plot(t, y1). И вот мой синус. А затем я воспользуюсь функцией hold on. Эта функция заставляет Octave строить новый график поверх предыдущего. Теперь я пишу plot(t,y2). Я собираюсь нарисовать косинус другим цветом. Так что я поставлю r в кавычках вот тут. Вместо создания нового графика, я построил косинусоиду на старом, и благодаря 'r' она нарисована красным цветом. Дополнительная команда xlabel('time') служит для подписывания оси Х, горизонтальной оси. ylabel('value') подписывает вертикальную ось. Я могу также подписать оба
Play video starting at :2:54 and follow transcript2:54
своих графика командой legend('sin','cos'). Сверху справа появилась легенда с обозначением обеих линий. Наконец, title('my plot') задаст заголовок над графиком. Наконец, рисунок можно сохранить командой print -dpng 'myPlot.png'. Здесь PNG - формат графического файла. Тем самым вы сохраните свой график. Перед этим давайте я сменю текущую папку, вот на эту, и после этого сохраню файл. Это займет некоторое время в зависимости от ваших настроек Octave. Я уже сделал свой рабочий стол текущей папкой, и теперь Octave нужно несколько секунд для сохранения файла. Если я проверю свой рабочий стол... Давайте свернем эти окна. Вот файл myPlot.png, сохраненный Octave, мой график в формате PNG. Octave может сохранять изображения в тысяче разных форматов. Можете набрать help plot, чтобы узнать о прочих форматах помимо PNG, в которых Octave может сохранять графику. Наконец, еесли нужно закрыть окно с графиком, это можно сделать командой close. После того, как я набрал close, окно с графиками исчезло. Octave также позволяет указывать номера графических окон. figure(1): plot(t,y1) Появляется первое окно, с графиком y1 от t. Если вам нужно новое окно, вам следует использовать другой номер. figure(2): plot(t,y2). Теперь на моем рабочем столе два графических окна. Окно 1 и окно 2, в первом построен график синуса, во втором - график косинуса. Вот еще одна удобная команда, которой я часто пользуюсь: subplot. Мы воспользуемся командой subplot(1,2,1). Этим мы разделим окно по вертикали на две секции, согласно первым двум аргументам, и перейдем в первую из этих секций. Согласно последнему параметру 1, вот здесь. Я превратил свое окно в сетку размера один на два, и теперь я буду работать в ее первой ячейке. Если я напишу команду, ее результат будет построен в первом окне. Я пишу plot(t,y1), и размещается в первой ячейке. Теперь выполним subplot(1,2,2). Уже во второй ячейке построим график plot(t,y2). График y2 от t окажется справа, во втором сегменте. Наконец, можно изменять масштабирование по отдельным осям. axis([0.5 1 -1 1]) определит диапазон значений по обеим осям для правого графика: значения по горизонтальной оси будут лежать в пределах от 0.5 до 1, а по вертикальной оси - от -1 до 1. К слову, вам не надо запоминать все эти команды в подробностях. Если вам нужно изменить масштабирование, просто вспомните о существовании команды axis, а детали можно узнать из справки Octave. Еще несколько команд. clf очищает окно. И вот еще любопытная возможность. Создадим магический квадрат 5 на 5 с названием А. Создана матрица А размера 5х5. Есть эффектный прием, с помощью которого я иногда визуализирую матрицы. Команда imagesc(A) построит цветовую сетку размера 5 на5. Здесь разные цвета соответствуют значениям элементов в матрице А. Для большей точности можно использовать colorbar. Или более функциональный вариант этой команды, вот такой. Это одновременный запуск трех команд. Я вызываю imagesc, затем colorbar, затем colormap gray. Этим я создаю цветовую палитру, точнее, палитру оттенков серого, и размещаю цветовую полосу справа. Эта цветовая полоса показывает, каким числовым значениям соответствуют цвета. В частности, верхний левый элемент А равен 17, и это число соответствует светлому оттенку серого. В то время как второй элемент А, вернее, 1,2-й э лемент А, равен 24. Как видите, элемент А(1,2) равен 24. Он отвечает за этот прямоугольник, который почти белого цвета. А вот маленькое число, скажем, элемент... какой это номер? А(4,5) равен 2, что соответствует гораздо более темному оттенку на моей цветовой шкале. В качестве другого примера я построю палитру большего размера. magic(15) вернет манический квадрат размера 15х15, и вот как выглядит черно-белая палитра значений этого квадрата. В завершение видео я хочу продемонстрировать объединение функций с помощью запятой. Вот как это делается. Если я наберу "a=1, b=2, c=3" и нажму Enter, то Octave одновременно выполнит три операции. Вернее, последовательно выполнит указанные три операции, и выведет на экран три результата. Это почти то же самое, что и "a=1; b=2; c=3", только если вместо запятых использовать точки с запятой, на экран не будет выведено ничего. Это называется объединением команд, или функций, с использованием запятой. Так в Octave реализована удобная возможность использования разных команд вроде imagesc, colorbar, colormap в одной строке. На этом все. Теперь вы знаете, как строить графики в Octave. В следующем видео я буду говорить в основном об операторах if, while, for, а также о том, как определять и использовать функции.