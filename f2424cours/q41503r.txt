Walkthrough: Basic SQL6m.
Привет и добро пожаловать в другой Django для всех пошаговое руководство.
Сегодня мы собираемся взглянуть на какой-то SQL, пройти через какой-то SQL.
Итак, раздаточный ролик для этого DJ4E.
com/Лекции/SQL-01-basics.
txt.
И мы собираемся сделать это в оболочке Linux bash, сидящей здесь, в моей учетной записи PythonAnywhere.
Так что я сижу здесь, в моем домашнем каталоге.
И у меня проверены образцы, а затем проекты.
Мы немного опередили это.
Пока мы просто собираемся работать в этом домашнем каталоге.
Таким образом, SQLite является очень простой базой данных, и он выполняет всю свою работу в одном файле.
Это не самая большая многопользовательская база данных, но она отлично подходит для класса.
Поэтому я собираюсь запустить эту команду, sqlite - это команда Linux, а , затем я собираюсь дать ей имя файла zip.
Это просто имя файла, но с суффиксом sqlite3.
Итак, теперь я в командной строке, и может ввести помощь, чтобы увидеть, какие вещи доступны, и мы идем.
У меня есть некоторые из этих команд, и поэтому вы можете делать такие вещи, как спросить, какие таблицы там, какие таблицы?
Ну, таблиц нет, поэтому давайте запустим оператор CREATE.
Это создание этого SQL, CREATE TABLE Users с именем и электронной почтой, но тогда есть это специальное, и каждая база данных делает это немного по-другому, это автоматически сгенерированное поле id , которое будет нашим первичным ключом для каждой из этих строк.
Итак, CREATE TABLE Users, поэтому просто скопируйте это и точка с запятой заканчивается этим, и поэтому вы можете это приглашение продолжения.
Таким образом, он запрашивает, пока не увидит точку с запятой.
Но теперь, если я скажу точечные таблицы, и, кстати, вы можете видеть, как я курзурирую, чтобы добраться до этого.
Итак, у меня есть таблица пользователей.
Ура, мы в порядке.
Итак, я могу сказать «Пользователи схемы», сказать, что в этой таблице?
Таким образом, это похоже на заявление CREATE TABLE, но в основном это , вы можете вернуться позже и сказать, эй, что в этой таблице, и он учит вас этому или дает вам это в виде заявления CREATE.
Итак, первое, что вы склонны делать для что-либо, это запустить оператор SELECT, R CRUD, создать, читать, обновлять и удалять, и там ничего нет.
Так что давайте положим кое-какие вещи.
Вставим, верно?
Сделать инструкцию INSERT.
Итак, конечно, у нас есть имя таблицы, у нас есть два столбца.
Нам не нужно указывать столбец id, потому что это автоматически генерируется базой данных, а затем ключевое слово values, за которым следуют два значения, который является однозначным соответствием в том же порядке, что и столбцы.
И так происходит.
Теперь я могу сделать SELECT звезда From Users и вы видите, что у меня есть запись.
Он имеет Кристен и kf@umich.
edu и первичный ключ 1.
И это довольно мило.
Можно сказать, я бы хотел видеть это не с этими вертикальными полосами.
Вертикальные полоски являются приятными и конденсированными.
Но если я скажу столбец режима, я могу сказать SELECT star From Users и , это дает мне немного больше свободного пространства.
Ладно?
И так, что столбец режима - это просто команда sqlite, чтобы сделать его немного проще для меня.
Теперь я могу просто поместить все эти записи, скопировать их все, и sqlite счастливо запускает их по порядку и закончить их с помощью оператора точки с запятой.
Так что теперь я могу сказать SELECT звезда от пользователей, и вот они.
Так что я засуну их в базу данных.
Что удивительно для меня, так это то, что она такая красивая.
Я имею в виду, я просто думаю, что SQL просто так красив.
Я имею в виду, люди избегают этого.
Есть заявление DELETE, верно?
УДАЛИТЬ ОТ пользователей ГДЕ email равен ted@umich.
edu.
Прощай, Тед.
И я могу сделать SELECT и вы можете видеть, что теперь у меня запись 4 теперь нет.
Я мог бы сказать, что DELETE From Users, где id равен 4, это тоже будет работать.
Я собираюсь изменить свое имя в записи Чака с Чака на Чарльза.
Таким образом, ОБНОВЛЕНИЕ ПОЛЬЗОВАТЕЛЕЙ SET новый ключ равен значению WHERE email равно и предложение WHERE действительно, очень важно, потому что в противном случае он обновил бы все записи, возможно, прямо перед тем, как я удалю все данные.
Вы можете видеть, что Чак теперь стал Чарльзом, когда я делаю SELECT звезда ИЗ Пользователи.
Пока, так хорошо.
Вы можете использовать предложение WHERE в инструкции SELECT, SELECT звезда FROM Users WHERE email равен csev@umich.
edu, и в этот момент мы видим только запись 2, которая является мной.
Мы можем заказать по, выбрать звезду от пользователей, ЗАКАЗ по электронной почте, который теперь мы видим письма в порядке возрастания, a, csev, cvl, kf, красиво в порядке возрастания.
Мы можем сделать DESC, мы можем сказать SELECT звезда ОТ пользователей ЗАКАЗ по имени DESC, чтобы сделать его вниз.
Итак, теперь вы видите Салли, Кристен, Колин и Чарльза в порядке убывания имени, и вы уходите.
И поэтому мы могли бы отбросить таблицу Пользователи, но давайте немного поиграем с этими данными.
Так что давайте просто скажем, что я сделал обновление.
ОБНОВЛЕНИЕ Пользователи SET Имя пользователей равно Чарльзу без предложения WHERE.
Смотрите, что происходит, это говорит вам что-то о SQL.
И если я сделаю звезду SELECT FO Users, давайте просто сделаем звезду SELECT From Users.
ВЫБР звезду ИЗ Пользователей.
Все названы Чарльзом, потому что обновление применяется ко всем строкам , пока вы не скажете его не с предложением WHERE.
Таким образом, мы всегда набираем предложение WHERE, даже не думая, , но вам не нужно вводить предложение WHERE.
И то же самое верно, если я скажу DELETE FROM Users без предложения WHERE, посмотрите, что происходит.
Обычно мы помещаем предложение WHERE на удаление.
А затем мы идем ВЫБР звезду ОТ пользователей, прочь вы идете.
Ладно?
Теперь я мог бы также сказать DROP TABLE Users, и тогда все это исчезнет.
Упс, Пользователи.
Ладно?
И вот так, точка бросить, я выйду.
Я надеюсь, что вы нашли это конкретное пошаговое руководство для Django для всех полезным, ура.